<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="82ac4cda-63ef-47ec-b2ea-e93ad332046f" name="Default" comment="" />
    <ignored path="$PROJECT_DIR$/../target/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DatabaseView">
    <option name="SHOW_INTERMEDIATE" value="true" />
    <option name="GROUP_DATA_SOURCES" value="true" />
    <option name="GROUP_SCHEMA" value="true" />
    <option name="GROUP_CONTENTS" value="false" />
    <option name="SORT_POSITIONED" value="false" />
    <option name="SHOW_EMPTY_GROUPS" value="false" />
    <option name="AUTO_SCROLL_FROM_SOURCE" value="false" />
    <option name="HIDDEN_KINDS">
      <set />
    </option>
    <expand />
    <select />
  </component>
  <component name="FUSProjectUsageTrigger">
    <session id="-985704565">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="4" />
          <entry key="project.open.time.11" value="2" />
          <entry key="project.open.time.16" value="1" />
          <entry key="project.open.time.9" value="1" />
          <entry key="project.opened" value="4" />
        </counts>
      </usages-collector>
    </session>
    <session id="364820673">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="21" />
          <entry key="project.open.time.10" value="1" />
          <entry key="project.open.time.11" value="3" />
          <entry key="project.open.time.12" value="3" />
          <entry key="project.open.time.13" value="4" />
          <entry key="project.open.time.14" value="1" />
          <entry key="project.open.time.15" value="5" />
          <entry key="project.open.time.17" value="3" />
          <entry key="project.open.time.18" value="2" />
          <entry key="project.open.time.19" value="2" />
          <entry key="project.open.time.22" value="1" />
          <entry key="project.open.time.42" value="1" />
          <entry key="project.open.time.9" value="1" />
          <entry key="project.opened" value="27" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="Clojure" value="1" />
          <entry key="ClojureScript" value="23" />
          <entry key="EDN" value="3" />
          <entry key="JSON" value="130" />
          <entry key="Markdown" value="8" />
          <entry key="PLAIN_TEXT" value="10" />
          <entry key="XML" value="17" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.js.language.service.starts" />
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="clj" value="1656" />
          <entry key="cljs" value="59546" />
          <entry key="edn" value="49" />
          <entry key="gitattributes" value="91" />
          <entry key="gitignore" value="65" />
          <entry key="json" value="19" />
          <entry key="md" value="1377" />
          <entry key="txt" value="1" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="Clojure" value="1656" />
          <entry key="ClojureScript" value="59546" />
          <entry key="EDN" value="49" />
          <entry key="JSON" value="19" />
          <entry key="Markdown" value="1377" />
          <entry key="PLAIN_TEXT" value="157" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="clj" value="1" />
          <entry key="cljs" value="23" />
          <entry key="edn" value="3" />
          <entry key="env" value="1" />
          <entry key="geojson" value="1" />
          <entry key="gitattributes" value="2" />
          <entry key="gitignore" value="3" />
          <entry key="json" value="130" />
          <entry key="md" value="8" />
          <entry key="nrepl-port" value="1" />
          <entry key="txt" value="2" />
          <entry key="xml" value="17" />
        </counts>
      </usages-collector>
    </session>
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../src/geojson/cartoFileStructure.md">
          <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
            <state split_layout="FIRST">
              <first_editor relative-caret-position="13760">
                <caret line="688" column="34" selection-start-line="688" selection-start-column="34" selection-end-line="688" selection-end-column="34" />
              </first_editor>
              <second_editor />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1266">
              <caret line="494" lean-forward="true" selection-start-line="494" selection-end-line="494" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../src/main/core.cljs">
          <provider selected="true" editor-type-id="text-editor" />
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../src/merger/core.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1366">
              <caret line="238" column="4" selection-start-line="238" selection-start-column="4" selection-end-line="238" selection-end-column="4" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../src/geojson/index.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="180">
              <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../src/geojson/filepaths_abv.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="180">
              <caret line="9" column="3" selection-start-line="9" selection-start-column="3" selection-end-line="9" selection-end-column="100" />
            </state>
          </provider>
        </entry>
      </file>
      <file pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/../package.json">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="620">
              <caret line="31" column="22" selection-start-line="31" selection-start-column="22" selection-end-line="31" selection-end-column="22" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>obj</find>
      <find>gfm</find>
      <find>growth</find>
      <find>x</find>
      <find>_d</find>
      <find>count</find>
      <find>async</find>
      <find>dir</find>
      <find>no match</find>
      <find>threa</find>
      <find>termin</find>
      <find>terminal</find>
      <find>err</find>
      <find>if-let</find>
      <find>outline</find>
    </findStrings>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/package.json" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/main/core.cljs" />
        <option value="$PROJECT_DIR$/shadow-cljs.edn" />
        <option value="$PROJECT_DIR$/../.env" />
        <option value="$PROJECT_DIR$/../shadow-idea-notes.md" />
        <option value="$PROJECT_DIR$/../test/files.json" />
        <option value="$PROJECT_DIR$/../test/files.txt" />
        <option value="$PROJECT_DIR$/../test/test9.json" />
        <option value="$PROJECT_DIR$/../test/test10.json" />
        <option value="$PROJECT_DIR$/../test/test10-abv.json" />
        <option value="$PROJECT_DIR$/../test/test11.json" />
        <option value="$PROJECT_DIR$/../src/merger/core.cljs" />
        <option value="$PROJECT_DIR$/../test/js-json.json" />
        <option value="$PROJECT_DIR$/../shadow-cljs.edn" />
        <option value="$PROJECT_DIR$/../src/geojson/archive.cljs" />
        <option value="$PROJECT_DIR$/../test/test-abv2.json" />
        <option value="$PROJECT_DIR$/../src/geojson/filespaths.cljs" />
        <option value="$PROJECT_DIR$/../src/geojson/filepaths_abv.cljs" />
        <option value="$PROJECT_DIR$/../pom.xml" />
        <option value="$PROJECT_DIR$/../.gitattributes" />
        <option value="$PROJECT_DIR$/../package.json" />
        <option value="$PROJECT_DIR$/../src/geojson/cartoFileStructure.md" />
        <option value="$PROJECT_DIR$/../src/geojson/filepaths.cljs" />
        <option value="$PROJECT_DIR$/../src/geojson/geokeymap.cljs" />
        <option value="$PROJECT_DIR$/../src/geojson/index.cljs" />
        <option value="$PROJECT_DIR$/../.gitignore" />
        <option value="$PROJECT_DIR$/../src/geojson/core.cljs" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="importAutomatically" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="NodeModulesDirectoryManager">
    <handled-path value="$PROJECT_DIR$/../node_modules" />
  </component>
  <component name="NodePackageJsonFileManager">
    <packageJsonPaths>
      <path value="$PROJECT_DIR$/../package.json" />
    </packageJsonPaths>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="2729" />
    <option name="y" value="221" />
    <option name="width" value="1477" />
    <option name="height" value="1567" />
  </component>
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <expanded-state>
          <State />
          <State>
            <id>Code maturityJava</id>
          </State>
          <State>
            <id>Data flowJava</id>
          </State>
          <State>
            <id>Data flowJavaScript</id>
          </State>
          <State>
            <id>Error handlingGroovy</id>
          </State>
          <State>
            <id>Error handlingJava</id>
          </State>
          <State>
            <id>Error handlingJavaScript</id>
          </State>
          <State>
            <id>Groovy</id>
          </State>
          <State>
            <id>Java</id>
          </State>
          <State>
            <id>JavaScript</id>
          </State>
          <State>
            <id>JavaScript validity issuesJavaScript</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>DebuggerStatementJS</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="geojson" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="main" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="merger" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SearchEverywhereHistoryKey" value="deb&#9;ACTION&#9;ActivateDebugToolWindow&#10;memory&#9;null&#9;null&#10;debug&#9;ACTION&#9;ActivateDebugToolWindow&#10;debu&#9;ACTION&#9;ActivateDebugToolWindow&#10;dump&#9;ACTION&#9;Console.TableResult.DumpGroup&#10;terminal&#9;ACTION&#9;ActivateTerminalToolWindow&#10;markdow&#9;ACTION&#9;Markdown.Toolbar.Right&#10;gfm&#9;ACTION&#9;ActivateGfmBrowserToolWindow" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/pom.xml" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="debugger.dataViews.javascript" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\src\geojson" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\test" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\test\mkdirp!" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\testing-'folder" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\testing-+folder" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\test-#testing#" />
    </key>
  </component>
  <component name="ReplState" timestamp="1535388671575">{:repl-history {:ide [], :local [], :remote [{:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional.json\&quot;\n      =c= (chan 1)]\n  (go (fsRead-&gt;put! path =c=)\n      (pprint (&lt;! =c=))))&quot;, :offset 192, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional.json\&quot;\n      =c= (chan 1)]\n  (go (fsRead-&gt;put! path =c=)\n      (js/console.log (&lt;! =c=))))&quot;, :offset 200, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional.json\&quot;]\n  (js/console.log (fs/access path)))&quot;, :offset 154, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional.json\&quot;]\n  (fs/access path fs/constants.F_OK #(js/console.log (str %1 $2))))&quot;, :offset 185, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional-district.json\&quot;]\n  (fs/access path fs/constants.F_OK #(js/console.log (str %1 $2))))&quot;, :offset 194, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional-district.json\&quot;]\n  (fs/access path fs/constants.F_OK #(pprint (str %1 $2))))&quot;, :offset 186, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional-distrit.json\&quot;]\n  (fs/access path fs/constants.F_OK #(pprint (str %1 $2))))&quot;, :offset 185, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional-distrit.json\&quot;]\n  (fs/access path \n             fs/constants.F_OK \n             #(if (nil? %1)\n                (pprint \&quot;there\&quot;)\n                (pprint \&quot;not there\&quot;))))&quot;, :offset 277, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional-district.json\&quot;]\n  (fs/access path \n             fs/constants.F_OK \n             #(if (nil? %1)\n                (str \&quot;there\&quot;)\n                (str \&quot;not there\&quot;))))&quot;, :offset 272, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Projects\\\\clojure\\\\cljs\\\\census-geojson\\\\GeoJSON\\\\500k\\\\103\\\\01\\\\congressional-district.json\&quot;]\n  (fs/access path \n             fs/constants.F_OK \n             #(if (nil? %1)\n                (pprint \&quot;there\&quot;)\n                (pprint \&quot;not there\&quot;))))&quot;, :offset 278, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;]\n  (fs/access path \n             fs/constants.F_OK \n             #(if (nil? %1)\n                (pprint \&quot;there\&quot;)\n                (pprint \&quot;not there\&quot;))))&quot;, :offset 215, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-distt.json\&quot;]\n  (fs/access path \n             fs/constants.F_OK \n             #(if (nil? %1)\n                (pprint \&quot;there\&quot;)\n                (pprint \&quot;not there\&quot;))))&quot;, :offset 212, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %1)\n                (pprint \&quot;there\&quot;)\n                (pprint \&quot;not there\&quot;))))&quot;, :offset 213, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-&gt;put!\n  [val, =port=]\n  (pprint (str \&quot;fsRead'ing: \&quot; val))\n  (fs/readFile\n    val\n    (fn [err, file]\n      (if (= (type err) (type js/Error))\n        (throw err)\n        (put! =port= file #(close! =port=))))))&quot;, :offset 222, :ns &quot;geojson.core&quot;} {:command &quot;(defn go=&gt;zip=&gt;json=&gt;\n  [=path=]\n  (go-loop []\n    (let [path (&lt;! =path=)]\n      (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n        (fs/access filepath\n                   fs/constants.F_OK\n                   #(if (nil? %)\n                      (do (pprint (str filepath \&quot; ALREADY EXISTS\&quot;))\n                          (recur))\n                      (let [=zip=  (chan 1)\n                            =json= (chan 1 (x-geo-directory directory filepath))]\n                        (do\n                          (fsRead-&gt;put! path =zip=)\n                          (pipeline-async 1 =json= zip-&gt;json-&gt;put! =zip=)\n                          (mkdir-&gt;fsW! (&lt;! =json=))\n                          (recur)))))\n        (do (pprint (str \&quot;No :geoKeyMap match found for: \&quot; path))\n            (recur))))))&quot;, :offset 836, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %1)\n                (js/console.log \&quot;there\&quot;)\n                (js/console.log \&quot;not there\&quot;))))&quot;, :offset 229, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressnal-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %1)\n                (js/console.log \&quot;there\&quot;)\n                (js/console.log \&quot;not there\&quot;))))&quot;, :offset 227, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressnal-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(str %)))&quot;, :offset 134, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressnal-district.json\&quot;]\n  (pprint (fs/access path\n                     fs/constants.F_OK\n                     #(str %))))&quot;, :offset 159, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;]\n  (pprint (fs/access path\n                     fs/constants.F_OK\n                     #(str %))))&quot;, :offset 161, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;]\n  (pprint (fs/access path\n                     fs/constants.F_OK\n                     #(identity %))))&quot;, :offset 166, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congrsional-district.json\&quot;]\n  (pprint (fs/access path\n                     fs/constants.F_OK\n                     #(identity %))))&quot;, :offset 164, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congrsional-district.json\&quot;]\n  (pprint (fs/access path\n                     fs/constants.F_OK\n                     #(if (nil? %)\n                        (str \&quot;there\&quot;)\n                        (str \&quot;not there\&quot;)))))&quot;, :offset 245, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congrsional-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %)\n                (str \&quot;there\&quot;)\n                (str \&quot;not there\&quot;))))&quot;, :offset 204, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congrsional-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %)\n                (identity \&quot;there\&quot;)\n                (identity \&quot;not there\&quot;))))&quot;, :offset 214, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congrsional-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %)\n                (pprint (identity \&quot;there\&quot;))\n                (pprint (identity \&quot;not there\&quot;)))))&quot;, :offset 232, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;]\n  (fs/access path\n             fs/constants.F_OK\n             #(if (nil? %)\n                (pprint (identity \&quot;there\&quot;))\n                (pprint (identity \&quot;not there\&quot;)))))&quot;, :offset 234, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsCheck-&gt;put!\n  [val, =port=]\n  (fs/access val\n             fs/constants.F_OK\n             #(if (nil? %)\n                (do (put! =port= \&quot;there\&quot;) (close! =port=))\n                (do (put! =port= val) (close! =port=)))))&quot;, :offset 227, :ns &quot;geojson.core&quot;} {:command &quot;(js/console.log \&quot;still working\&quot;)&quot;, :offset 32, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]    _      _]                                      (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin]    [sco]  [\&quot;outline\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;outline\&quot; \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin]    [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;uac\&quot;     \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         _        [sco]  [lev \&quot;113\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; \&quot;2012\&quot; sco]))\n  ([_         [vin]    [sco]  [lev _    ]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ;; zcta510\n  ([_         [\&quot;2010\&quot;] [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500m zctas)\n  ([_         [vin]    [sco]  [lev]        _           [\&quot;500\&quot; \&quot;k\&quot;] _] (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([&amp; anything-else]                                                  nil))&quot;, :offset 1064, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_place_500k.zip\&quot;]\n  (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (let [=test-path= (chan 1)\n          open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n      (if (not= \&quot;there\&quot; open-path)\n        (pprint (str \&quot;Not there\&quot;))\n        (pprint (str \&quot;There\&quot;))))))&quot;, :offset 404, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_place_500k.zip\&quot;]\n  (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (let [=test-path= (chan 1)\n          open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n      (if (not= \&quot;there\&quot; open-path)\n        (pprint (str \&quot;Not there\&quot;))\n        (pprint (str \&quot;There\&quot;))))\n    (pprint (str \&quot;Brrr\&quot;))))&quot;, :offset 430, :ns &quot;geojson.core&quot;} {:command &quot;(fs/access \&quot;C:\\Users\\Surface\\Projects\\clojure\\cljs\\census-geojson\\GeoJSON\\500k\\103\\01\\congressional-district.json\&quot;\n           fs/constants.F_OK\n           (fn [err] (if (nil? err)\n                       (pprint \&quot;There\&quot;)\n                       (pprint \&quot;Not there\&quot;))))&quot;, :offset 266, :ns &quot;geojson.core&quot;} {:command &quot;(js/console.log \&quot;on line\&quot;)&quot;, :offset 26, :ns &quot;geojson.core&quot;} {:command &quot;(fs/access \&quot;./GeoJSON/500k/103/01/congrnal-district.json\&quot;\n           fs/constants.F_OK\n           (fn [err] (if (nil? err)\n                       (pprint \&quot;There\&quot;)\n                       (pprint \&quot;Not there\&quot;))))&quot;, :offset 209, :ns &quot;geojson.core&quot;} {:command &quot;(fs/access \&quot;./GeoJSON/500k/103/01/congressional-district.json\&quot;\n           fs/constants.F_OK\n           (fn [err] (if (nil? err)\n                       (pprint \&quot;There\&quot;)\n                       (pprint \&quot;Not there\&quot;))))&quot;, :offset 214, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;]\n  (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (let [=test-path= (chan 1)\n          open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n      (if (not= \&quot;there\&quot; open-path)\n        (pprint (str \&quot;Not there\&quot;))\n        (pprint (str \&quot;There\&quot;))))\n    (pprint (str \&quot;Brrr\&quot;))))&quot;, :offset 431, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]    _      _]                                      (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin]    [sco]  [\&quot;outline\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;outline\&quot; \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin]    [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;uac\&quot;     \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         _        [sco]  [lev \&quot;113\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; \&quot;2012\&quot; sco]))\n  ([_         [vin]    [sco]  [lev _    ]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]) ;; zcta510\n   ([_        [vin]    [sco]  [lev]        [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])))\n  ([_         [\&quot;2010\&quot;] [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500m zctas)\n  ([_         [vin]    [sco]  [lev]        _           [\&quot;500\&quot; \&quot;k\&quot;] _] (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([&amp; anything-else]                                                  nil))&quot;, :offset 1184, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;]\n  (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (pprint (str \&quot;Directory: \&quot; directory \&quot; Filepath: \&quot; filepath))))&quot;, :offset 274, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;]\n  (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (pprint (str \&quot;Directory: \&quot; directory \&quot; Filepath: \&quot; filepath))\n    (let [=test-path= (chan 1)\n          open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n      (if (not= \&quot;there\&quot; open-path)\n        (pprint (str \&quot;Not there\&quot;))\n        (pprint (str \&quot;There\&quot;))))\n    (pprint (str \&quot;Brrr\&quot;))))&quot;, :offset 497, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;]\n  (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (pprint (str \&quot;Already existing directory: \&quot; directory \&quot; Filepath: \&quot; filepath))\n    (let [=test-path= (chan 1)\n          open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n      (if (not= \&quot;there\&quot; open-path)\n        (pprint (str \&quot;Not there\&quot;))\n        (pprint (str \&quot;There\&quot;))))))&quot;, :offset 488, :ns &quot;geojson.core&quot;} {:command &quot;(defn go=&gt;zip=&gt;json=&gt;\n  [=path=]\n  (go-loop []\n           (let [path (&lt;! =path=)]\n             (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n               (let [=test-path= (chan 1)\n                     open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n                 (if (not= \&quot;there\&quot; open-path)\n                     (let [=zip= (chan 1)\n                           =json= (chan 1 (x-geo-directory directory filepath))]\n                       (do (fsRead-&gt;put! path =zip=)\n                           (pipeline-async 1 =json= zip-&gt;json-&gt;put! =zip=)\n                           (mkdir-&gt;fsW! (&lt;! =json=))\n                           (recur)))\n                     (do (pprint (str \&quot;File already exists: \&quot; path))\n                         (recur))))\n               (do (pprint (str \&quot;No :geoKeyMap match found for: \&quot; path))\n                   (recur))))))&quot;, :offset 901, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]    _      _]                                      (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin]    [sco]  [\&quot;outline\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;outline\&quot; \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin]    [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;uac\&quot;     \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         _        [sco]  [lev \&quot;113\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; \&quot;2012\&quot; sco]))\n  ([_         [vin]    [sco]  [lev _    ]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ;; zcta510\n  ([_         [vin]    [sco]  [lev]        [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [\&quot;2010\&quot;] [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500m zctas)\n  ([_         [vin]    [sco]  [lev]        _           [\&quot;500\&quot; \&quot;k\&quot;] _] (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([&amp; anything-else]                                                  nil))&quot;, :offset 1184, :ns &quot;geojson.core&quot;} {:command &quot;(def geotest\n  [\&quot;test directory 1\&quot;\n   \&quot;test json 1\&quot;,\n   \&quot;test directory 2\&quot;\n   \&quot;test json 2\&quot;,\n   \&quot;test directory 3\&quot;\n   \&quot;test json 3\&quot;])&quot;, :offset 133, :ns &quot;geojson.core&quot;} {:command &quot;(megaShpGeoJSON geos_abv/paths)&quot;, :offset 31, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]       _      _]                                      (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 90-00\n  ([_         [vin]       [sco]  [\&quot;outline\&quot;]  [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;outline\&quot; \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 2010\n  ([_         [vin]       [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [\&quot;uac\&quot;     \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev _     ] [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; \&quot;2012\&quot; sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev]        [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; \&quot;2012\&quot; sco])) ; 2012\n  ([_         [vin]       [sco]  [lev]        [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 2013+\n  ([_         [vin]       [sco]  [lev _     ] [\&quot;500\&quot; \&quot;k\&quot;] _]             (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 2013+\n  ([_         [\&quot;2010\&quot;]    [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500m zctas)\n  ([_         [vin]       [sco]  [lev]        _           [\&quot;500\&quot; \&quot;k\&quot;] _] (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 2010\n  ([&amp; anything-else]                                                     nil))&quot;, :offset 1382, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :refer [chan put! take! &gt;! &lt;! timeout close! alts! pipeline-async]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]\n            [geojson.filepaths :as geos]\n            [geojson.filepaths_abv :as geos_abv]))&quot;, :offset 721, :ns &quot;cljs.user&quot;} {:command &quot;(def geoKeyMap\n  {:nation                                                      {:2010 \&quot;outline\&quot;\n                                                                 :2013 \&quot;nation\&quot;\n                                                                 :2014 \&quot;nation\&quot;\n                                                                 :2015 \&quot;nation\&quot;\n                                                                 :2016 \&quot;nation\&quot;\n                                                                 :2017 \&quot;nation\&quot;}\n   :region                                                      {:2013 \&quot;region\&quot;\n                                                                 :2014 \&quot;region\&quot;\n                                                                 :2015 \&quot;region\&quot;\n                                                                 :2016 \&quot;region\&quot;\n                                                                 :2017 \&quot;region\&quot;\n                                                                 :2010 \&quot;020\&quot;\n                                                                 :2000 \&quot;rg\&quot;}\n   :division                                                    {:2013 \&quot;division\&quot;\n                                                                 :2014 \&quot;division\&quot;\n                                                                 :2015 \&quot;division\&quot;\n                                                                 :2016 \&quot;division\&quot;\n                                                                 :2017 \&quot;division\&quot;\n                                                                 :2010 \&quot;030\&quot;\n                                                                 :2000 \&quot;dv\&quot;}\n   :state                                                       {:2013 \&quot;state\&quot;\n                                                                 :2014 \&quot;state\&quot;\n                                                                 :2015 \&quot;state\&quot;\n                                                                 :2016 \&quot;state\&quot;\n                                                                 :2017 \&quot;state\&quot;\n                                                                 :2010 \&quot;040\&quot;\n                                                                 :1990 \&quot;st\&quot;\n                                                                 :2000 \&quot;st\&quot;}\n   :consolidated-cities                                         {:2000 \&quot;cc\&quot;\n                                                                 :2010 \&quot;170\&quot;\n                                                                 :2013 \&quot;concity\&quot;\n                                                                 :2014 \&quot;concity\&quot;\n                                                                 :2015 \&quot;concity\&quot;\n                                                                 :2016 \&quot;concity\&quot;\n                                                                 :2017 \&quot;concity\&quot;}\n   :county                                                      {:2013 \&quot;county\&quot;\n                                                                 :2014 \&quot;county\&quot;\n                                                                 :2015 \&quot;county\&quot;\n                                                                 :2016 \&quot;county\&quot;\n                                                                 :2017 \&quot;county\&quot;\n                                                                 :2010 \&quot;050\&quot;\n                                                                 :1990 \&quot;co\&quot;\n                                                                 :2000 \&quot;co\&quot;}\n   :county-subdivision                                          {:2013 \&quot;cousub\&quot;\n                                                                 :2014 \&quot;cousub\&quot;\n                                                                 :2015 \&quot;cousub\&quot;\n                                                                 :2016 \&quot;cousub\&quot;\n                                                                 :2017 \&quot;cousub\&quot;\n                                                                 :2010 \&quot;060\&quot;\n                                                                 :1990 \&quot;cs\&quot;\n                                                                 :2000 \&quot;cs\&quot;}\n   :tract                                                       {:2013 \&quot;tract\&quot;\n                                                                 :2014 \&quot;tract\&quot;\n                                                                 :2015 \&quot;tract\&quot;\n                                                                 :2016 \&quot;tract\&quot;\n                                                                 :2017 \&quot;tract\&quot;\n                                                                 :2010 \&quot;140\&quot;\n                                                                 :1990 \&quot;tr\&quot;\n                                                                 :2000 \&quot;tr\&quot;}\n   :place                                                       {:2013 \&quot;place\&quot;\n                                                                 :2014 \&quot;place\&quot;\n                                                                 :2015 \&quot;place\&quot;\n                                                                 :2016 \&quot;place\&quot;\n                                                                 :2017 \&quot;place\&quot;\n                                                                 :2010 \&quot;160\&quot;\n                                                                 :1990 \&quot;pl\&quot;\n                                                                 :2000 \&quot;pl\&quot;}\n   :alaska-native-regional-corporation                          {:2013 \&quot;anrc\&quot;\n                                                                 :2014 \&quot;anrc\&quot;\n                                                                 :2015 \&quot;anrc\&quot;\n                                                                 :2016 \&quot;anrc\&quot;\n                                                                 :2017 \&quot;anrc\&quot;\n                                                                 :2010 \&quot;230\&quot;\n                                                                 :1990 \&quot;an\&quot;\n                                                                 :2000 \&quot;an\&quot;}\n   :american-indian-area!alaska-native-area!hawaiian-home-land  {:2013 \&quot;aiannh\&quot;\n                                                                 :2014 \&quot;aiannh\&quot;\n                                                                 :2015 \&quot;aiannh\&quot;\n                                                                 :2016 \&quot;aiannh\&quot;\n                                                                 :2017 \&quot;aiannh\&quot;\n                                                                 :2010 \&quot;250\&quot;\n                                                                 :1990 \&quot;ir\&quot;\n                                                                 :2000 \&quot;na\&quot;}\n   :metropolitan-statistical-area!micropolitan-statistical-area {:2013 \&quot;cbsa\&quot;\n                                                                 :2014 \&quot;cbsa\&quot;\n                                                                 :2015 \&quot;cbsa\&quot;\n                                                                 :2016 \&quot;cbsa\&quot;\n                                                                 :2017 \&quot;cbsa\&quot;\n                                                                 :2010 \&quot;310\&quot;\n                                                                 :1990 \&quot;ma\&quot;}\n   :combined-statistical-area                                   {:2013 \&quot;csa\&quot;\n                                                                 :2014 \&quot;csa\&quot;\n                                                                 :2015 \&quot;csa\&quot;\n                                                                 :2016 \&quot;csa\&quot;\n                                                                 :2017 \&quot;csa\&quot;\n                                                                 :2010 \&quot;330\&quot;}\n   :new-england-city-and-town-area                              {:2013 \&quot;necta\&quot;\n                                                                 :2014 \&quot;necta\&quot;\n                                                                 :2015 \&quot;necta\&quot;\n                                                                 :2016 \&quot;necta\&quot;\n                                                                 :2017 \&quot;necta\&quot;\n                                                                 :2010 \&quot;350\&quot;}\n   :combined-new-england-city-and-town-area                     {:2016 \&quot;cnecta\&quot;\n                                                                 :2017 \&quot;cnecta\&quot;}\n   :urban-area                                                  {:2013 \&quot;ua\&quot;\n                                                                 :2014 \&quot;ua\&quot;\n                                                                 :2015 \&quot;ua\&quot;\n                                                                 :2016 \&quot;ua\&quot;\n                                                                 :2017 \&quot;ua\&quot;\n                                                                 :2012 \&quot;uac\&quot;\n                                                                 :1990 \&quot;ua\&quot;\n                                                                 :2000 \&quot;ua\&quot;}\n   :congressional-district                                      {:103  \&quot;cd\&quot;\n                                                                 :104  \&quot;cd\&quot;\n                                                                 :105  \&quot;cd\&quot;\n                                                                 :106  \&quot;cd\&quot;\n                                                                 :107  \&quot;cd\&quot;\n                                                                 :108  \&quot;cd\&quot;\n                                                                 :109  \&quot;cd\&quot;\n                                                                 :110  \&quot;cd\&quot;\n                                                                 :2013 \&quot;cd\&quot;\n                                                                 :2014 \&quot;cd\&quot;\n                                                                 :2015 \&quot;cd\&quot;\n                                                                 :2016 \&quot;cd\&quot;\n                                                                 :2017 \&quot;cd\&quot;\n                                                                 :2012 \&quot;cd\&quot;\n                                                                 :2010 \&quot;500\&quot;}\n   :school-district-'elementary'                                {:2016 \&quot;elsd\&quot;\n                                                                 :2017 \&quot;elsd\&quot;\n                                                                 :2000 \&quot;se\&quot;}\n   :school-district-'secondary'                                 {:2016 \&quot;scsd\&quot;\n                                                                 :2017 \&quot;scsd\&quot;\n                                                                 :2000 \&quot;ss\&quot;}\n   :school-district-'unified'                                   {:2016 \&quot;unsd\&quot;\n                                                                 :2017 \&quot;unsd\&quot;\n                                                                 :2010 \&quot;970\&quot;\n                                                                 :2000 \&quot;sn\&quot;}\n   :block-group                                                 {:2013 \&quot;bg\&quot;\n                                                                 :2014 \&quot;bg\&quot;\n                                                                 :2015 \&quot;bg\&quot;\n                                                                 :2016 \&quot;bg\&quot;\n                                                                 :2017 \&quot;bg\&quot;\n                                                                 :2010 \&quot;150\&quot;\n                                                                 :1990 \&quot;bg\&quot;\n                                                                 :2000 \&quot;bg\&quot;}\n   :public-use-microdata-area                                   {:2013 \&quot;puma\&quot;\n                                                                 :2014 \&quot;puma\&quot;\n                                                                 :2015 \&quot;puma\&quot;\n                                                                 :2016 \&quot;puma\&quot;\n                                                                 :2017 \&quot;puma\&quot;}\n   :zip-code-tabulation-area                                    {:2013 \&quot;zcta\&quot;\n                                                                 :2014 \&quot;zcta\&quot;\n                                                                 :2015 \&quot;zcta\&quot;\n                                                                 :2016 \&quot;zcta\&quot;\n                                                                 :2017 \&quot;zcta\&quot;\n                                                                 :2010 \&quot;860\&quot; ;; this is a bfjo, punted\n                                                                 :2000 \&quot;zt\&quot;} ;; zipcodes are *not* the same\n   :state-legislative-district-'upper-chamber'                  {:2013 \&quot;sldu\&quot;\n                                                                 :2014 \&quot;sldu\&quot;\n                                                                 :2015 \&quot;sldu\&quot;\n                                                                 :2016 \&quot;sldu\&quot;\n                                                                 :2017 \&quot;sldu\&quot;\n                                                                 :2012 \&quot;sldu\&quot;\n                                                                 :2010 \&quot;610\&quot;\n                                                                 :2000 \&quot;su\&quot;}\n   :state-legislative-district-'lower-chamber'                  {:2013 \&quot;sldl\&quot;\n                                                                 :2014 \&quot;sldl\&quot;\n                                                                 :2015 \&quot;sldl\&quot;\n                                                                 :2016 \&quot;sldl\&quot;\n                                                                 :2017 \&quot;sldl\&quot;\n                                                                 :2012 \&quot;sldl\&quot;\n                                                                 :2010 \&quot;620\&quot;\n                                                                 :2000 \&quot;sl\&quot;}})&quot;, :offset 13575, :ns &quot;geojson.core&quot;} {:command &quot;(defn keySearch\n  \&quot;\n  Searches the entire geoKeyMap (inverted) for matches against a provided\n  vintage and level abbreviation returning a string for the verbose geoKeyMap\n  key match if successful and an empty string ('') if not.\n  \&quot;\n  [vintage level]\n  (apply str (remove nil? (map #(?keyMatch vintage level %) (seq (map-invert geoKeyMap))))))&quot;, :offset 345, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]       _      _]                                      (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 90-00\n  ([_         [vin]       [sco]  [\&quot;outline\&quot;]  [res mes] _]               (geoScopeFiler [\&quot;outline\&quot; res   mes vin    sco])) ; 2010\n  ([_         [vin]       [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [res mes] _]               (geoScopeFiler [\&quot;uac\&quot;     res   mes vin    sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev _     ] [res mes] _]               (geoScopeFiler [lev       res   mes \&quot;2012\&quot; sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev]        [res mes] _]               (geoScopeFiler [lev       res   mes \&quot;2012\&quot; sco])) ; 2012\n  ([_         [vin]       [sco]  [lev]        [res mes] _]               (geoScopeFiler [lev       res   mes vin    sco])) ; 2013+\n  ([_         [vin]       [sco]  [lev _     ] [res mes] _]               (geoScopeFiler [lev       res   mes vin    sco])) ; 2013+\n  ([_         [\&quot;2010\&quot;]    [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500m zctas)\n  ([_         [vin]       [sco]  [lev]        _           [res   mes] _] (geoScopeFiler [lev       res   mes vin    sco])) ; 2010\n  ([&amp; anything-else]                                                     nil))&quot;, :offset 1382, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSON\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [paths-vec]\n  (let [=path= (chan 1)]\n    (go=&gt;zip=&gt;json=&gt; =path=)\n    (go (if (= nil (doseq [path paths-vec] (&gt;! =path= path)))\n          (js/console.log \&quot;\\n ======================== \\n\n                           \\n === FINISHED PARSING === \\n\n                           \\n === Wrapping up .... === \\n\n                           \\n ======================== \\n\&quot;)))))&quot;, :offset 636, :ns &quot;geojson.core&quot;} {:command &quot;(megaShpGeoJSON geos/paths)&quot;, :offset 27, :ns &quot;geojson.core&quot;} {:command &quot;geojson&quot;, :offset 7, :ns &quot;cljs.user&quot;} {:command &quot;(defn ii-&gt;vin\n  \&quot;\n  Map over a collection to transform 2-digit vintages to their 4-digit codes.\n  \&quot;\n  [vtr]\n  (map #(cond (= \&quot;90\&quot; %) \&quot;1990\&quot;\n              (= \&quot;00\&quot; %) \&quot;2000\&quot;\n              :else %)\n       vtr))&quot;, :offset 207, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geoIDvecs\n  \&quot;\n  Breaks apart a Census Tiger filename and cleans it into meaningful parts.\n  Takes a single string and returns a vector of vectors.\n  \&quot;\n  [string]\n  (-&gt;&gt; (s/split string #\&quot;_|\\.\&quot;)\n       (map #(re-seq #\&quot;[a-z]+|[0-9]+\&quot; %))\n       (map (fn [y] (remove #(= \&quot;d\&quot; %) y)))\n       (map-target-idx ii-&gt;vin 2)\n       (map #(vec %))))&quot;, :offset 354, :ns &quot;geojson.core&quot;} {:command &quot;(defn ?keyMatch\n  \&quot;\n  Searches a single item from an inverted geoKeyMap and checks for a match\n  against the provided vintage/level abbreviation code pair. Returns the `name`\n  of the key (string) if matched and `nil` if mismatched.\n  \&quot;\n  [vintage level [k v]]\n  (if-let [[_ v2] (find k (keyword vintage))]\n    (if (= v2 level) (name v) nil)\n    nil))&quot;, :offset 351, :ns &quot;geojson.core&quot;} {:command &quot;(defn keySearch\n  \&quot;\n  Searches the entire geoKeyMap (inverted) for matches against a provided\n  vintage and level abbreviation returning a string for the verbose geoKeyMap\n  key match if successful and an empty string ('') if not.\n  \&quot;\n  [vintage level]\n  (apply str (remove nil? (map #(?keyMatch vintage level %) (seq (map-invert index/geoKeyMap))))))&quot;, :offset 351, :ns &quot;geojson.core&quot;} {:command &quot;(defn parts-&gt;geopath\n  \&quot;\n  Consumes parts of the Tiger filename to compose a structured path for storage\n  as a `.json` file.\n  \&quot;\n  [[lev res m vin &amp; etc]]\n  (let [geopath (s/join \&quot;/\&quot; (list* vin etc))]\n    {:filepath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath (apply str (keySearch vin lev) \&quot;.json\&quot;)]))\n     :directory (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath]))}))&quot;, :offset 395, :ns &quot;geojson.core&quot;} {:command &quot;(defn geoScopeFiler\n  \&quot;\n  Creates a filepath determined by whether or not the input contains a state\n  (e.g., '01') or national code ('99'/'us'). If the value returned from the\n  `keySearch` function = `` (empty string) returns `nil`.\n  \&quot;\n  [[lev res mes vin sco]]\n  (if-not (= \&quot;\&quot; (keySearch vin lev))\n    (if (or (= sco \&quot;99\&quot;) (= sco \&quot;us\&quot;))\n      (parts-&gt;geopath [lev res mes vin])\n      (parts-&gt;geopath [lev res mes vin sco]))\n    nil))&quot;, :offset 437, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]       _      _]                                      (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 90-00\n  ([_         [vin]       [sco]  [\&quot;outline\&quot;]  [res mes] _]               (geoScopeFiler [\&quot;outline\&quot; res   mes vin    sco])) ; 2010\n  ([_         [vin]       [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [res mes] _]               (geoScopeFiler [\&quot;uac\&quot;     res   mes vin    sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev _     ] [res mes] _]               (geoScopeFiler [lev       res   mes \&quot;2012\&quot; sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev]        [res mes] _]               (geoScopeFiler [lev       res   mes \&quot;2012\&quot; sco])) ; 2012\n  ([_         [vin]       [sco]  [lev]        [res mes] _]               (geoScopeFiler [lev       res   mes vin    sco])) ; 2013+\n  ([_         [vin]       [sco]  [lev _     ] [res mes] _]               (geoScopeFiler [lev       res   mes vin    sco])) ; 2013+\n  ([_         [\&quot;2010\&quot;]    [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500k zctas)\n  ([_         [vin]       [sco]  [lev]        _           [res   mes] _] (geoScopeFiler [lev       res   mes vin    sco])) ; 2010\n  ([&amp; anything-else]                                                     nil))&quot;, :offset 1382, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geopath\n  \&quot;\n  Takes a filename string as input and sends it through the filepath creation\n  pipeline. Returns `nil` if no matches are found for the level abbreviation\n  contained in the filename.\n  \&quot;\n  [string]\n  (if-let [answer (-&gt;&gt; (filename-&gt;&gt;geoIDvecs string) (apply file=&lt;&lt;Director))] answer nil))&quot;, :offset 319, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsCheck-&gt;put!\n  [val, =port=]\n  (fs/access val\n             fs/constants.F_OK\n             (fn [err] (if (nil? err)\n                         (do (put! =port= (str \&quot;there\&quot;)) (close! =port=))\n                         (do (put! =port= val) (close! =port=))))))&quot;, :offset 263, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-&gt;put!\n  [val, =port=]\n  (pprint (str \&quot;fsRead'ing: \&quot; val))\n  (fs/readFile val\n               (fn [err, file]\n                 (if (= (type err) (type js/Error))\n                   (throw (js/Error. err))\n                   (put! =port= file #(close! =port=))))))&quot;, :offset 274, :ns &quot;geojson.core&quot;} {:command &quot;(defn zip-&gt;json-&gt;put!\n  [val =port=]\n  (pprint (str \&quot;zip-&gt;json'ing...\&quot;))\n  (take! (cpa/value-port (shpjs val))\n         (fn [res] (put! =port=\n                         (js/JSON.stringify res)\n                         #(close! =port=)))))&quot;, :offset 237, :ns &quot;geojson.core&quot;} {:command &quot;(defn transducified [f]\n  (fn [rf]\n    (fn\n      ([] (rf))\n      ([acc] (rf acc))\n      ([acc val] (rf acc (f val))))))&quot;, :offset 119, :ns &quot;geojson.core&quot;} {:command &quot;(defn geo-directory\n  [directory filepath json]\n  {:directory directory\n   :filepath filepath\n   :json json})&quot;, :offset 109, :ns &quot;geojson.core&quot;} {:command &quot;(defn x-geo-directory\n  [directory filepath]\n  (transducified (partial geo-directory directory filepath)))&quot;, :offset 106, :ns &quot;geojson.core&quot;} {:command &quot;(defn mkdir-&gt;fsW!\n  \&quot;\n  Takes some geojson and a directory and - internally - calls Node `fs/writeFile`\n  to store the geojson into the directory.\n  \&quot;\n  [val]\n  (let [{:keys [directory filepath json]} val]\n    (pprint (str \&quot;Ensuring Directory: \&quot; directory))\n    (mkdirp\n      directory\n      (fn [err]\n        (if (= (type err) (type js/Error))\n          (js/console.log (str \&quot;Error creating directory: \&quot; filepath))\n          (fs/writeFile\n            filepath\n            json\n            (fn [err]\n              (if (= (type err) (type js/Error))\n                (js/console.log (str \&quot;Error writing file: \&quot; filepath))\n                (js/console.log (str \&quot;Wrote GeoJSON to: \&quot; filepath))))))))))&quot;, :offset 696, :ns &quot;geojson.core&quot;} {:command &quot;(defn go=&gt;zip=&gt;json=&gt;\n  [=path=]\n  (go-loop []\n           (let [path (&lt;! =path=)]\n             (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n               (let [=test-path= (chan 1)]\n                 (do\n                   (fsCheck-&gt;put! filepath =test-path=)\n                   (if (not= \&quot;there\&quot; (&lt;! =test-path=))\n                       (let [=zip= (chan 1)\n                             =json= (chan 1 (x-geo-directory directory filepath))]\n                         (do (fsRead-&gt;put! path =zip=)\n                             (pipeline-async 1 =json= zip-&gt;json-&gt;put! =zip=)\n                             (mkdir-&gt;fsW! (&lt;! =json=))\n                             (recur)))\n                       (do (pprint (str \&quot;File already exists: \&quot; path))\n                           (recur)))))\n               (do (pprint (str \&quot;No :geoKeyMap match found for: \&quot; path))\n                   (recur))))))&quot;, :offset 931, :ns &quot;geojson.core&quot;} {:command &quot;(filename-&gt;&gt;geopath \&quot;tb99_d00_shp.zip\&quot;)&quot;, :offset 39, :ns &quot;geojson.core&quot;} {:command &quot;(filename-&gt;&gt;pattern 'cb_d00_01_county_within_ua_500k.zip')&quot;, :offset 58, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :refer [chan put! take! &gt;! &lt;! timeout close! alts! pipeline-async]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]\n            [geojson.filepaths :as geos]\n            [geojson.index :as index]\n            [geojson.filepaths_abv :as geos_abv]))&quot;, :offset 759, :ns &quot;geojson.core&quot;} {:command &quot;(defn map-xx-&gt;vin\n  \&quot;\n  Map over a collection to transform 2-digit vintages to their 4-digit codes.\n  \&quot;\n  [vtr]\n  (map #(cond (= \&quot;90\&quot; %) \&quot;1990\&quot;\n              (= \&quot;00\&quot; %) \&quot;2000\&quot;\n              :else %)\n       vtr))&quot;, :offset 211, :ns &quot;geojson.core&quot;} {:command &quot;(defn map-target-idx\n  \&quot;\n  Maps a provided function to a specific index of a provided collection of\n  collections.\n  \&quot;\n  [fnc idx coll]\n  (map-indexed #(if (zero? (mod (inc %1) idx)) (fnc %2) %2) coll))&quot;, :offset 202, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;pattern\n  \&quot;\n  Breaks apart a Census Tiger filename and cleans it into meaningful parts.\n  Takes a single string and returns a vector of vectors.\n\n  Inputs:\n  1) a filename (string)\n\n  Example:\n  (filename-&gt;&gt;pattern 'cb_d00_01_county_within_ua_500k.zip')\n  ; =&gt; (['cb'] ['2000'] ['01'] ['county'] ['within'] ['ua'] ['500' 'k'] ['zip'])\n  \&quot;\n  [string]\n  (-&gt;&gt; (s/split string #\&quot;_|\\.\&quot;)\n       (map #(re-seq #\&quot;[a-z]+|[0-9]+\&quot; %))\n       (map (fn [y] (remove #(= \&quot;d\&quot; %) y)))\n       (map-target-idx map-xx-&gt;vin 2)\n       (map #(vec %))))&quot;, :offset 546, :ns &quot;geojson.core&quot;} {:command &quot;(defn vin+lev=?key\n  \&quot;\n  Searches a single item from an inverted geoKeyMap and checks for a match\n  against the provided vintage/level abbreviation code pair. Returns the `name`\n  of the key (string) if matched and `nil` if mismatched.\n  \&quot;\n  [vintage level [k v]]\n  (if-let [[_ v2] (find k (keyword vintage))]\n    (if (= v2 level) (name v) nil)\n    nil))&quot;, :offset 354, :ns &quot;geojson.core&quot;} {:command &quot;(defn keySearch\n  \&quot;\n  Searches the entire geoKeyMap (inverted) for matches against a provided\n  vintage and level abbreviation returning a string for the verbose geoKeyMap\n  key match if successful and an empty string ('') if not.\n  \&quot;\n  [vintage level]\n  (apply str (remove nil? (map #(vin+lev=?key vintage level %)\n                               (seq (map-invert index/geoKeyMap))))))&quot;, :offset 385, :ns &quot;geojson.core&quot;} {:command &quot;(defn config-geoPath\n  \&quot;\n  Consumes parts of the Tiger filename to compose a structured path for storage\n  as a `.json` file.\n\n  Inputs:\n  1) Geographic Level\n  2) Shapefile Resolution part 1\n  3) Resolution part 2\n  4) Vintage\n  &amp;) Optional arguments for locally (e.g., state FIPS) scoped geo aggregations\n\n  Example:\n  (config-geoPath ['county' '500' 'k' '2000' '01'])\n  ; =&gt; '500k/2000/01/.json'\n  \&quot;\n  [[lev res m vin &amp; etc]]\n  (let [geopath (s/join \&quot;/\&quot; (list* vin etc))]\n    {:filepath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath (apply str (keySearch vin lev) \&quot;.json\&quot;)]))\n     :directory (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath]))}))&quot;, :offset 668, :ns &quot;geojson.core&quot;} {:command &quot;(defn scope-geoPath\n  \&quot;\n  Creates a filepath determined by whether or not the input contains a state\n  (e.g., '01') or national code ('99'/'us'). If the value returned from the\n  `keySearch` function = `` (empty string) returns `nil`.\n  \&quot;\n  [[lev res mes vin sco]]\n  (if-not (= \&quot;\&quot; (keySearch vin lev))\n    (if (or (= sco \&quot;99\&quot;) (= sco \&quot;us\&quot;))\n      (config-geoPath [lev res mes vin])\n      (config-geoPath [lev res mes vin sco]))\n    nil))&quot;, :offset 437, :ns &quot;geojson.core&quot;} {:command &quot;(defun file-pattern=&lt;&lt;geoPath\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin]       _      _]                                      (scope-geoPath [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco])) ; 90-00\n  ([_         [vin]       [sco]  [\&quot;outline\&quot;]  [res mes] _]               (scope-geoPath [\&quot;outline\&quot; res   mes vin    sco])) ; 2010\n  ([_         [vin]       [sco]  [\&quot;uac\&quot; \&quot;10\&quot;] [res mes] _]               (scope-geoPath [\&quot;uac\&quot;     res   mes vin    sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev _     ] [res mes] _]               (scope-geoPath [lev       res   mes \&quot;2012\&quot; sco])) ; 2012\n  ([_         [\&quot;rd\&quot; \&quot;13\&quot;] [sco]  [lev]        [res mes] _]               (scope-geoPath [lev       res   mes \&quot;2012\&quot; sco])) ; 2012\n  ([_         [vin]       [sco]  [lev]        [res mes] _]               (scope-geoPath [lev       res   mes vin    sco])) ; 2013+\n  ([_         [vin]       [sco]  [lev _     ] [res mes] _]               (scope-geoPath [lev       res   mes vin    sco])) ; 2013+\n  ([_         [\&quot;2010\&quot;]    [\&quot;us\&quot;] [\&quot;860\&quot;]      _           [\&quot;500\&quot; \&quot;k\&quot;] _] nil) ;; abandon ship (500k zctas)\n  ([_         [vin]       [sco]  [lev]        _           [res   mes] _] (scope-geoPath [lev       res   mes vin    sco])) ; 2010\n  ([&amp; anything-else]                                                     nil))&quot;, :offset 1389, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geopath\n  \&quot;\n  Takes a filename string as input and sends it through the filepath creation\n  pipeline. Returns `nil` if no matches are found for the level abbreviation\n  contained in the filename.\n\n  Examples:\n    (filename-&gt;&gt;geopath 'tb99_d00_shp.zip')\n    ;; =&gt; nil\n    (filename-&gt;&gt;geopath 'zt01_d00_shp.zip')\n    ;; =&gt; '500k/2000/01/zip-code-tabulation-area.json'\n  \&quot;\n  [string]\n  (if-let [answer (-&gt;&gt; (filename-&gt;&gt;pattern string) (apply file-pattern=&lt;&lt;geoPath))]\n    answer\n    nil))&quot;, :offset 502, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsCheck-&gt;put!\n  \&quot;\n  Checks to see if a file is already located at a given location.\n  puts 'there' into the passed `chan` if so, puts the filepath in the `chan` if\n  not. Used to ensure files aren't saved twice (and thus needed to be recommited)\n  \&quot;\n  [val, =port=]\n  (fs/access val\n             fs/constants.F_OK\n             (fn [err] (if (nil? err)\n                         (do (put! =port= (str \&quot;there\&quot;)) (close! =port=))\n                         (do (put! =port= val) (close! =port=))))))&quot;, :offset 499, :ns &quot;geojson.core&quot;} {:command &quot;(defn zip-&gt;geojson-&gt;put!\n  \&quot;\n  Uses `shpjs` NPM library to convert zipfile into GeoJSON format.\n  Uses `cljs-promises` to convert the promise returned from `shpjs` to a\n  promise-cum-core.async `chan` (`value-port`). Once the promise is resolved,\n  the GeoJSON is `take!`en out of the `value-port` and `put!` into a passed `chan`.\n  \&quot;\n  [val =port=]\n  (pprint (str \&quot;zip-&gt;json'ing...\&quot;))\n  (take! (cpa/value-port (shpjs val))\n         (fn [res] (put! =port=\n                         (js/JSON.stringify res)\n                         #(close! =port=)))))&quot;, :offset 550, :ns &quot;geojson.core&quot;} {:command &quot;(defn transducified [f]\n  \&quot;\n  A function that takes a standard function (taking a single argument) and\n  augments it with the structure of a transducer function.\n  \&quot;\n  (fn [rf]\n    (fn\n      ([] (rf))\n      ([acc] (rf acc))\n      ([acc val] (rf acc (f val))))))&quot;, :offset 261, :ns &quot;geojson.core&quot;} {:command &quot;(defn geojson-config\n  \&quot;\n  Takes a directory, filepath and some GeoJSON and composes it into a map with\n  cooresponding keys.\n  \&quot;\n  [directory filepath json]\n  {:directory directory\n   :filepath filepath\n   :json json})&quot;, :offset 219, :ns &quot;geojson.core&quot;} {:command &quot;(defn x-geojson-config\n  \&quot;\n  Turns the geojson-config function into a transducer.\n  \&quot;\n  [directory filepath]\n  (transducified (partial geojson-config directory filepath)))&quot;, :offset 171, :ns &quot;geojson.core&quot;} {:command &quot;(defn geo+config-&gt;mkdirp-&gt;fsW!\n  \&quot;\n  Takes some geojson and a directory and - internally - calls Node `fs/writeFile`\n  to store the geojson into the directory, creating the directory first if needed.\n  \&quot;\n  [val]\n  (let [{:keys [directory filepath json]} val]\n    (pprint (str \&quot;Ensuring Directory: \&quot; directory))\n    (mkdirp\n      directory\n      (fn [err]\n        (if (= (type err) (type js/Error))\n          (js/console.log (str \&quot;Error creating directory: \&quot; filepath))\n          (fs/writeFile\n            filepath\n            json\n            (fn [err]\n              (if (= (type err) (type js/Error))\n                (js/console.log (str \&quot;Error writing file: \&quot; filepath))\n                (js/console.log (str \&quot;Wrote GeoJSON to: \&quot; filepath))))))))))&quot;, :offset 749, :ns &quot;geojson.core&quot;} {:command &quot;(defn =&gt;read=&gt;convert=&gt;write=&gt;loop\n  \&quot;\n  A loop that takes a `chan`, pulls a filepath out of it and does one of three\n  things with that path:\n\n  1) if there is no match found for the filename at the end of the path, recur\n  2) if there is a match, but the translated file already exists, recur\n  3) if there is a match and the translated file doesn't exists:\n  3.1) translate the zip file to GeoJSON\n  3.2) Store the GeoJSON with the appropriate name `(ns geojson.index)`\n  \&quot;\n  [=path=]\n  (go-loop []\n           (let [path (&lt;! =path=)]\n             (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n               (let [=test-path= (chan 1)]\n                 (do\n                   (fsCheck-&gt;put! filepath =test-path=)\n                   (if (not= \&quot;there\&quot; (&lt;! =test-path=))\n                       (let [=zip= (chan 1)\n                             =json= (chan 1 (x-geojson-config directory filepath))]\n                         (do (fsR-file-&gt;put! path =zip=)\n                             (pipeline-async 1 =json= zip-&gt;geojson-&gt;put! =zip=)\n                             (geo+config-&gt;mkdirp-&gt;fsW! (&lt;! =json=))\n                             (recur)))\n                       (do (pprint (str \&quot;File already exists: \&quot; path))\n                           (recur)))))\n               (do (pprint (str \&quot;No :geoKeyMap match found for: \&quot; path))\n                   (recur))))))&quot;, :offset 1405, :ns &quot;geojson.core&quot;} {:command &quot;(defn batch=&gt;zip-paths=&gt;convert=&gt;geojson\n  \&quot;\n  Takes a path to a list (vector) of paths to some zipfiles and - for each item\n  in the list - based on the filename (if present) translates the zipfile to\n  geojson, creates a directory structure (if needed) to store them and stores\n  them in there.\n\n  Uses a single `chan` as a control point between the internal `go-loop` of\n  =&gt;read=&gt;convert=&gt;write=&gt;loop &amp; a `doseq` to ensure that each file is put\n  through each step of the process before moving onto the next in the file list.\n  \&quot;\n  [paths-vec]\n  (let [=path= (chan 1)]\n    (=&gt;read=&gt;convert=&gt;write=&gt;loop =path=)\n    (go (if (= nil (doseq [path paths-vec] (&gt;! =path= path)))\n          (js/console.log \&quot;\\n ======================== \\n\n                           \\n === FINISHED PARSING === \\n\n                           \\n === Wrapping up .... === \\n\n                           \\n ======================== \\n\&quot;)))))&quot;, :offset 914, :ns &quot;geojson.core&quot;} {:command &quot;(def geotest\n    [\&quot;test directory 1\&quot;\n     \&quot;test json 1\&quot;,\n     \&quot;test directory 2\&quot;\n     \&quot;test json 2\&quot;,\n     \&quot;test directory 3\&quot;\n     \&quot;test json 3\&quot;])&quot;, :offset 145, :ns &quot;geojson.core&quot;} {:command &quot;(into [] (x-geojson-config \&quot;geotest directory\&quot; \&quot;filepath\&quot;) geotest)&quot;, :offset 67, :ns &quot;geojson.core&quot;} {:command &quot;(let [path \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;]\n    (if-let [{:keys [directory filepath]} (-&gt;&gt; (s/split path #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (pprint (str \&quot;Already existing directory: \&quot; directory \&quot; Filepath: \&quot; filepath))\n      (let [=test-path= (chan 1)\n            open-path (&lt;! (fsCheck-&gt;put! filepath =test-path=))]\n        (if (not= \&quot;there\&quot; open-path)\n          (pprint (str \&quot;Not there\&quot;))\n          (pprint (str \&quot;There\&quot;))))))&quot;, :offset 502, :ns &quot;geojson.core&quot;} {:command &quot;(filename-&gt;&gt;geopath \&quot;gz_2010_us_outline_500k.zip\&quot;)&quot;, :offset 50, :ns &quot;geojson.core&quot;} {:command &quot;(filename-&gt;&gt;geopath 'tb99_d00_shp.zip')&quot;, :offset 39, :ns &quot;geojson.core&quot;} {:command &quot;(filename-&gt;&gt;geopath \&quot;zt01_d00_shp.zip\&quot;)&quot;, :offset 39, :ns &quot;geojson.core&quot;} {:command &quot;(let [c (chan 1)]\n    (go (fsR-file-&gt;put!\n          \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n          c)\n        (pprint (&lt;! c))))&quot;, :offset 189, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsR-file-&gt;put!\n  \&quot;\n  Uses `fs` to read in file (async), putting the resulting file into the passed-\n  in `chan` when reading complete.\n  \&quot;\n  [val, =port=]\n  (pprint (str \&quot;fsRead'ing: \&quot; val))\n  (fs/readFile val\n               (fn [err, file]\n                 (if (= (type err) (type js/Error))\n                   (throw (js/Error. err))\n                   (put! =port= file #(close! =port=))))))&quot;, :offset 400, :ns &quot;geojson.core&quot;} {:command &quot;(let [c (chan 1)]\n  (go (fsR-file-&gt;put!\n        \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n        c)\n      (pprint (&lt;! c))))&quot;, :offset 181, :ns &quot;geojson.core&quot;} {:command &quot;(let [c (chan 1)]\n  (go (fsR-file-&gt;put!\n        \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2015\\\\shp\\\\cb_2015_us_zcta510_500k.zip\&quot;\n        c)\n      (pprint (&lt;! c))))&quot;, :offset 187, :ns &quot;geojson.core&quot;} {:command &quot;(shadow.cljs.devtools.api/node-repl)&quot;, :offset 36, :ns &quot;shadow.user&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="&lt;template&gt;" type="JUnit" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
    </configuration>
    <configuration name="&lt;template&gt;" type="TestNG" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Shadow REPL" type="ClojureREPL" factoryName="Remote">
      <module name="census-geojson" />
      <setting name="host" value="localhost" />
      <setting name="port" value="3333" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="82ac4cda-63ef-47ec-b2ea-e93ad332046f" name="Default" comment="" />
      <created>1532985568925</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1532985568925</updated>
      <workItem from="1532985572100" duration="1880000" />
      <workItem from="1532987541062" duration="95000" />
      <workItem from="1532987719844" duration="2400000" />
      <workItem from="1532990391831" duration="692000" />
      <workItem from="1532991145601" duration="37320000" />
      <workItem from="1533223286311" duration="471000" />
      <workItem from="1533223860548" duration="61732000" />
      <workItem from="1533477791155" duration="93000" />
      <workItem from="1533477968393" duration="42000" />
      <workItem from="1533478159070" duration="86000" />
      <workItem from="1533478288842" duration="6152000" />
      <workItem from="1533558682794" duration="282000" />
      <workItem from="1533559006262" duration="69089000" />
      <workItem from="1533816892156" duration="21721000" />
      <workItem from="1533908701380" duration="2169000" />
      <workItem from="1533910910674" duration="122000" />
      <workItem from="1533911219766" duration="17000" />
      <workItem from="1533911277575" duration="19565000" />
      <workItem from="1534163482601" duration="126000" />
      <workItem from="1534163635923" duration="38936000" />
      <workItem from="1534332417256" duration="39201000" />
      <workItem from="1534428174899" duration="15390000" />
      <workItem from="1534504003847" duration="18668000" />
      <workItem from="1534608584257" duration="3013000" />
      <workItem from="1534621179722" duration="1803000" />
      <workItem from="1534623540328" duration="2382000" />
      <workItem from="1534633965701" duration="5319000" />
      <workItem from="1534684023215" duration="5857000" />
      <workItem from="1534696025250" duration="9354000" />
      <workItem from="1534710145196" duration="2260000" />
      <workItem from="1534765748877" duration="1694000" />
      <workItem from="1534769686443" duration="18592000" />
      <workItem from="1534795840062" duration="2712000" />
      <workItem from="1534934621853" duration="18838000" />
      <workItem from="1534961792490" duration="7045000" />
      <workItem from="1534973432876" duration="22722000" />
      <workItem from="1535053302704" duration="8827000" />
      <workItem from="1535123215247" duration="729000" />
      <workItem from="1535148647733" duration="1004000" />
      <workItem from="1535369663906" duration="6194000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="454594000" />
  </component>
  <component name="TodoView" selected-index="1">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="2729" y="221" width="1477" height="1567" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.14396612" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Favorites" order="3" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" sideWeight="0.49960032" weight="0.32914925" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.3298466" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" weight="0.32874617" />
      <window_info anchor="bottom" id="Database Changes" order="8" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Quokka" order="10" />
      <window_info anchor="bottom" id="Terminal" order="11" sideWeight="0.3277378" weight="0.32874617" />
      <window_info anchor="bottom" id="Dependency Viewer" order="12" weight="0.32962447" />
      <window_info active="true" anchor="bottom" x="4200" y="1032" width="1095" height="748" id="REPL" order="13" sideWeight="0.5003997" side_tool="true" type="WINDOWED" visible="true" weight="0.33472803" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="GfmBrowser" order="3" weight="0.32980227" />
      <window_info anchor="right" id="Palette&#9;" order="4" />
      <window_info anchor="right" id="Leiningen" order="5" />
      <window_info anchor="right" id="Database" order="6" />
      <window_info anchor="right" id="Maven Projects" order="7" />
    </layout>
    <layout-to-restore>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.18985395" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Favorites" order="3" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" sideWeight="0.49960032" weight="0.32914925" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" weight="0.3298466" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" weight="0.32874617" />
      <window_info anchor="bottom" id="Database Changes" order="8" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Quokka" order="10" />
      <window_info anchor="bottom" id="Terminal" order="11" sideWeight="0.3277378" weight="0.32874617" />
      <window_info anchor="bottom" id="Dependency Viewer" order="12" weight="0.32962447" />
      <window_info anchor="bottom" x="4275" y="1032" width="1020" height="748" id="REPL" order="13" sideWeight="0.5003997" side_tool="true" type="WINDOWED" weight="0.33472803" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="GfmBrowser" order="3" weight="0.32980227" />
      <window_info anchor="right" id="Palette&#9;" order="4" />
      <window_info anchor="right" id="Leiningen" order="5" />
      <window_info anchor="right" id="Database" order="6" />
      <window_info anchor="right" id="Maven Projects" order="7" />
    </layout-to-restore>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName=".gitignore" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision5.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision6.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision3.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision4.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/place.json" />
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test11.json" />
    <entry file="file://$PROJECT_DIR$/../projectFilesBackup/.idea/workspace.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test.json" />
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test2.json" />
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test3.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/20m/2010/nation.json" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojurescript/1.10.339/clojurescript-1.10.339.jar!/cljs/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="764">
          <caret line="5160" column="25" selection-start-line="5160" selection-start-column="25" selection-end-line="5160" selection-end-column="25" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../.nrepl-port">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../package-lock.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/05/state-legislative-district-'lower-chamber'.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2010/zip-code-tabulation-area.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/block-group.json" />
    <entry file="file://$PROJECT_DIR$/../test/test10-abv.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="4" column="2" selection-start-line="4" selection-start-column="2" selection-end-line="4" selection-end-column="100" />
        </state>
      </provider>
    </entry>
    <entry file="file://C:/Program Files/nodejs/node_modules/npm/package.json" />
    <entry file="file://$PROJECT_DIR$/../shadow-cljs.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="280">
          <caret line="14" selection-start-line="14" selection-end-line="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../pom.xml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="720">
          <caret line="36" column="36" lean-forward="true" selection-start-line="36" selection-start-column="36" selection-end-line="36" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2000/72/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-column="379256" />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/Downloads/zip-code-tabulation-area-2012.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-192950">
          <caret line="1" column="986" selection-start-line="1" selection-start-column="986" selection-end-line="1" selection-end-column="986" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2000/zip-code-tabulation-area-2000.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2000/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-62583">
          <caret column="75" selection-start-column="71" selection-end-column="75" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2015/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-20" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2015/zip-code-tabulation-area-2015.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2016/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-20" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2016/zip-code-tabulation-area-2016.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2014/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-2620" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2014/zip-code-tabulation-area-2014.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-1700" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/zip-code-tabulation-area-2013.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2017/zip-code-tabulation-area.json">
      <provider selected="true" editor-type-id="LargeFileEditor">
        <state relative-caret-position="-1500" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2017/zip-code-tabulation-area-2017.json" />
    <entry file="file://$PROJECT_DIR$/../.gitattributes">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="100">
          <caret line="5" lean-forward="true" selection-start-line="5" selection-end-line="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/cartoFileStructure.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="FIRST">
          <first_editor relative-caret-position="13760">
            <caret line="688" column="34" selection-start-line="688" selection-start-column="34" selection-end-line="688" selection-end-column="34" />
          </first_editor>
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../package.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="620">
          <caret line="31" column="22" selection-start-line="31" selection-start-column="22" selection-end-line="31" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/filepaths.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="40">
          <caret line="2" column="10" lean-forward="true" selection-start-line="2" selection-start-column="10" selection-end-line="2" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/geokeymap.cljs">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/js-json.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1266">
          <caret line="99650" column="23" selection-start-line="99650" selection-start-column="23" selection-end-line="99650" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/test10.json">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-line="49" selection-end-column="99" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/test-abv2.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="540">
          <caret line="27" column="34" lean-forward="true" selection-start-line="27" selection-start-column="34" selection-end-line="27" selection-end-column="34" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/testingslashes.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-20" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../.gitignore">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="100">
          <caret line="5" column="14" selection-start-line="5" selection-start-column="14" selection-end-line="5" selection-end-column="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/merger/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1366">
          <caret line="238" column="4" selection-start-line="238" selection-start-column="4" selection-end-line="238" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/index.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="180">
          <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/filepaths_abv.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="180">
          <caret line="9" column="3" selection-start-line="9" selection-start-column="3" selection-end-line="9" selection-end-column="100" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/main/core.cljs">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1266">
          <caret line="494" lean-forward="true" selection-start-line="494" selection-end-line="494" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>census-geojson</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Maven: args4j:args4j:2.0.26</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>