<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="82ac4cda-63ef-47ec-b2ea-e93ad332046f" name="Default" comment="" />
    <ignored path="$PROJECT_DIR$/../target/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FUSProjectUsageTrigger">
    <session id="-985704565">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="4" />
          <entry key="project.open.time.11" value="2" />
          <entry key="project.open.time.16" value="1" />
          <entry key="project.open.time.9" value="1" />
          <entry key="project.opened" value="4" />
        </counts>
      </usages-collector>
    </session>
    <session id="364820673">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="7" />
          <entry key="project.open.time.10" value="1" />
          <entry key="project.open.time.11" value="1" />
          <entry key="project.open.time.13" value="1" />
          <entry key="project.open.time.15" value="1" />
          <entry key="project.open.time.17" value="1" />
          <entry key="project.open.time.18" value="2" />
          <entry key="project.open.time.19" value="1" />
          <entry key="project.open.time.42" value="1" />
          <entry key="project.open.time.9" value="1" />
          <entry key="project.opened" value="10" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="ClojureScript" value="12" />
          <entry key="EDN" value="2" />
          <entry key="JSON" value="93" />
          <entry key="Markdown" value="4" />
          <entry key="PLAIN_TEXT" value="5" />
          <entry key="XML" value="14" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.js.language.service.starts" />
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="clj" value="1219" />
          <entry key="cljs" value="39941" />
          <entry key="edn" value="49" />
          <entry key="gitignore" value="4" />
          <entry key="json" value="2" />
          <entry key="md" value="1022" />
          <entry key="txt" value="1" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="Clojure" value="1219" />
          <entry key="ClojureScript" value="39941" />
          <entry key="EDN" value="49" />
          <entry key="JSON" value="2" />
          <entry key="Markdown" value="1022" />
          <entry key="PLAIN_TEXT" value="5" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="cljs" value="12" />
          <entry key="edn" value="2" />
          <entry key="env" value="1" />
          <entry key="geojson" value="1" />
          <entry key="gitignore" value="1" />
          <entry key="json" value="93" />
          <entry key="md" value="4" />
          <entry key="txt" value="2" />
          <entry key="xml" value="14" />
        </counts>
      </usages-collector>
    </session>
  </component>
  <component name="FileEditorManager">
    <splitter split-orientation="vertical" split-proportion="0.68479776">
      <split-first>
        <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="160">
                  <caret line="8" column="32" lean-forward="true" selection-start-line="8" selection-start-column="32" selection-end-line="8" selection-end-column="32" />
                  <folding>
                    <element signature="e#19277#21040#0" />
                    <element signature="e#22971#24120#0" />
                  </folding>
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../pom.xml">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="900">
                  <caret line="45" column="46" selection-start-line="45" selection-start-column="46" selection-end-line="45" selection-end-column="46" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../test/test10-abv.json">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="80">
                  <caret line="4" selection-start-line="4" selection-end-line="8" selection-end-column="99" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../src/merger/core.cljs">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="200">
                  <caret line="10" column="30" selection-start-line="10" selection-start-column="30" selection-end-line="10" selection-end-column="30" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../shadow-cljs.edn">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="280">
                  <caret line="14" selection-start-line="14" selection-end-line="14" />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-first>
      <split-second>
        <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/../package.json">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="84">
                  <caret line="35" column="22" lean-forward="true" selection-start-line="35" selection-start-column="22" selection-end-line="35" selection-end-column="22" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../src/geojson/cartoFileStructure.md">
              <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
                <state split_layout="FIRST">
                  <first_editor />
                  <second_editor />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-second>
    </splitter>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>obj</find>
      <find>gfm</find>
      <find>growth</find>
      <find>x</find>
      <find>_d</find>
      <find>count</find>
      <find>async</find>
      <find>dir</find>
      <find>dir</find>
    </findStrings>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/package.json" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/main/core.cljs" />
        <option value="$PROJECT_DIR$/shadow-cljs.edn" />
        <option value="$PROJECT_DIR$/../.env" />
        <option value="$PROJECT_DIR$/../shadow-idea-notes.md" />
        <option value="$PROJECT_DIR$/../src/geojson/cartoFileStructure.md" />
        <option value="$PROJECT_DIR$/../test/files.json" />
        <option value="$PROJECT_DIR$/../test/files.txt" />
        <option value="$PROJECT_DIR$/../.gitignore" />
        <option value="$PROJECT_DIR$/../test/test9.json" />
        <option value="$PROJECT_DIR$/../test/test10.json" />
        <option value="$PROJECT_DIR$/../test/test10-abv.json" />
        <option value="$PROJECT_DIR$/../test/test11.json" />
        <option value="$PROJECT_DIR$/../src/merger/core.cljs" />
        <option value="$PROJECT_DIR$/../test/js-json.json" />
        <option value="$PROJECT_DIR$/../pom.xml" />
        <option value="$PROJECT_DIR$/../shadow-cljs.edn" />
        <option value="$PROJECT_DIR$/../src/geojson/archive.cljs" />
        <option value="$PROJECT_DIR$/../src/geojson/core.cljs" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="importAutomatically" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="NodeModulesDirectoryManager">
    <handled-path value="$PROJECT_DIR$/../node_modules" />
  </component>
  <component name="NodePackageJsonFileManager">
    <packageJsonPaths>
      <path value="$PROJECT_DIR$/../package.json" />
    </packageJsonPaths>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="2729" />
    <option name="y" value="221" />
    <option name="width" value="1548" />
    <option name="height" value="1567" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="geojson" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="main" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SearchEverywhereHistoryKey" value="markdow&#9;ACTION&#9;Markdown.Toolbar.Right&#10;gfm&#9;ACTION&#9;ActivateGfmBrowserToolWindow" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/pom.xml" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.sourceCode" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\test\mkdirp!" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\testing-'folder" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\testing-+folder" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\test-#testing#" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\src\geojson" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\test" />
    </key>
  </component>
  <component name="ReplState" timestamp="1534509618013">{:repl-history {:ide [], :local [], :remote [{:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [vec (fs/readFile\n              path-to-list-of-files\n              (fn [err list]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (js-&gt;clj (js/JSON.parse list)))))]\n    (map pprint vec)))&quot;, :offset 550, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [=filepaths= (chan 1)]\n    (fs/readFile\n      path-to-list-of-files\n      (fn [err list]\n        (if (= (type err) (type js/Error))\n          (throw err)\n          (put! =filepaths= list))))\n    (take! =filepaths= pprint)))&quot;, :offset 534, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [=filepaths= (chan 1)]\n    (fs/readFile\n      path-to-list-of-files\n      (fn [err list]\n        (if (= (type err) (type js/Error))\n          (throw err)\n          (put! =filepaths= (js-&gt;clj (js/JSON.parse list))))))\n    (take! =filepaths= pprint)))&quot;, :offset 560, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [=filepaths= (chan 1)]\n    (fs/readFile\n      path-to-list-of-files\n      (fn [err list]\n        (if (= (type err) (type js/Error))\n          (throw err)\n          (put! =filepaths= (js-&gt;clj (js/JSON.parse list))))))\n    (take! =filepaths= (fn [filepaths]\n                         (map #(pprint (str \&quot;filepath: \&quot; %)) filepaths)))))&quot;, :offset 642, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [=filepaths= (chan 1)]\n    (do (fs/readFile\n          path-to-list-of-files\n          (fn [err list]\n            (if (= (type err) (type js/Error))\n              (throw err)\n              (put! =filepaths= (js-&gt;clj (js/JSON.parse list))))))\n        (take! =filepaths= (fn [filepaths]\n                             (map #(pprint (str \&quot;filepath: \&quot; %)) filepaths))))))&quot;, :offset 675, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [=filepaths= (chan 1)]\n    (do (fs/readFile\n          path-to-list-of-files\n          (fn [err list]\n            (if (= (type err) (type js/Error))\n              (throw err)\n              (put! =filepaths= (js-&gt;clj (js/JSON.parse list))))))\n        (take! =filepaths= (fn [filepaths]\n                             (map #(pprint (str \&quot;filepath: \&quot; %)) filepaths)))\n        (close! =filepaths=))))&quot;, :offset 704, :ns &quot;geojson.core&quot;} {:command &quot;(defn megaShpGeoJSONConverter\n  \&quot;Takes a path to a list (vector) of paths to some zipfiles and - for each item in the list - based on the filename (if present) translates the zipfile to geojson, creates a directory structure (if needed) to store them and stores them in there.\&quot;\n  [path-to-list-of-files]\n  (let [=filepaths= (chan 1)]\n    (do (fs/readFile\n          path-to-list-of-files\n          (fn [err list]\n            (if (= (type err) (type js/Error))\n              (throw err)\n              (put! =filepaths= (js-&gt;clj (js/JSON.parse list))))))\n        (take! =filepaths= (fn [filepaths]\n                             (map #(js/console.log (str \&quot;filepath: \&quot; %)) filepaths)))\n        (close! =filepaths=))))&quot;, :offset 712, :ns &quot;geojson.core&quot;} {:command &quot;(megaShpGeoJSONConverter \&quot;./test/test10-abv.json\&quot;)&quot;, :offset 50, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton\n        (pipeline-async 1\n                        =fullpath= ; to\n                        (fn [path =path=]\n                          (do\n                            (mkdirp path (put! =path= fullpath)) ;; the most important part\n                            (close! =path=)))\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2245, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton\n        (pipeline-async 1\n                        =fullpath= ; to\n                        (fn [path =fullpath=]\n                          (do\n                            (mkdirp path (put! =fullpath= fullpath)) ;; the most important part\n                            (close! =fullpath=)))\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2257, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton, \n        (pipeline-async 1\n                        =fullpath= ; to\n                        (fn [dirp =fullpath=]\n                          (do\n                            (mkdirp dirp (put! =fullpath= fullpath)) ;; the most important part\n                            (close! =fullpath=)))\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2259, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        (fn [dirp =fullpath=]\n                          (do\n                            (mkdirp dirp (put! =fullpath= fullpath)) ;; the most important part\n                            (close! =fullpath=)))\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2258, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        (fn [dirp chan*]\n                          (do\n                            (mkdirp dirp (put! =fullpath= fullpath)) ;; the most important part\n                            (close! chan*)))\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2248, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =fullpath=]\n                    (do\n                      (mkdirp dirpath* (put! =fullpath= fullpath)) ;; the most important part\n                      (close! =fullpath=)))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2276, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =pass=]\n                    (do\n                      (mkdirp dirpath* (put! =fullpath= fullpath)) ;; the most important part\n                      (close! =pass=)))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=  ; make directory and pass fullpath to next step\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2317, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =fullpath=]\n                    (do\n                      (mkdirp dirpath* (put! =fullpath= fullpath)) ;; the most important part\n                      (close! =fullpath=)))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=  ; make directory and pass fullpath to next step\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2325, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =fullpath=]\n                    (do\n                      (mkdirp dirpath* (put! =fullpath= fullpath))))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=  ; make directory and pass fullpath to next step\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n            (close! =fullpath=))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2288, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =fullpath=]\n                    (mkdirp dirpath* (put! =fullpath= fullpath)))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=  ; make directory and pass fullpath to next step\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (do (put! =file= zip #(pprint \&quot;put! =file=\&quot;))\n                      (close! =fullpath=))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =json=)\n          (close! =file=)))))&quot;, :offset 2276, :ns &quot;geojson.core&quot;} {:command &quot;(fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;)&quot;, :offset 131, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;A `core.async` asynchronous operation coordination function, which takes a full string path to a zipfile containing a shapefile and related assets. The shapefile is converted to geojson and sent to a destination folder if the path contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =fullpath=]\n                    (mkdirp dirpath* (put! =fullpath= fullpath)))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=  ; make directory and pass fullpath to next step\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (do (put! =file= zip #(pprint \&quot;put! =file=\&quot;))\n                      (close! =fullpath=))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (do\n        (close! =file=)\n        (close! =json=)\n        (close! =dirpath=)\n        (close! =fullpath=)))))&quot;, :offset 2337, :ns &quot;geojson.core&quot;} {:command &quot;(shadow/watch :Lib)&quot;, :offset 19, :ns &quot;shadow.user&quot;} {:command &quot;(source defn)&quot;, :offset 13, :ns &quot;geojson.core&quot;} {:command &quot;(source mkdirp)&quot;, :offset 15, :ns &quot;geojson.core&quot;} {:command &quot;(source map-invert)&quot;, :offset 19, :ns &quot;geojson.core&quot;} {:command &quot;(defn ii-&gt;vin\n  \&quot;Map over a collection to transform 2-digit vintages to their 4-digit codes.\&quot;\n  [vtr]\n  (map #(cond (= \&quot;90\&quot; %) \&quot;1990\&quot;\n              (= \&quot;00\&quot; %) \&quot;2000\&quot;\n              :else %)\n       vtr))&quot;, :offset 201, :ns &quot;geojson.core&quot;} {:command &quot;(defn map-target-idx\n  \&quot;Maps a provided function to a specific index of a provided collection of collections.\&quot;\n  [fnc idx coll]\n  (map-indexed #(if (zero? (mod (inc %1) idx)) (fnc %2) %2) coll))&quot;, :offset 194, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geoIDvecs\n  \&quot;Breaks apart a Census Tiger filename and cleans it into meaningful parts. Takes a single string and returns a vector of vectors.\&quot;\n  [string]\n  (-&gt;&gt;\n    (s/split string #\&quot;_|\\.\&quot;)\n    (map #(re-seq #\&quot;[a-z]+|[0-9]+\&quot; %))\n    (map (fn [y] (remove #(= \&quot;d\&quot; %) y)))\n    (map-target-idx ii-&gt;vin 2)\n    (map #(vec %))))&quot;, :offset 338, :ns &quot;geojson.core&quot;} {:command &quot;(defn ?keyMatch\n  \&quot;Searches a single item from an inverted geoKeyMap and checks for a match against the provided vintage/level abbreviation code pair. Returns the `name` of the key (string) if matched and `nil` if mismatched.\&quot;\n  [vintage level [k v]]\n  (if-let [[_ v2] (find k (keyword vintage))]\n    (if (= v2 level)\n      (name v)\n      nil)\n    nil))&quot;, :offset 353, :ns &quot;geojson.core&quot;} {:command &quot;(defn keySearch\n  \&quot;Searches the entire geoKeyMap (inverted) for matches against a provided vintage and level abbreviation returning a string for the verbose geoKeyMap key match if successful and an empty string ('') if not\&quot;\n  [vintage level]\n  (apply str (remove nil? (map #(?keyMatch vintage level %) (seq (map-invert geoKeyMap))))))&quot;, :offset 334, :ns &quot;geojson.core&quot;} {:command &quot;(defn parts-&gt;geopath\n  \&quot;Consumes parts of the Tiger filename to compose a structured path for storage as a `.json` file.\&quot;\n  [[lev res m vin &amp; etc]]\n  (let [geopath (s/join \&quot;/\&quot; (list* vin etc))]\n    {:filepath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath (apply str (keySearch vin lev) \&quot;.json\&quot;)]))\n     :dirpath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath]))}))&quot;, :offset 385, :ns &quot;geojson.core&quot;} {:command &quot;(defn geoScopeFiler\n  \&quot;Creates a filepath determined by whether or not the input contains a state (e.g., '01') or national code ('99'/'us'). If the value returned from the `keySearch` function = `` (empty string) returns `nil`.\&quot;\n  [[lev res m vin sco]]\n  (if-not (= \&quot;\&quot; (keySearch vin lev))\n    (if (or (= sco \&quot;99\&quot;) (= sco \&quot;us\&quot;))\n      (parts-&gt;geopath [lev res m vin])\n      (parts-&gt;geopath [lev res m vin sco]))\n    nil))&quot;, :offset 421, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;Pattern matches against incoming file structures to create a harmonized directory ontology in which to store the file\&quot;\n  ([[lev sco] [vin] _     _]                                (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin] [sco] [\&quot;outline\&quot;]  [res m] _]           (geoScopeFiler [\&quot;outline\&quot; res   m   vin    sco]))\n  ([_         [vin] [sco] [\&quot;uac\&quot; \&quot;10\&quot;] [res m] _]           (geoScopeFiler [\&quot;uac\&quot;     res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        _         [res m] _] (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        [res m] _]           (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        [res m] _]           (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         _     [sco] [lev \&quot;113\&quot;]  [res m] _]           (geoScopeFiler [lev       res   m   \&quot;2012\&quot; sco]))\n  ([&amp; anything-else] nil))&quot;, :offset 941, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geopath\n  \&quot;Takes a filename string as input and sends it through the filepath creation pipeline. Returns `nil` if no matches are found for the level abbreviation contained in the filename.\&quot;\n  [string]\n  (if-let [answer (-&gt;&gt; (filename-&gt;&gt;geoIDvecs string) (apply file=&lt;&lt;Director))] answer nil))&quot;, :offset 309, :ns &quot;geojson.core&quot;} {:command &quot;(defn x-pathStr-&gt;&gt;filename\n  \&quot;Transducer, which takes a fully qualified path string (returned from node `fs`) and pulls out the filename from the end.\&quot;\n  [rf]\n  (fn\n    ([] (rf))\n    ([result] (rf result))\n    ([result input]\n     (rf result (-&gt;&gt; (s/split input #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))))))&quot;, :offset 301, :ns &quot;geojson.core&quot;} {:command &quot;(defn mkdirp!\n  \&quot;\n  Like the NPM mkdirp, but takes a file path string (the file to\n  be created), a directory path string (the file path minus the\n  file name) and an input `chan` and puts the file path to that\n  channel when done making the directory. This is used as an async\n  coordinator to halts later file-writing processes via internal\n  `(go...)` block\n  \&quot;\n  [file-path dir-path =done=]\n  (go (mkdirp dir-path (&gt;! =done= file-path))))&quot;, :offset 442, :ns &quot;geojson.core&quot;} {:command &quot;(defn zip-&gt;json!\n  \&quot;\n  Takes a .zip file and converts it to GeoJSON via 3rd party `shpjs` library. \n  Inputs:\n  1. .zip file\n  2. a channel to put GeoJSON into \n  \&quot;\n  [zip-file =json=]\n  (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs zip-file))))))&quot;, :offset 242, :ns &quot;geojson.core&quot;} {:command &quot;(defn mkdirp!\n  \&quot;\n  Like the NPM mkdirp, but takes a file path string (the file to be created), a\n  directory path string (the file path minus the file name) and an input `chan`\n  and puts the file path to that channel when done making the directory. This is\n  used as an async coordinator to halts later file-writing processes via\n  internal `(go...)` block.\n  \&quot;\n  [file-path dir-path =done=]\n  (go (mkdirp dir-path (&gt;! =done= file-path))))&quot;, :offset 441, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsR!\n  \&quot;\n  Takes a file-path and a channel and uses `fs/readFile` to read the file and\n  put the result into the chan.\n  \&quot;\n  [file-path =file=]\n  (fs/readFile\n    file-path\n    \&quot;utf8\&quot;\n    (fn [err file]\n      (if (= (type err) (type js/Error))\n        (throw err)\n        (go (&gt;! =file= file))))))&quot;, :offset 303, :ns &quot;geojson.core&quot;} {:command &quot;(let [=done= (chan 1) =file= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;\n      =done=)\n    (fsR! (&lt;! =done=) =file=)\n    (close! =done=)\n    (zip-&gt;json! (&lt;! =file=) =json=)\n    (close! =file=)\n    (pprint (&lt;! =json=))))&quot;, :offset 349, :ns &quot;geojson.core&quot;} {:command &quot;(defn zip-&gt;json!\n  \&quot;\n  Takes a .zip file and converts it to GeoJSON via 3rd party `shpjs` library.\n  Inputs:\n  1. .zip file\n  2. a channel to put GeoJSON into\n  \&quot;\n  [zip-file =json=]\n  (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs zip-file))))))&quot;, :offset 240, :ns &quot;geojson.core&quot;} {:command &quot;(defn mkdirp!\n  \&quot;\n  Like the NPM mkdirp, but takes a file path string (the file to be created), a\n  directory path string (the file path minus the file name) and an input `chan`\n  and puts the file path to that channel when done making the directory. This is\n  used as an async coordinator to halts later file-writing processes via\n  internal `(go...)` block.\n  \&quot;\n  [=done= file-path dir-path]\n  (go (mkdirp dir-path (&gt;! =done= file-path))))&quot;, :offset 441, :ns &quot;geojson.core&quot;} {:command &quot;(let [=done= (chan 1)]\n  (go (mkdirp! =done= \&quot;./test/mkdirp!/file.name\&quot; \&quot;./test/mkdirp!/\&quot;)\n      (pprint (&lt;! =done=))\n      (close! =done=)))&quot;, :offset 141, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1)]\n  (go (mkdirp! =file-path= \&quot;./test/mkdirp!/file.name\&quot; \&quot;./test/mkdirp!/\&quot;)\n      (pprint (&lt;! =file-path=))\n      (close! =file-path=)))&quot;, :offset 161, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1)]\n  (go (mkdirp! =file-path= \&quot;./test/mkdirp!/file.name\&quot; \&quot;./test/mkdirp2!/\&quot;)\n      (pprint (&lt;! =file-path=))\n      (close! =file-path=)))&quot;, :offset 162, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (pprint (&lt;! =zip=))\n    (close! =zip=)))&quot;, :offset 313, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsR!\n  \&quot;\n  Takes a file-path and a channel and uses `fs/readFile` to read the file and\n  put the result into the chan. Inputs:\n  1. channel in which to put read file\n  2. file path to read from\n  \&quot;\n  [=file= file-path]\n  (fs/readFile\n    file-path\n    \&quot;utf8\&quot;\n    (fn [err file]\n      (if (= (type err) (type js/Error))\n        (throw err)\n        (go (&gt;! =file= file))))))&quot;, :offset 378, :ns &quot;geojson.core&quot;} {:command &quot;(in-ns 'shadow.user)&quot;, :offset 20, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (pprint (&lt;! =json=))\n    (close! =json=)))&quot;, :offset 385, :ns &quot;geojson.core&quot;} {:command &quot;(in-ns `shadow.user)&quot;, :offset 20, :ns &quot;shadow.user&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  1) GeoJSON\n  2) file path to store GeoJSON to\n  \&quot;\n  [filepath geojson]\n  (fs/writeFile\n    filepath\n    (js/JSON.stringify geojson)\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 297, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  1) channel containing GeoJSON\n  2) file path to store GeoJSON to\n  \&quot;\n  [filepath =geojson=]\n  (go (fs/writeFile\n        filepath\n        (js/JSON.stringify (&lt;! =geojson=))\n        #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath))))&quot;, :offset 342, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  1) channel containing GeoJSON\n  2) file path to store GeoJSON to\n  \&quot;\n  [filepath =geojson=]\n  (fs/writeFile\n    filepath\n    (go (js/JSON.stringify (&lt;! =geojson=)))\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 330, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  1) channel containing GeoJSON\n  2) file path to store GeoJSON to\n  \&quot;\n  [filepath geojson]\n  (fs/writeFile\n    filepath\n    (js/JSON.stringify geojson)\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 316, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (pprint (js/JSON.stringify (&lt;! =json=)))\n    (close! =json=)))&quot;, :offset 406, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath geojson]\n  (fs/writeFile\n    filepath\n    (js/JSON.stringify geojson)\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 297, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =geojson=]\n  (do (fs/writeFile\n        filepath\n        (go (js/JSON.stringify (&lt;! =geojson=)))\n        #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath))\n      (close! =geojson=)))&quot;, :offset 353, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =geojson=]\n  (do (go (fs/writeFile\n            filepath\n            (js/JSON.stringify (&lt;! =geojson=))\n            #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))\n      (close! =geojson=)))&quot;, :offset 365, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =geojson=]\n  (go (fs/writeFile\n        filepath\n        (js/JSON.stringify (&lt;! =geojson=))\n        \&quot;utf8\&quot;\n        #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath))\n      (close! =geojson=)))&quot;, :offset 363, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath json]\n  (fs/writeFile\n    filepath\n    (js/JSON.stringify json)\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 291, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (json-&gt;fsW! \&quot;./test/mkdirp!/\&quot; (&lt;! =json=))\n    (close! =json=)))&quot;, :offset 408, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =json=]\n  (fs/writeFile\n    filepath\n    (take! =json= (js/JSON.stringify))\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 303, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (json-&gt;fsW! \&quot;./test/mkdirp!/\&quot; =json=)\n    (close! =json=)))&quot;, :offset 403, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsR!\n  \&quot;\n  Takes a file-path and a channel and uses `fs/readFile` to read the file and\n  put the result into the chan. Inputs:\n  1. channel in which to put read file\n  2. file path to read from\n  \&quot;\n  [=file= file-path]\n  (go (fs/readFile\n        file-path\n        ;\&quot;utf8\&quot; ;; IMPORTANT: Can't be encoded, or else `shpjs` throws `TypeError: Request path contains unescaped characters`\n        (fn [err file]\n          (if (= (type err) (type js/Error))\n            (throw err)\n            (go (&gt;! =file= file)))))))&quot;, :offset 519, :ns &quot;geojson.core&quot;} {:command &quot;(defn zip-&gt;&gt;json!\n  \&quot;\n  Takes a .zip file and converts it to GeoJSON via 3rd party `shpjs` library.\n  Inputs:\n  1. a channel to put GeoJSON into\n  2. .zip file to be converted to GeoJSON\n  \&quot;\n  [=json= zip]\n  (go (-&gt;&gt; (&lt;? (cpa/pair-port (shpjs zip)))\n           (&gt;! =json=))))&quot;, :offset 275, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =json=]\n  (fs/writeFile\n    filepath\n    (take! =json= #(js/JSON.stringify %))\n    #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath)))&quot;, :offset 306, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsR!\n  \&quot;\n  Takes a file-path and a channel and uses `fs/readFile` to read the file and\n  put the result into the chan. Inputs:\n  1. channel in which to put read file\n  2. file path to read from\n  \&quot;\n  [=file= file-path]\n  (fs/readFile\n    file-path\n    ;\&quot;utf8\&quot; ;; IMPORTANT: Can't be encoded, or else `shpjs` throws `TypeError: Request path contains unescaped characters`\n    (fn [err file]\n      (if (= (type err) (type js/Error))\n        (throw err)\n        (go (&gt;! =file= file))))))&quot;, :offset 490, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (json-&gt;fsW! \&quot;./test/mkdirp!/\&quot; =json=)))&quot;, :offset 383, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 698, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json\n  \&quot;\n  A `core.async` asynchronous operation coordination function, which takes a\n  full string path to a zipfile containing a shapefile and related assets. The\n  shapefile is converted to geojson and sent to a destination folder if the path\n  contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\n  \&quot;\n  [fullpath]\n  (let [=file= (chan 1)\n        =json= (chan 1)\n        =dirpath= (chan 1)\n        =fullpath= (chan 1)\n        =as-pipe= (fn [dirpath* =fullpath=]\n                    (do\n                      (mkdirp dirpath* (put! =fullpath= fullpath)) ;; the most important part\n                      (close! =fullpath=)))]\n    (if-let\n      [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n      (do\n        ;; To kick things off, async create directories if needed,\n        ;; then put dirpath into =dirpath= chan. Make sure to close!\n        (go (do (&gt;! =dirpath= dirpath) (close! =dirpath=)))\n        ;; use pipeline-async to ensure order of chan functions,\n        ;; passing fullpath as the coordination baton,\n        (pipeline-async 1\n                        =fullpath= ; to\n                        =as-pipe=  ; make directory and pass fullpath to next step\n                        =dirpath=) ; from\n        ;; take the fullpath from the out-bound pipeline-async =fullpath= chan\n        ;; then read in zip file, then put! onto =file= chan\n        (go (fs/readFile\n              (&lt;! =fullpath=)\n              (fn [err zip]\n                (if (= (type err) (type js/Error))\n                  (throw err)\n                  (put! =file= zip #(pprint \&quot;put! =file=\&quot;))))))\n        ;; &lt;! zipfile from =file= chan, translate to geojson, convert\n        ;; the promise returned from shpjs via the cljs-promise &lt;? macro,\n        ;; then &gt;! resulting geojson to =json= chan\n        (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        ;; take! the geojson and write to the filepath, then close! =json=\n        (take! =json=\n               (fn [json]\n                 (do (fs/writeFile\n                       filepath\n                       (js/JSON.stringify json)\n                       #(js/console.log \&quot;wrote\&quot;))\n                     (close! =json=)))))\n      (go (close! =file=)\n          (close! =json=)\n          (close! =dirpath=)\n          (close! =fullpath=)))))&quot;, :offset 2396, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json2\n  \&quot;\n  A `core.async` asynchronous operation coordination function, which takes a\n  full string path to a zipfile containing a shapefile and related assets. The\n  shapefile is converted to geojson and sent to a destination folder if the path\n  contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\n  \&quot;\n  [fullpath]\n  (if-let\n    [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (go\n      (let [=file= (chan 1)\n            =json= (chan 1)\n            =dirpath= (chan 1)\n            =fullpath= (chan 1)\n            =as-pipe= (fn [dirpath* =fullpath=]\n                        (go\n                          (mkdirp dirpath* (&gt;! =fullpath= fullpath)) ;; the most important part\n                          (close! =fullpath=)))]\n\n        (do (&gt;! =dirpath= dirpath) (close! =dirpath=))\n        (pipeline-async 1\n                        =fullpath=\n                        =as-pipe=\n                        =dirpath=)\n        (fs/readFile\n          (&lt;! =fullpath=)\n          (fn [err zip]\n            (if (= (type err) (type js/Error))\n              (throw err)\n              (go (&gt;! =file= zip)))))\n        (do (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        (do (fs/writeFile\n                filepath\n                (js/JSON.stringify (&lt;! =json=))\n                #(js/console.log \&quot;wrote\&quot;))\n            (close! =json=))))\n    (js/console.log \&quot;bloop\&quot;)))&quot;, :offset 1478, :ns &quot;geojson.core&quot;} {:command &quot;(defn fsRead-zip-&gt;fsWriteWDIR-json2\n  \&quot;\n  A `core.async` asynchronous operation coordination function, which takes a\n  full string path to a zipfile containing a shapefile and related assets. The\n  shapefile is converted to geojson and sent to a destination folder if the path\n  contains a valid geopath (based on `filename-&gt;&gt;geopath` function).\n  \&quot;\n  [fullpath]\n  (if-let\n    [{:keys [filepath dirpath]} (-&gt;&gt; (s/split fullpath #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n    (go\n      (let [=file= (chan 1)\n            =json= (chan 1)\n            =dirpath= (chan 1)\n            =fullpath= (chan 1)\n            =as-pipe= (fn [dirpath* =fullpath=]\n                        (go\n                          (mkdirp dirpath* (&gt;! =fullpath= fullpath)) ;; the most important part\n                          (close! =fullpath=)))]\n\n        (do (&gt;! =dirpath= dirpath) (close! =dirpath=))\n        (pipeline-async 2\n                        =fullpath=\n                        =as-pipe=\n                        =dirpath=)\n        (fs/readFile\n          (&lt;! =fullpath=)\n          (fn [err zip]\n            (if (= (type err) (type js/Error))\n              (throw err)\n              (go (&gt;! =file= zip)))))\n        (do (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n            (close! =file=))\n        (do (fs/writeFile\n                filepath\n                (js/JSON.stringify (&lt;! =json=))\n                #(js/console.log \&quot;wrote\&quot;))\n            (close! =json=))))\n    (js/console.log \&quot;bloop\&quot;)))&quot;, :offset 1478, :ns &quot;geojson.core&quot;} {:command &quot;(map #(fsRead-zip-&gt;fsWriteWDIR-json2 %)\n     [\&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;,\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_county_within_ua_500k.zip\&quot;,\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;,\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_place_500k.zip\&quot;,\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_sldl_500k.zip\&quot;])&quot;, :offset 577, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs-extra\&quot; :as fs]\n            [\&quot;child_process\&quot; :as child]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 744, :ns &quot;cljs.user&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;child_process\&quot; :as child]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 738, :ns &quot;geojson.core&quot;} {:command &quot;(defn zip-&gt;&gt;json!\n  \&quot;\n  Takes a .zip file and converts it to GeoJSON via 3rd party `shpjs` library.\n  Inputs:\n  1. a channel to put GeoJSON into\n  2. .zip file to be converted to GeoJSON\n  \&quot;\n  [=json= zip]\n  (go (&gt;! =json= (&lt;? (cpa/value-port-port (shpjs zip))))))&quot;, :offset 264, :ns &quot;geojson.archive&quot;} {:command &quot;(defn zip-&gt;&gt;json!\n  \&quot;\n  Takes a .zip file and converts it to GeoJSON via 3rd party `shpjs` library.\n  Inputs:\n  1. a channel to put GeoJSON into\n  2. .zip file to be converted to GeoJSON\n  \&quot;\n  [=json= zip]\n  (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs zip))))))&quot;, :offset 259, :ns &quot;geojson.archive&quot;} {:command &quot;n&quot;, :offset 1, :ns &quot;cljs.user&quot;} {:command &quot;(ns geojson.archive\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;child_process\&quot; :as child]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 741, :ns &quot;cljs.user&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (js/console.log (js/JSON.stringify (&lt;! =json=)))\n    (close! =json=)))&quot;, :offset 414, :ns &quot;geojson.archive&quot;} {:command &quot;(shadow/watch :lib)&quot;, :offset 19, :ns &quot;shadow.user&quot;} {:command &quot;(shadow.cljs.devtools.api/node-repl)&quot;, :offset 36, :ns &quot;shadow.user&quot;} {:command &quot;(ns geojson.archive\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs] ;; if basic `fs` works, `npm uninstall fs-extra`\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 750, :ns &quot;cljs.user&quot;} {:command &quot;(def geoKeyMap\n  {:nation                                                      {:2010 \&quot;outline\&quot;\n                                                                 :2013 \&quot;nation\&quot;\n                                                                 :2014 \&quot;nation\&quot;\n                                                                 :2015 \&quot;nation\&quot;\n                                                                 :2016 \&quot;nation\&quot;\n                                                                 :2017 \&quot;nation\&quot;}\n   :region                                                      {:2013 \&quot;region\&quot;\n                                                                 :2014 \&quot;region\&quot;\n                                                                 :2015 \&quot;region\&quot;\n                                                                 :2016 \&quot;region\&quot;\n                                                                 :2017 \&quot;region\&quot;\n                                                                 :2010 \&quot;020\&quot;\n                                                                 :2000 \&quot;rg\&quot;}\n   :division                                                    {:2013 \&quot;division\&quot;\n                                                                 :2014 \&quot;division\&quot;\n                                                                 :2015 \&quot;division\&quot;\n                                                                 :2016 \&quot;division\&quot;\n                                                                 :2017 \&quot;division\&quot;\n                                                                 :2010 \&quot;030\&quot;\n                                                                 :2000 \&quot;dv\&quot;}\n   :state                                                       {:2013 \&quot;state\&quot;\n                                                                 :2014 \&quot;state\&quot;\n                                                                 :2015 \&quot;state\&quot;\n                                                                 :2016 \&quot;state\&quot;\n                                                                 :2017 \&quot;state\&quot;\n                                                                 :2010 \&quot;040\&quot;\n                                                                 :1990 \&quot;st\&quot;\n                                                                 :2000 \&quot;st\&quot;}\n   :consolidated-cities                                         {:2000 \&quot;cc\&quot;\n                                                                 :2010 \&quot;170\&quot;\n                                                                 :2013 \&quot;concity\&quot;\n                                                                 :2014 \&quot;concity\&quot;\n                                                                 :2015 \&quot;concity\&quot;\n                                                                 :2016 \&quot;concity\&quot;\n                                                                 :2017 \&quot;concity\&quot;}\n   :county                                                      {:2013 \&quot;county\&quot;\n                                                                 :2014 \&quot;county\&quot;\n                                                                 :2015 \&quot;county\&quot;\n                                                                 :2016 \&quot;county\&quot;\n                                                                 :2017 \&quot;county\&quot;\n                                                                 :2010 \&quot;050\&quot;\n                                                                 :1990 \&quot;co\&quot;\n                                                                 :2000 \&quot;co\&quot;}\n   :county-subdivision                                          {:2013 \&quot;cousub\&quot;\n                                                                 :2014 \&quot;cousub\&quot;\n                                                                 :2015 \&quot;cousub\&quot;\n                                                                 :2016 \&quot;cousub\&quot;\n                                                                 :2017 \&quot;cousub\&quot;\n                                                                 :2010 \&quot;060\&quot;\n                                                                 :1990 \&quot;cs\&quot;\n                                                                 :2000 \&quot;cs\&quot;}\n   :tract                                                       {:2013 \&quot;tract\&quot;\n                                                                 :2014 \&quot;tract\&quot;\n                                                                 :2015 \&quot;tract\&quot;\n                                                                 :2016 \&quot;tract\&quot;\n                                                                 :2017 \&quot;tract\&quot;\n                                                                 :2010 \&quot;140\&quot;\n                                                                 :1990 \&quot;tr\&quot;\n                                                                 :2000 \&quot;tr\&quot;}\n   :place                                                       {:2013 \&quot;place\&quot;\n                                                                 :2014 \&quot;place\&quot;\n                                                                 :2015 \&quot;place\&quot;\n                                                                 :2016 \&quot;place\&quot;\n                                                                 :2017 \&quot;place\&quot;\n                                                                 :2010 \&quot;160\&quot;\n                                                                 :1990 \&quot;pl\&quot;\n                                                                 :2000 \&quot;pl\&quot;}\n   :alaska-native-regional-corporation                          {:2013 \&quot;anrc\&quot;\n                                                                 :2014 \&quot;anrc\&quot;\n                                                                 :2015 \&quot;anrc\&quot;\n                                                                 :2016 \&quot;anrc\&quot;\n                                                                 :2017 \&quot;anrc\&quot;\n                                                                 :2010 \&quot;230\&quot;\n                                                                 :1990 \&quot;an\&quot;\n                                                                 :2000 \&quot;an\&quot;}\n   :american-indian-area!alaska-native-area!hawaiian-home-land  {:2013 \&quot;aiannh\&quot;\n                                                                 :2014 \&quot;aiannh\&quot;\n                                                                 :2015 \&quot;aiannh\&quot;\n                                                                 :2016 \&quot;aiannh\&quot;\n                                                                 :2017 \&quot;aiannh\&quot;\n                                                                 :2010 \&quot;250\&quot;\n                                                                 :1990 \&quot;ir\&quot;\n                                                                 :2000 \&quot;na\&quot;}\n   :metropolitan-statistical-area!micropolitan-statistical-area {:2013 \&quot;cbsa\&quot;\n                                                                 :2014 \&quot;cbsa\&quot;\n                                                                 :2015 \&quot;cbsa\&quot;\n                                                                 :2016 \&quot;cbsa\&quot;\n                                                                 :2017 \&quot;cbsa\&quot;\n                                                                 :2010 \&quot;310\&quot;\n                                                                 :1990 \&quot;ma\&quot;}\n   :combined-statistical-area                                   {:2013 \&quot;csa\&quot;\n                                                                 :2014 \&quot;csa\&quot;\n                                                                 :2015 \&quot;csa\&quot;\n                                                                 :2016 \&quot;csa\&quot;\n                                                                 :2017 \&quot;csa\&quot;\n                                                                 :2010 \&quot;330\&quot;}\n   :new-england-city-and-town-area                              {:2013 \&quot;necta\&quot;\n                                                                 :2014 \&quot;necta\&quot;\n                                                                 :2015 \&quot;necta\&quot;\n                                                                 :2016 \&quot;necta\&quot;\n                                                                 :2017 \&quot;necta\&quot;\n                                                                 :2010 \&quot;350\&quot;}\n   :combined-new-england-city-and-town-area                     {:2016 \&quot;cnecta\&quot;\n                                                                 :2017 \&quot;cnecta\&quot;}\n   :urban-area                                                  {:2013 \&quot;ua\&quot;\n                                                                 :2014 \&quot;ua\&quot;\n                                                                 :2015 \&quot;ua\&quot;\n                                                                 :2016 \&quot;ua\&quot;\n                                                                 :2017 \&quot;ua\&quot;\n                                                                 :2012 \&quot;uac\&quot;\n                                                                 :1990 \&quot;ua\&quot;\n                                                                 :2000 \&quot;ua\&quot;}\n   :congressional-district                                      {:103  \&quot;cd\&quot;\n                                                                 :104  \&quot;cd\&quot;\n                                                                 :105  \&quot;cd\&quot;\n                                                                 :106  \&quot;cd\&quot;\n                                                                 :107  \&quot;cd\&quot;\n                                                                 :108  \&quot;cd\&quot;\n                                                                 :109  \&quot;cd\&quot;\n                                                                 :110  \&quot;cd\&quot;\n                                                                 :2013 \&quot;cd\&quot;\n                                                                 :2014 \&quot;cd\&quot;\n                                                                 :2015 \&quot;cd\&quot;\n                                                                 :2016 \&quot;cd\&quot;\n                                                                 :2017 \&quot;cd\&quot;\n                                                                 :2012 \&quot;cd\&quot;\n                                                                 :2010 \&quot;500\&quot;}\n   :school-district-'elementary'                                {:2016 \&quot;elsd\&quot;\n                                                                 :2017 \&quot;elsd\&quot;\n                                                                 :2000 \&quot;se\&quot;}\n   :school-district-'secondary'                                 {:2016 \&quot;scsd\&quot;\n                                                                 :2017 \&quot;scsd\&quot;\n                                                                 :2000 \&quot;ss\&quot;}\n   :school-district-'unified'                                   {:2016 \&quot;unsd\&quot;\n                                                                 :2017 \&quot;unsd\&quot;\n                                                                 :2010 \&quot;970\&quot;\n                                                                 :2000 \&quot;sn\&quot;}\n   :block-group                                                 {:2013 \&quot;bg\&quot;\n                                                                 :2014 \&quot;bg\&quot;\n                                                                 :2015 \&quot;bg\&quot;\n                                                                 :2016 \&quot;bg\&quot;\n                                                                 :2017 \&quot;bg\&quot;\n                                                                 :2010 \&quot;150\&quot;\n                                                                 :1990 \&quot;bg\&quot;\n                                                                 :2000 \&quot;bg\&quot;}\n   :public-use-microdata-area                                   {:2013 \&quot;puma\&quot;\n                                                                 :2014 \&quot;puma\&quot;\n                                                                 :2015 \&quot;puma\&quot;\n                                                                 :2016 \&quot;puma\&quot;\n                                                                 :2017 \&quot;puma\&quot;}\n   :zip-code-tabulation-area                                    {:2013 \&quot;zcta\&quot;\n                                                                 :2014 \&quot;zcta\&quot;\n                                                                 :2015 \&quot;zcta\&quot;\n                                                                 :2016 \&quot;zcta\&quot;\n                                                                 :2017 \&quot;zcta\&quot;\n                                                                 :2010 \&quot;860\&quot;\n                                                                 :2000 \&quot;zt\&quot;} ;; zipcodes are *not* the same\n   :state-legislative-district-'upper-chamber'                  {:2013 \&quot;sldu\&quot;\n                                                                 :2014 \&quot;sldu\&quot;\n                                                                 :2015 \&quot;sldu\&quot;\n                                                                 :2016 \&quot;sldu\&quot;\n                                                                 :2017 \&quot;sldu\&quot;\n                                                                 :2012 \&quot;sldu\&quot;\n                                                                 :2010 \&quot;610\&quot;\n                                                                 :2000 \&quot;su\&quot;}\n   :state-legislative-district-'lower-chamber'                  {:2013 \&quot;sldl\&quot;\n                                                                 :2014 \&quot;sldl\&quot;\n                                                                 :2015 \&quot;sldl\&quot;\n                                                                 :2016 \&quot;sldl\&quot;\n                                                                 :2017 \&quot;sldl\&quot;\n                                                                 :2012 \&quot;sldl\&quot;\n                                                                 :2010 \&quot;620\&quot;\n                                                                 :2000 \&quot;sl\&quot;}})&quot;, :offset 13549, :ns &quot;geojson.archive&quot;} {:command &quot;(defn ii-&gt;vin\n  \&quot;\n  Map over a collection to transform 2-digit vintages to their 4-digit codes.\n  \&quot;\n  [vtr]\n  (map #(cond (= \&quot;90\&quot; %) \&quot;1990\&quot;\n              (= \&quot;00\&quot; %) \&quot;2000\&quot;\n              :else %)\n       vtr))&quot;, :offset 207, :ns &quot;geojson.archive&quot;} {:command &quot;(defn map-target-idx\n  \&quot;\n  Maps a provided function to a specific index of a provided collection of\n  collections.\n  \&quot;\n  [fnc idx coll]\n  (map-indexed #(if (zero? (mod (inc %1) idx)) (fnc %2) %2) coll))&quot;, :offset 202, :ns &quot;geojson.archive&quot;} {:command &quot;(defn filename-&gt;&gt;geoIDvecs\n  \&quot;\n  Breaks apart a Census Tiger filename and cleans it into meaningful parts.\n  Takes a single string and returns a vector of vectors.\n  \&quot;\n  [string]\n  (-&gt;&gt;\n    (s/split string #\&quot;_|\\.\&quot;)\n    (map #(re-seq #\&quot;[a-z]+|[0-9]+\&quot; %))\n    (map (fn [y] (remove #(= \&quot;d\&quot; %) y)))\n    (map-target-idx ii-&gt;vin 2)\n    (map #(vec %))))&quot;, :offset 346, :ns &quot;geojson.archive&quot;} {:command &quot;(defn ?keyMatch\n  \&quot;\n  Searches a single item from an inverted geoKeyMap and checks for a match\n  against the provided vintage/level abbreviation code pair. Returns the `name`\n  of the key (string) if matched and `nil` if mismatched.\n  \&quot;\n  [vintage level [k v]]\n  (if-let [[_ v2] (find k (keyword vintage))]\n    (if (= v2 level)\n      (name v)\n      nil)\n    nil))&quot;, :offset 363, :ns &quot;geojson.archive&quot;} {:command &quot;(defn keySearch\n  \&quot;\n  Searches the entire geoKeyMap (inverted) for matches against a provided\n  vintage and level abbreviation returning a string for the verbose geoKeyMap\n  key match if successful and an empty string ('') if not.\n  \&quot;\n  [vintage level]\n  (apply str (remove nil? (map #(?keyMatch vintage level %) (seq (map-invert geoKeyMap))))))&quot;, :offset 345, :ns &quot;geojson.archive&quot;} {:command &quot;(defn parts-&gt;geopath\n  \&quot;\n  Consumes parts of the Tiger filename to compose a structured path for storage\n  as a `.json` file.\n  \&quot;\n  [[lev res m vin &amp; etc]]\n  (let [geopath (s/join \&quot;/\&quot; (list* vin etc))]\n    {:filepath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath (apply str (keySearch vin lev) \&quot;.json\&quot;)]))\n     :dirpath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath]))}))&quot;, :offset 393, :ns &quot;geojson.archive&quot;} {:command &quot;(defn geoScopeFiler\n  \&quot;\n  Creates a filepath determined by whether or not the input contains a state\n  (e.g., '01') or national code ('99'/'us'). If the value returned from the\n  `keySearch` function = `` (empty string) returns `nil`.\n  \&quot;\n  [[lev res m vin sco]]\n  (if-not (= \&quot;\&quot; (keySearch vin lev))\n    (if (or (= sco \&quot;99\&quot;) (= sco \&quot;us\&quot;))\n      (parts-&gt;geopath [lev res m vin])\n      (parts-&gt;geopath [lev res m vin sco]))\n    nil))&quot;, :offset 431, :ns &quot;geojson.archive&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;\n  Pattern matches against incoming file structures to create a harmonized\n  directory ontology in which to store the file.\n  \&quot;\n  ([[lev sco] [vin] _     _]                                (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin] [sco] [\&quot;outline\&quot;]  [res m] _]           (geoScopeFiler [\&quot;outline\&quot; res   m   vin    sco]))\n  ([_         [vin] [sco] [\&quot;uac\&quot; \&quot;10\&quot;] [res m] _]           (geoScopeFiler [\&quot;uac\&quot;     res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        _         [res m] _] (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        [res m] _]           (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        [res m] _]           (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         _     [sco] [lev \&quot;113\&quot;]  [res m] _]           (geoScopeFiler [lev       res   m   \&quot;2012\&quot; sco]))\n  ([&amp; anything-else] nil))&quot;, :offset 950, :ns &quot;geojson.archive&quot;} {:command &quot;(defn filename-&gt;&gt;geopath\n  \&quot;\n  Takes a filename string as input and sends it through the filepath creation\n  pipeline. Returns `nil` if no matches are found for the level abbreviation\n  contained in the filename.\n  \&quot;\n  [string]\n  (if-let [answer (-&gt;&gt; (filename-&gt;&gt;geoIDvecs string) (apply file=&lt;&lt;Director))] answer nil))&quot;, :offset 319, :ns &quot;geojson.archive&quot;} {:command &quot;(defn x-pathStr-&gt;&gt;filename\n  \&quot;\n  Transducer, which takes a fully qualified path string (returned from node\n  `fs`) and pulls out the filename from the end.\n  \&quot;\n  [rf]\n  (fn\n    ([] (rf))\n    ([result] (rf result))\n    ([result input]\n     (rf result (-&gt;&gt; (s/split input #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))))))&quot;, :offset 309, :ns &quot;geojson.archive&quot;} {:command &quot;(defn mkdirp!\n  \&quot;\n  Like the NPM mkdirp, but takes a file path string (the file to be created), a\n  directory path string (the file path minus the file name) and an input `chan`\n  and puts the file path to that channel when done making the directory. This is\n  used as an async coordinator to halts later file-writing processes via\n  internal `(go...)` block.\n  \&quot;\n  [=file-path= file-path dir-path]\n  (go (mkdirp dir-path (&gt;! =file-path= file-path))))&quot;, :offset 451, :ns &quot;geojson.archive&quot;} {:command &quot;(defn fsR!\n  \&quot;\n  Takes a file-path and a channel and uses `fs/readFile` to read the file and\n  put the result into the chan. Inputs:\n  1. channel in which to put read file\n  2. file path to read from\n  \&quot;\n  [=file= file-path]\n  (fs/readFile\n    file-path\n    ;\&quot;utf8\&quot; ;; IMPORTANT: Can't be encoded, or else `shpjs` throws:\n    ; `TypeError: Request path contains unescaped characters`\n    (fn [err file]\n      (if (= (type err) (type js/Error))\n        (throw err)\n        (go (&gt;! =file= file))))))&quot;, :offset 497, :ns &quot;geojson.archive&quot;} {:command &quot;(defn zip-&gt;&gt;json!\n  \&quot;\n  Takes a .zip file and converts it to GeoJSON via 3rd party `shpjs` library.\n  Inputs:\n  1. a channel to put GeoJSON into\n  2. .zip file to be converted to GeoJSON\n  \&quot;\n  [=json= zip]\n  (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs zip))))))&quot;, :offset 258, :ns &quot;geojson.archive&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =json=]\n  (go (fs/writeFile\n        filepath\n        (js/JSON.stringify (&lt;! =json=))\n        #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath))\n      (close! =json=)))&quot;, :offset 339, :ns &quot;geojson.archive&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (json-&gt;fsW! \&quot;./test/mkdirp!/test.json\&quot; =json=)))&quot;, :offset 392, :ns &quot;geojson.archive&quot;} {:command &quot;(defn json-&gt;fsW!\n  \&quot;\n  Takes a file path and some GeoJSON and uses `fs/writeFile` to save the file.\n  Inputs:\n  2) file path to store GeoJSON to\n  1) GeoJSON\n  \&quot;\n  [filepath =json=]\n  (go (fs/writeFile\n        filepath\n        (js/JSON.stringify (&lt;! =json=))\n        #(js/console.log \&quot;Wrote GeoJSON to: \&quot; filepath))))&quot;, :offset 317, :ns &quot;geojson.archive&quot;} {:command &quot;(let [=file-path= (chan 1) =zip= (chan 1) =json= (chan 1)]\n  (go\n    (mkdirp!\n      =file-path=\n      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_puma10_500k.zip\&quot;\n      \&quot;./test/mkdirp!/\&quot;)\n    (fsR! =zip= (&lt;! =file-path=))\n    (close! =file-path=)\n    (zip-&gt;&gt;json! =json= (&lt;! =zip=))\n    (close! =zip=)\n    (json-&gt;fsW! \&quot;./test/mkdirp!/test2.json\&quot; =json=)\n    (close! =json=)))&quot;, :offset 413, :ns &quot;geojson.archive&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="&lt;template&gt;" type="JUnit" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
    </configuration>
    <configuration name="&lt;template&gt;" type="TestNG" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Shadow REPL" type="ClojureREPL" factoryName="Remote">
      <module name="census-geojson" />
      <setting name="host" value="localhost" />
      <setting name="port" value="3333" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="82ac4cda-63ef-47ec-b2ea-e93ad332046f" name="Default" comment="" />
      <created>1532985568925</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1532985568925</updated>
      <workItem from="1532985572100" duration="1880000" />
      <workItem from="1532987541062" duration="95000" />
      <workItem from="1532987719844" duration="2400000" />
      <workItem from="1532990391831" duration="692000" />
      <workItem from="1532991145601" duration="37320000" />
      <workItem from="1533223286311" duration="471000" />
      <workItem from="1533223860548" duration="61732000" />
      <workItem from="1533477791155" duration="93000" />
      <workItem from="1533477968393" duration="42000" />
      <workItem from="1533478159070" duration="86000" />
      <workItem from="1533478288842" duration="6152000" />
      <workItem from="1533558682794" duration="282000" />
      <workItem from="1533559006262" duration="69089000" />
      <workItem from="1533816892156" duration="21721000" />
      <workItem from="1533908701380" duration="2169000" />
      <workItem from="1533910910674" duration="122000" />
      <workItem from="1533911219766" duration="17000" />
      <workItem from="1533911277575" duration="19565000" />
      <workItem from="1534163482601" duration="126000" />
      <workItem from="1534163635923" duration="38936000" />
      <workItem from="1534332417256" duration="39201000" />
      <workItem from="1534428174899" duration="15390000" />
      <workItem from="1534504003847" duration="4220000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="321801000" />
  </component>
  <component name="TodoView" selected-index="1">
    <todo-panel id="selected-file">
      <is-autoscroll-to-source value="true" />
    </todo-panel>
    <todo-panel id="all">
      <are-packages-shown value="true" />
      <is-autoscroll-to-source value="true" />
    </todo-panel>
  </component>
  <component name="ToolWindowManager">
    <frame x="2729" y="221" width="1548" height="1567" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.15322581" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Favorites" order="3" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" sideWeight="0.49960032" weight="0.32914925" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" visible="true" weight="0.3298466" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" weight="0.32914925" />
      <window_info anchor="bottom" id="Database Changes" order="8" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Quokka" order="10" />
      <window_info anchor="bottom" id="Terminal" order="11" sideWeight="0.3277378" weight="0.32977304" />
      <window_info anchor="bottom" id="Dependency Viewer" order="12" weight="0.32962447" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="GfmBrowser" order="3" weight="0.32980227" />
      <window_info anchor="right" id="Palette&#9;" order="4" />
      <window_info anchor="right" id="Leiningen" order="5" />
      <window_info anchor="right" id="Database" order="6" />
      <window_info anchor="right" id="Maven Projects" order="7" />
      <window_info anchor="right" x="4268" y="1196" width="1031" height="588" id="REPL" order="8" sideWeight="0.5003997" side_tool="true" type="WINDOWED" visible="true" weight="0.33734134" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName=".gitignore" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/../node_modules/shadow-cljs/cli/default-config.edn" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.4.474/core.async-0.4.474.jar!/cljs/core/async.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="60">
          <caret line="3" column="10" selection-start-line="3" selection-start-column="10" selection-end-line="3" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../geoRaw/test-#testing#/test-#.json" />
    <entry file="file://$PROJECT_DIR$/../geoRaw/testing-+folder/testing-+file.json" />
    <entry file="file://$PROJECT_DIR$/../geoRaw/testing!-'folder/counties-!test'.json" />
    <entry file="file://$PROJECT_DIR$/../shadow-idea-notes.md" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojurescript/1.10.339/clojurescript-1.10.339.jar!/cljs/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="724">
          <caret line="2936" column="6" selection-start-line="2936" selection-start-column="6" selection-end-line="2936" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/testingslashes.json" />
    <entry file="file://$PROJECT_DIR$/../test/files.json" />
    <entry file="file://$PROJECT_DIR$/../test/files.txt" />
    <entry file="file://$PROJECT_DIR$/../test/filelist.json" />
    <entry file="file://$PROJECT_DIR$/../test/test2.json" />
    <entry file="file://$PROJECT_DIR$/../test/test3.json" />
    <entry file="file://$PROJECT_DIR$/../test/test4.json" />
    <entry file="file://$PROJECT_DIR$/../.env" />
    <entry file="file://$PROJECT_DIR$/../.gitignore" />
    <entry file="file://$PROJECT_DIR$/../test/test7.json" />
    <entry file="file://$PROJECT_DIR$/../test/test6.json" />
    <entry file="file://$PROJECT_DIR$/../test/test5.json" />
    <entry file="file://$PROJECT_DIR$/../test/test9.json" />
    <entry file="file://$PROJECT_DIR$/../test/test8.json" />
    <entry file="file://$PROJECT_DIR$/../test/counties.json" />
    <entry file="file://$USER_HOME$/AppData/Local/Temp/Temp1_mygeodata.zip/cb_2015_us_aiannh_500k.geojson" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/state-legislative-district-'lower-chamber'.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/tract.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-sub.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-su.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision2.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision5.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision6.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision3.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision4.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/block-group.json" />
    <entry file="file://$PROJECT_DIR$/../test/js-json.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="777">
          <caret line="99650" column="23" selection-start-line="99650" selection-start-column="23" selection-end-line="99650" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret column="723" selection-start-column="723" selection-end-column="723" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/place.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/test10.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test11.json" />
    <entry file="file://$PROJECT_DIR$/../projectFilesBackup/.idea/workspace.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/main/core.cljs">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../pom.xml">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="900">
          <caret line="45" column="46" selection-start-line="45" selection-start-column="46" selection-end-line="45" selection-end-column="46" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/test10-abv.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="80">
          <caret line="4" selection-start-line="4" selection-end-line="8" selection-end-column="99" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/merger/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="200">
          <caret line="10" column="30" selection-start-line="10" selection-start-column="30" selection-end-line="10" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../shadow-cljs.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="280">
          <caret line="14" selection-start-line="14" selection-end-line="14" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/cartoFileStructure.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="FIRST">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-61690" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test2.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/mkdirp!/test3.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-20" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../package.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="84">
          <caret line="35" column="22" lean-forward="true" selection-start-line="35" selection-start-column="22" selection-end-line="35" selection-end-column="22" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="380">
          <caret line="19" lean-forward="true" selection-start-line="19" selection-end-line="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="160">
          <caret line="8" column="32" lean-forward="true" selection-start-line="8" selection-start-column="32" selection-end-line="8" selection-end-column="32" />
          <folding>
            <element signature="e#19277#21040#0" />
            <element signature="e#22971#24120#0" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>census-geojson</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Maven: args4j:args4j:2.33</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>