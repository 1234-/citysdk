<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="82ac4cda-63ef-47ec-b2ea-e93ad332046f" name="Default" comment="" />
    <ignored path="$PROJECT_DIR$/../target/" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FUSProjectUsageTrigger">
    <session id="-985704565">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="4" />
          <entry key="project.open.time.11" value="2" />
          <entry key="project.open.time.16" value="1" />
          <entry key="project.open.time.9" value="1" />
          <entry key="project.opened" value="4" />
        </counts>
      </usages-collector>
    </session>
    <session id="364820673">
      <usages-collector id="statistics.lifecycle.project">
        <counts>
          <entry key="project.closed" value="5" />
          <entry key="project.open.time.10" value="1" />
          <entry key="project.open.time.11" value="1" />
          <entry key="project.open.time.13" value="1" />
          <entry key="project.open.time.17" value="1" />
          <entry key="project.open.time.18" value="1" />
          <entry key="project.open.time.19" value="1" />
          <entry key="project.open.time.42" value="1" />
          <entry key="project.open.time.9" value="1" />
          <entry key="project.opened" value="8" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.open">
        <counts>
          <entry key="ClojureScript" value="10" />
          <entry key="EDN" value="2" />
          <entry key="JSON" value="78" />
          <entry key="Markdown" value="4" />
          <entry key="PLAIN_TEXT" value="5" />
          <entry key="XML" value="12" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.js.language.service.starts" />
      <usages-collector id="statistics.file.extensions.edit">
        <counts>
          <entry key="clj" value="983" />
          <entry key="cljs" value="30110" />
          <entry key="edn" value="6" />
          <entry key="gitignore" value="4" />
          <entry key="json" value="2" />
          <entry key="md" value="1022" />
          <entry key="txt" value="1" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.types.edit">
        <counts>
          <entry key="Clojure" value="983" />
          <entry key="ClojureScript" value="30110" />
          <entry key="EDN" value="6" />
          <entry key="JSON" value="2" />
          <entry key="Markdown" value="1022" />
          <entry key="PLAIN_TEXT" value="5" />
        </counts>
      </usages-collector>
      <usages-collector id="statistics.file.extensions.open">
        <counts>
          <entry key="cljs" value="10" />
          <entry key="edn" value="2" />
          <entry key="env" value="1" />
          <entry key="geojson" value="1" />
          <entry key="gitignore" value="1" />
          <entry key="json" value="78" />
          <entry key="md" value="4" />
          <entry key="txt" value="2" />
          <entry key="xml" value="12" />
        </counts>
      </usages-collector>
    </session>
  </component>
  <component name="FileEditorManager">
    <splitter split-orientation="vertical" split-proportion="0.68479776">
      <split-first>
        <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="755">
                  <caret line="426" lean-forward="true" selection-start-line="426" selection-end-line="426" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision.json">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="198">
                  <caret column="1580" selection-start-column="1580" selection-end-column="1580" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision4.json">
              <provider selected="true" editor-type-id="text-editor">
                <state>
                  <caret selection-end-column="15" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision3.json">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="756">
                  <caret column="5836" selection-start-column="5836" selection-end-column="5836" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../test/js-json.clj">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="777">
                  <caret line="99650" column="23" selection-start-line="99650" selection-start-column="23" selection-end-line="99650" selection-end-column="23" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../src/merger/core.cljs">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="258">
                  <caret line="246" column="45" selection-start-line="246" selection-start-column="45" selection-end-line="246" selection-end-column="45" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../shadow-cljs.edn">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="198">
                  <caret line="11" column="8" selection-start-line="11" selection-start-column="8" selection-end-line="11" selection-end-column="8" />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-first>
      <split-second>
        <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
          <file pinned="false" current-in-tab="true">
            <entry file="file://$PROJECT_DIR$/../package.json">
              <provider selected="true" editor-type-id="text-editor">
                <state relative-caret-position="-72">
                  <caret line="14" column="13" selection-start-line="14" selection-start-column="13" selection-end-line="14" selection-end-column="13" />
                </state>
              </provider>
            </entry>
          </file>
          <file pinned="false" current-in-tab="false">
            <entry file="file://$PROJECT_DIR$/../src/geojson/cartoFileStructure.md">
              <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
                <state split_layout="FIRST">
                  <first_editor />
                  <second_editor />
                </state>
              </provider>
            </entry>
          </file>
        </leaf>
      </split-second>
    </splitter>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>obj</find>
      <find>gfm</find>
      <find>growth</find>
      <find>x</find>
      <find>_d</find>
      <find>count</find>
      <find>async</find>
    </findStrings>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/package.json" />
        <option value="$PROJECT_DIR$/.gitignore" />
        <option value="$PROJECT_DIR$/src/main/core.cljs" />
        <option value="$PROJECT_DIR$/shadow-cljs.edn" />
        <option value="$PROJECT_DIR$/../.env" />
        <option value="$PROJECT_DIR$/../shadow-idea-notes.md" />
        <option value="$PROJECT_DIR$/../src/geojson/cartoFileStructure.md" />
        <option value="$PROJECT_DIR$/../test/files.json" />
        <option value="$PROJECT_DIR$/../test/files.txt" />
        <option value="$PROJECT_DIR$/../.gitignore" />
        <option value="$PROJECT_DIR$/../test/test9.json" />
        <option value="$PROJECT_DIR$/../test/test10.json" />
        <option value="$PROJECT_DIR$/../test/test10-abv.json" />
        <option value="$PROJECT_DIR$/../test/test11.json" />
        <option value="$PROJECT_DIR$/../pom.xml" />
        <option value="$PROJECT_DIR$/../src/merger/core.cljs" />
        <option value="$PROJECT_DIR$/../shadow-cljs.edn" />
        <option value="$PROJECT_DIR$/../test/js-json.json" />
        <option value="$PROJECT_DIR$/../src/geojson/core.cljs" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="importAutomatically" value="true" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="NodeModulesDirectoryManager">
    <handled-path value="$PROJECT_DIR$/../node_modules" />
  </component>
  <component name="NodePackageJsonFileManager">
    <packageJsonPaths>
      <path value="$PROJECT_DIR$/../package.json" />
    </packageJsonPaths>
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="2729" />
    <option name="y" value="221" />
    <option name="width" value="1433" />
    <option name="height" value="1567" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="GeoJSON" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="GeoJSON" type="462c0819:PsiDirectoryNode" />
              <item name="500k" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="GeoJSON" type="462c0819:PsiDirectoryNode" />
              <item name="500k" type="462c0819:PsiDirectoryNode" />
              <item name="2013" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="GeoJSON" type="462c0819:PsiDirectoryNode" />
              <item name="500k" type="462c0819:PsiDirectoryNode" />
              <item name="2013" type="462c0819:PsiDirectoryNode" />
              <item name="01" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="merger" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="." type="b2602c69:ProjectViewProjectNode" />
              <item name="census-geojson" type="462c0819:PsiDirectoryNode" />
              <item name="test" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="SearchEverywhereHistoryKey" value="markdow&#9;ACTION&#9;Markdown.Toolbar.Right&#10;gfm&#9;ACTION&#9;ActivateGfmBrowserToolWindow" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/pom.xml" />
    <property name="nodejs_interpreter_path.stuck_in_default_project" value="undefined stuck path" />
    <property name="nodejs_npm_path_reset_for_default_project" value="true" />
    <property name="project.structure.last.edited" value="Project" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.editor" />
  </component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\testing-'folder" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\testing-+folder" />
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\geoRaw\test-#testing#" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\Surface\Projects\clojure\cljs\census-geojson\test" />
    </key>
  </component>
  <component name="ReplState" timestamp="1534345038109">{:repl-history {:ide [], :local [], :remote [{:command &quot;(-&gt; (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n    (.then (fn [promisedata] (js/Promise.resolve promisedata)))\n    (.then #(js/console.log %)))&quot;, :offset 225, :ns &quot;geojson.core&quot;} {:command &quot;(defmacro await-&gt; [thenable &amp; thens]\n  `(-&gt; ~thenable\n       ~@thens\n       ~'js/Promise.resolve\n       p/await))&quot;, :offset 113, :ns &quot;geojson.core&quot;} {:command &quot;(await-&gt;\n  (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n  #(js/console.log %))&quot;, :offset 158, :ns &quot;geojson.core&quot;} {:command &quot;(await-&gt;\n  (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n  (pprint))&quot;, :offset 147, :ns &quot;geojson.core&quot;} {:command &quot;(await-&gt;\n  (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n  #(pprint %))&quot;, :offset 150, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (-&gt;\n    (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n    js/Promise.resolve\n    p/await))&quot;, :offset 178, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson (-&gt;\n                     (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n                     js/Promise.resolve\n                     p/await)]\n          (js/console.log geojson)))&quot;, :offset 283, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson \n           (-&gt;\n             (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n             js/Promise.resolve\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-subdivision.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 366, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson \n           (-&gt;\n             (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n             js/Promise.resolve\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 358, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;)\n             js/Promise.resolve\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 339, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs (fs/readFile \n                      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                      \&quot;utf8\&quot;\n                      (fn [err data]\n                        (if err\n                          (js/console.log (str \&quot;Error: \&quot; err))\n                          data))))\n             js/Promise.resolve\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 570, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs (fs/readFile\n                      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                      \&quot;utf8\&quot;\n                      (fn [err data]\n                        (if err\n                          (js/console.log (str \&quot;Error: \&quot; err))\n                          (js/console.log data)))))\n             js/Promise.resolve\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 586, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs (fs/readFile\n                      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                      \&quot;utf8\&quot;\n                      (fn [err data]\n                        (if err\n                          (js/console.log (str \&quot;Error: \&quot; err))\n                          (js/console.log data)))))\n             (.then js/Promise.resolve)\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 594, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs (fs/readFileSync\n                      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n             (.then js/Promise.resolve)\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 387, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs (fs/readFileSync\n                      \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n             js/Promise.resolve\n             p/await)]\n    (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-sub.json\&quot;\n       geojson\n       \&quot;utf8\&quot;\n       #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 379, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [geojson (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))]\n    (try \n      (js/console.log (&lt;? geojson))\n      (catch js/Error e\n        (js/console.log (str \&quot;Bloop: \&quot; (ex-message e)))))))&quot;, :offset 275, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]]\n            [cljs.core.async :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 805, :ns &quot;cljs.user&quot;} {:command &quot;(cljs-promises.async/extend-promises-as-pair-channels!)&quot;, :offset 55, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]]\n            [cljs.core.async :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.async :as cp]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 846, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]]\n            [cljs.core.async :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 898, :ns &quot;cljs.user&quot;} {:command &quot;(go\n  (let [geojson (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))]\n    (try\n      (js/console.log (&lt;? geojson))\n      (catch js/Error e\n        (js/console.log (str \&quot;Bloop: \&quot; (ex-message e)))))))&quot;, :offset 274, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [geojson (cpa/value-port (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;)))]\n    (try\n      (js/console.log (&lt;? geojson))\n      (catch js/Error e\n        (js/console.log (str \&quot;Bloop: \&quot; (ex-message e)))))))&quot;, :offset 291, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot; \n                        \&quot;utf8\&quot;\n                        (fn [err data] data)))\n    (.then (fn [geojson] \n             (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-subdivision.json\&quot; \n                           geojson \n                           \&quot;utf8\&quot; #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 404, :ns &quot;geojson.core&quot;} {:command &quot;(shpjs (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    \&quot;utf8\&quot;\n                    (fn [_ data] (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-subdivision.json\&quot;\n                                                 data\n                                                 \&quot;utf8\&quot; #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 381, :ns &quot;geojson.core&quot;} {:command &quot;(shpjs (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    \&quot;utf8\&quot;\n                    (fn [_ data] (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-su.json\&quot;\n                                                 data\n                                                 #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 365, :ns &quot;geojson.core&quot;} {:command &quot;(shpjs (fs/readFile \n         \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n         (fn [_ data] (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-subdivision.json\&quot;\n                                      data\n                                      #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 324, :ns &quot;geojson.core&quot;} {:command &quot;(shpjs (fs/readFile\n         \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n         (fn [_ data] (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-subdivision2.json\&quot;\n                                      (js/JSON.parse data)\n                                      #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 340, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]]\n            [cljs.core.async :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async :as cpa :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 906, :ns &quot;cljs.user&quot;} {:command &quot;(into []\n      x-path-&gt;geojson-&gt;fs\n      (js/JSON.parse (fs/readFileSync \&quot;.\\\\test\\\\test10-abv.json\&quot; \&quot;utf8\&quot;)))&quot;, :offset 109, :ns &quot;geojson.core&quot;} {:command &quot;(.then\n  (shpjs (fs/readFile\n           \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n           \&quot;utf8\&quot;\n           (fn [err data]\n             (if err\n               (js/console.log (str \&quot;Error: \&quot; err))\n               data))))\n  (fn [geojson] (fs/writeFile\n                  \&quot;./GeoJSON/500k/2013/01/county-subdivision.json\&quot;\n                  geojson\n                  \&quot;utf8\&quot;\n                  #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 474, :ns &quot;geojson.core&quot;} {:command &quot;(shpjs (fs/readFile\n         \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n         (fn [_ data] (fs/writeFile \&quot;./GeoJSON/500k/2013/01/county-subdivision2.json\&quot;\n                                      data\n                                      #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 324, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFile \n             \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n    (.then (fn [_ data] (fs/writeFile \n                          \&quot;./GeoJSON/500k/2013/01/county-subdivision3.json\&quot;\n                          data\n                          #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 340, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFile\n             \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n             (fn [_ data]\n               data)))\n    (.then (fn [_ geojson] (fs/writeFile\n                             \&quot;./GeoJSON/500k/2013/01/county-subdivision3.json\&quot;\n                             geojson\n                             #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 400, :ns &quot;geojson.core&quot;} {:command &quot;(= (js/Error. \&quot;oops\&quot;) js/Error)&quot;, :offset 31, :ns &quot;geojson.core&quot;} {:command &quot;(typeof js/Error)&quot;, :offset 17, :ns &quot;geojson.core&quot;} {:command &quot;(type js/Error)&quot;, :offset 15, :ns &quot;geojson.core&quot;} {:command &quot;(= js/Error (type js/Error))&quot;, :offset 28, :ns &quot;geojson.core&quot;} {:command &quot;(= (type js/Error) (type js/Error))&quot;, :offset 35, :ns &quot;geojson.core&quot;} {:command &quot;(json-&gt;fs-&gt;save \n  \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n  \&quot;./GeoJSON/500k/2013/01/county-subdivision3.json\&quot;)&quot;, :offset 170, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFile\n             \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n             (fn [_ data]\n               data)))\n    (.then (fn [_ geojson] (fs/writeFile\n                             \&quot;./GeoJSON/500k/2013/01/county-subdivision4.json\&quot;\n                             geojson\n                             #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 400, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]]\n            [cljs.core.async :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.core :as cp :refer [pair-port]]\n            [cljs-promises.async :as cpa :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 925, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]]\n            [cljs.core.async :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async :as cpa :refer-macros [&lt;?] :refer [pair-port]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 925, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async \n             :as cpa \n             :refer [pair-port]\n             :refer-macros [&lt;?]] \n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 950, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [[json err] (pair-port \n                     (shpjs (fs/readFile\n                              \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                              \&quot;utf8\&quot;\n                              (fn [err json]\n                                (if (= (type err) (type js/Error))\n                                  (throw err)\n                                  (cbk json))))))]\n    (try\n      (fs/writeFile\n        \&quot;./GeoJSON/500k/2013/01/county-subdivision4.json\&quot;\n        (&lt;? json)\n        #(js/console.log \&quot;wrote\&quot;)))\n    (catch js/Error e\n      (js/console.log (str \&quot;bogus: \&quot; (ex-message e))))))&quot;, :offset 670, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [[json err] (pair-port \n                     (shpjs (fs/readFile\n                              \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                              \&quot;utf8\&quot;\n                              (fn [err json]\n                                (if (= (type err) (type js/Error))\n                                  (throw err)\n                                  (cbk json))))))]\n    (try\n      (fs/writeFile\n        \&quot;./GeoJSON/500k/2013/01/county-subdivision4.json\&quot;\n        (&lt;? json)\n        #(js/console.log \&quot;wrote\&quot;))\n      (catch js/Error e\n        (js/console.log (str \&quot;bogus: \&quot; (ex-message e)))))))&quot;, :offset 674, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n    (.then #(js/console.log %)))&quot;, :offset 161, :ns &quot;geojson.core&quot;} {:command &quot;(defn shp-&gt;fs-&gt;json\n  [srcPath cbk]\n  (shpjs (fs/readFile\n           srcPath\n           \&quot;utf8\&quot;\n           (fn [err json]\n             (if (= (type err) (type js/Error))\n               (throw err)\n               (cbk json))))))&quot;, :offset 226, :ns &quot;geojson.core&quot;} {:command &quot;(defn json-&gt;fs-&gt;save\n  [srcPath savPath]\n  (shp-&gt;fs-&gt;json srcPath\n                 (fn [json]\n                   (fs/writeFile\n                     savPath\n                     json\n                     #(js/console.log \&quot;wrote\&quot;)))))&quot;, :offset 232, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [[json err] (pair-port\n                     (shpjs (fs/readFile\n                              \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                              \&quot;utf8\&quot;\n                              (fn [err json]\n                                (if (= (type err) (type js/Error))\n                                  (throw err)\n                                  (cbk json))))))]\n    (try\n      (fs/writeFile\n        \&quot;./GeoJSON/500k/2013/01/county-subdivision4.json\&quot;\n        (&lt;? json)\n        #(js/console.log \&quot;wrote\&quot;))\n      (catch js/Error e\n        (js/console.log (str \&quot;bogus: \&quot; (ex-message e)))))))&quot;, :offset 673, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [[value error] (pair-port\n                        (shpjs (fs/readFile\n                                 \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                                 \&quot;utf8\&quot;\n                                 (fn [err json]\n                                   (if (= (type err) (type js/Error))\n                                     (throw err)\n                                     json)))))]\n    (try\n      (fs/writeFile\n        \&quot;./GeoJSON/500k/2013/01/county-subdivision4.json\&quot;\n        (&lt;? value)\n        #(js/console.log \&quot;wrote\&quot;))\n      (catch js/Error e\n        (js/console.log (str \&quot;bogus: \&quot; (ex-message e)))))))&quot;, :offset 692, :ns &quot;geojson.core&quot;} {:command &quot;(async\n  (p/alet [geojson\n           (-&gt;\n             (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n             js/Promise.resolve\n             p/await)]\n          (js/console.log geojson)))&quot;, :offset 270, :ns &quot;geojson.core&quot;} {:command &quot;(go\n  (let [[value _] (pair-port\n                    (shpjs (fs/readFile\n                             \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                             \&quot;utf8\&quot;\n                             (fn [err json]\n                               (if (= (type err) (type js/Error))\n                                 (throw err)\n                                 json)))))]\n    (try\n      ;(fs/writeFile\n      ;  \&quot;./GeoJSON/500k/2013/01/county-subdivision4.json\&quot;\n      ;  (&lt;? value)\n      ;  #(js/console.log \&quot;wrote\&quot;))\n      (js/console.log (&lt;? value))\n      (catch js/Error e\n        (js/console.log (str \&quot;bogus: \&quot; (ex-message e)))))))&quot;, :offset 698, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                        \&quot;utf8\&quot;\n                        (fn [err json]\n                          (if (= (type err) (type js/Error))\n                            (throw err)\n                            (cbk json)))))\n    (.then #(js/console.log %)))&quot;, :offset 369, :ns &quot;geojson.core&quot;} {:command &quot;(-&gt; (shpjs (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                        \&quot;utf8\&quot;\n                        (fn [err json]\n                          (if (= (type err) (type js/Error))\n                            (throw err) \n                            json))))\n    (.then #(js/console.log %)))&quot;, :offset 364, :ns &quot;geojson.core&quot;} {:command &quot;(.then\n  (shpjs (fs/readFileSync \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;))\n  #(js/console.log %))&quot;, :offset 156, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [promesa.core :as p]\n            [promesa.async-cljs :refer-macros [async]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 947, :ns &quot;cljs.user&quot;} {:command &quot;(defn x-shp-&gt;json\n  [rf]\n  (fn\n    ([] (rf))\n    ([result] (rf result))\n    ([result input] (rf result (-&gt; (shpjs input)\n                                   (.then (fn [_ data] data)))))))&quot;, :offset 187, :ns &quot;geojson.core&quot;} {:command &quot;(shadow/watch :lib)&quot;, :offset 19, :ns &quot;shadow.user&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)]\n  (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                  (fn [err zip]\n                    (if (= (type err) (type js/Error))\n                      (throw err)\n                      (go (&gt;! =file= zip)))))\n  (go (pprint (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))))&quot;, :offset 383, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)]\n  (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                  (fn [err zip]\n                    (if (= (type err) (type js/Error))\n                      (throw err)\n                      (go (&gt;! =file= zip)))))\n  (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n  (go (fs/writeFile\n        \&quot;./GeoJSON/500k/2013/01/county-subdivision5.json\&quot;\n        (&lt;! =json=)\n        #(js/console.log \&quot;wrote\&quot;))))&quot;, :offset 520, :ns &quot;geojson.core&quot;} {:command &quot;(defn ii-&gt;vin\n  \&quot;Map over a collection to transform 2-digit vintages to their 4-digit codes.\&quot;\n  [vtr]\n  (map #(cond (= \&quot;90\&quot; %) \&quot;1990\&quot;\n              (= \&quot;00\&quot; %) \&quot;2000\&quot;\n              :else %)\n       vtr))&quot;, :offset 201, :ns &quot;geojson.core&quot;} {:command &quot;(defn map-target-idx\n  \&quot;Maps a provided function to a specific index of a provided collection of collections.\&quot;\n  [fnc idx coll]\n  (map-indexed #(if (zero? (mod (inc %1) idx)) (fnc %2) %2) coll))&quot;, :offset 194, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geoIDvecs\n  \&quot;Breaks apart a Census Tiger filename and cleans it into meaningful parts. Takes a single string and returns a vector of vectors.\&quot;\n  [string]\n  (-&gt;&gt;\n    (s/split string #\&quot;_|\\.\&quot;)\n    (map #(re-seq #\&quot;[a-z]+|[0-9]+\&quot; %))\n    (map (fn [y] (remove #(= \&quot;d\&quot; %) y)))\n    (map-target-idx ii-&gt;vin 2)\n    (map #(vec %))))&quot;, :offset 338, :ns &quot;geojson.core&quot;} {:command &quot;(defn ?keyMatch\n  \&quot;Searches a single item from an inverted geoKeyMap and checks for a match against the provided vintage/level abbreviation code pair. Returns the `name` of the key (string) if matched and `nil` if mismatched.\&quot;\n  [vintage level [k v]]\n  (if-let [[_ v2] (find k (keyword vintage))]\n    (if (= v2 level)\n      (name v)\n      nil)\n    nil))&quot;, :offset 353, :ns &quot;geojson.core&quot;} {:command &quot;(defn keySearch\n  \&quot;Searches the entire geoKeyMap (inverted) for matches against a provided vintage and level abbreviation returning a string for the verbose geoKeyMap key match if successful and an empty string ('') if not\&quot;\n  [vintage level]\n  (apply str (remove nil? (map #(?keyMatch vintage level %) (seq (map-invert geoKeyMap))))))&quot;, :offset 334, :ns &quot;geojson.core&quot;} {:command &quot;(defn parts-&gt;geopath\n  \&quot;Consumes parts of the Tiger filename to compose a structured path for storage as a `.json` file.\&quot;\n  [[lev res m vin &amp; etc]]\n  (let [geopath (s/join \&quot;/\&quot; (list* vin etc))]\n    {:filepath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath (apply str (keySearch vin lev) \&quot;.json\&quot;)]))\n     :dirpath (str \&quot;./GeoJSON/\&quot; (s/join \&quot;/\&quot; [(apply str res m) geopath]))}))&quot;, :offset 385, :ns &quot;geojson.core&quot;} {:command &quot;(defn geoScopeFiler\n  \&quot;Creates a filepath determined by whether or not the input contains a state (e.g., '01') or national code ('99'/'us'). If the value returned from the `keySearch` function = `` (empty string) returns `nil`.\&quot;\n  [[lev res m vin sco]]\n  (if-not (= \&quot;\&quot; (keySearch vin lev))\n    (if (or (= sco \&quot;99\&quot;) (= sco \&quot;us\&quot;))\n      (parts-&gt;geopath [lev res m vin])\n      (parts-&gt;geopath [lev res m vin sco]))\n    nil))&quot;, :offset 421, :ns &quot;geojson.core&quot;} {:command &quot;(defun file=&lt;&lt;Director\n  \&quot;Pattern matches against incoming file structures to create a harmonized directory ontology in which to store the file\&quot;\n  ([[lev sco] [vin] _     _]                                (geoScopeFiler [lev       \&quot;500\&quot; \&quot;k\&quot; vin    sco]))\n  ([_         [vin] [sco] [\&quot;outline\&quot;]  [res m] _]           (geoScopeFiler [\&quot;outline\&quot; res   m   vin    sco]))\n  ([_         [vin] [sco] [\&quot;uac\&quot; \&quot;10\&quot;] [res m] _]           (geoScopeFiler [\&quot;uac\&quot;     res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        _         [res m] _] (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        [res m] _]           (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         [vin] [sco] [lev]        [res m] _]           (geoScopeFiler [lev       res   m   vin    sco]))\n  ([_         _     [sco] [lev \&quot;113\&quot;]  [res m] _]           (geoScopeFiler [lev       res   m   \&quot;2012\&quot; sco]))\n  ([&amp; anything-else] nil))&quot;, :offset 941, :ns &quot;geojson.core&quot;} {:command &quot;(defn filename-&gt;&gt;geopath\n  \&quot;Takes a filename string as input and sends it through the filepath creation pipeline. Returns `nil` if no matches are found for the level abbreviation contained in the filename.\&quot;\n  [string]\n  (if-let [answer (-&gt;&gt; (filename-&gt;&gt;geoIDvecs string) (apply file=&lt;&lt;Director))] answer nil))&quot;, :offset 309, :ns &quot;geojson.core&quot;} {:command &quot;(defn x-pathStr-&gt;&gt;filename\n  \&quot;Transducer, which takes a fully qualified path string (returned from node `fs`) and pulls out the filename from the end.\&quot;\n  [rf]\n  (fn\n    ([] (rf))\n    ([result] (rf result))\n    ([result input]\n     (rf result (-&gt;&gt; (s/split input #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))))))&quot;, :offset 301, :ns &quot;geojson.core&quot;} {:command &quot;(defn x-path-&gt;geojson-&gt;fs\n  \&quot;Transducer, which takes a fully qualified path string (returned from node `fs`) tries to convert its last component (split by `\\\\`) into a geojson filepath (if the filename successfully passes through conversion). If conversion results in `nil` does nothing. If it returns a filepath, it uses the path string as input to `shpjs` library and outputs to the supplied geojson filepath.\&quot;\n  [rf]\n  (fn\n    ([] (rf))\n    ([result] (rf result))\n    ([result input]\n     (rf result (let [=c= (chan)]\n                  (if-let\n                    [{:keys [filepath dirpath]} (-&gt;&gt; (s/split input #\&quot;\\\\\&quot;) (last) (filename-&gt;&gt;geopath))]\n                    (do\n                      (go (mkdirp dirpath (js/console.log (str \&quot;Saved \&quot; filepath \&quot; to: \&quot; dirpath))))\n                      (go (.then (shpjs (fs/readFileSync input)) #(put! =c= %)))\n                      (go (fs/writeFileSync filepath (&lt;! =c=))))\n                    (js/console.log (str \&quot;No bueno.\&quot;)))\n                  (close! =c=))))))&quot;, :offset 1014, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                  (fn [err zip]\n                    (if (= (type err) (type js/Error))\n                      (throw err)\n                      (go (&gt;! =file= zip)))))\n  (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n  (go (&lt;! =json=)))&quot;, :offset 418, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do \n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (async/put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (async/take! =json= #(pprint \&quot;take! =json=\&quot;))))&quot;, :offset 496, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (async/put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (async/take! =json= #(pprint \&quot;take! =json=\&quot;))))&quot;, :offset 495, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n        (pprint (take! =json= #(pprint \&quot;take! =json=\&quot;))))))&quot;, :offset 496, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    (go (pprint (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))))&quot;, :offset 436, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    (go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))))&quot;, :offset 444, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 544, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (!&gt; =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 531, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 531, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/pair-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 544, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1 x-json-&gt;save)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 545, :ns &quot;geojson.core&quot;} {:command &quot;(defn x-json-&gt;save\n  [rf]\n  (fn\n    ([] (rf))\n    ([result] (rf result))\n    ([result input] (rf result (fs/writeFile\n                                 \&quot;./GeoJSON/500k/2013/01/county-subdivision5.json\&quot;\n                                 input\n                                 #(js/console.log \&quot;wrote\&quot;))))))&quot;, :offset 303, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [ajax.core :as http :refer [GET POST]]\n            [cognitect.transit :as t]\n            [oops.core :as obj]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 859, :ns &quot;cljs.user&quot;} {:command &quot;(def geoKeyMap\n  {:nation                                                      {:2010 \&quot;outline\&quot;\n                                                                 :2013 \&quot;nation\&quot;\n                                                                 :2014 \&quot;nation\&quot;\n                                                                 :2015 \&quot;nation\&quot;\n                                                                 :2016 \&quot;nation\&quot;\n                                                                 :2017 \&quot;nation\&quot;}\n   :region                                                      {:2013 \&quot;region\&quot;\n                                                                 :2014 \&quot;region\&quot;\n                                                                 :2015 \&quot;region\&quot;\n                                                                 :2016 \&quot;region\&quot;\n                                                                 :2017 \&quot;region\&quot;\n                                                                 :2010 \&quot;020\&quot;\n                                                                 :2000 \&quot;rg\&quot;}\n   :division                                                    {:2013 \&quot;division\&quot;\n                                                                 :2014 \&quot;division\&quot;\n                                                                 :2015 \&quot;division\&quot;\n                                                                 :2016 \&quot;division\&quot;\n                                                                 :2017 \&quot;division\&quot;\n                                                                 :2010 \&quot;030\&quot;\n                                                                 :2000 \&quot;dv\&quot;}\n   :state                                                       {:2013 \&quot;state\&quot;\n                                                                 :2014 \&quot;state\&quot;\n                                                                 :2015 \&quot;state\&quot;\n                                                                 :2016 \&quot;state\&quot;\n                                                                 :2017 \&quot;state\&quot;\n                                                                 :2010 \&quot;040\&quot;\n                                                                 :1990 \&quot;st\&quot;\n                                                                 :2000 \&quot;st\&quot;}\n   :consolidated-cities                                         {:2000 \&quot;cc\&quot;\n                                                                 :2010 \&quot;170\&quot;\n                                                                 :2013 \&quot;concity\&quot;\n                                                                 :2014 \&quot;concity\&quot;\n                                                                 :2015 \&quot;concity\&quot;\n                                                                 :2016 \&quot;concity\&quot;\n                                                                 :2017 \&quot;concity\&quot;}\n   :county                                                      {:2013 \&quot;county\&quot;\n                                                                 :2014 \&quot;county\&quot;\n                                                                 :2015 \&quot;county\&quot;\n                                                                 :2016 \&quot;county\&quot;\n                                                                 :2017 \&quot;county\&quot;\n                                                                 :2010 \&quot;050\&quot;\n                                                                 :1990 \&quot;co\&quot;\n                                                                 :2000 \&quot;co\&quot;}\n   :county-subdivision                                          {:2013 \&quot;cousub\&quot;\n                                                                 :2014 \&quot;cousub\&quot;\n                                                                 :2015 \&quot;cousub\&quot;\n                                                                 :2016 \&quot;cousub\&quot;\n                                                                 :2017 \&quot;cousub\&quot;\n                                                                 :2010 \&quot;060\&quot;\n                                                                 :1990 \&quot;cs\&quot;\n                                                                 :2000 \&quot;cs\&quot;}\n   :tract                                                       {:2013 \&quot;tract\&quot;\n                                                                 :2014 \&quot;tract\&quot;\n                                                                 :2015 \&quot;tract\&quot;\n                                                                 :2016 \&quot;tract\&quot;\n                                                                 :2017 \&quot;tract\&quot;\n                                                                 :2010 \&quot;140\&quot;\n                                                                 :1990 \&quot;tr\&quot;\n                                                                 :2000 \&quot;tr\&quot;}\n   :place                                                       {:2013 \&quot;place\&quot;\n                                                                 :2014 \&quot;place\&quot;\n                                                                 :2015 \&quot;place\&quot;\n                                                                 :2016 \&quot;place\&quot;\n                                                                 :2017 \&quot;place\&quot;\n                                                                 :2010 \&quot;160\&quot;\n                                                                 :1990 \&quot;pl\&quot;\n                                                                 :2000 \&quot;pl\&quot;}\n   :alaska-native-regional-corporation                          {:2013 \&quot;anrc\&quot;\n                                                                 :2014 \&quot;anrc\&quot;\n                                                                 :2015 \&quot;anrc\&quot;\n                                                                 :2016 \&quot;anrc\&quot;\n                                                                 :2017 \&quot;anrc\&quot;\n                                                                 :2010 \&quot;230\&quot;\n                                                                 :1990 \&quot;an\&quot;\n                                                                 :2000 \&quot;an\&quot;}\n   :american-indian-area!alaska-native-area!hawaiian-home-land  {:2013 \&quot;aiannh\&quot;\n                                                                 :2014 \&quot;aiannh\&quot;\n                                                                 :2015 \&quot;aiannh\&quot;\n                                                                 :2016 \&quot;aiannh\&quot;\n                                                                 :2017 \&quot;aiannh\&quot;\n                                                                 :2010 \&quot;250\&quot;\n                                                                 :1990 \&quot;ir\&quot;\n                                                                 :2000 \&quot;na\&quot;}\n   :metropolitan-statistical-area!micropolitan-statistical-area {:2013 \&quot;cbsa\&quot;\n                                                                 :2014 \&quot;cbsa\&quot;\n                                                                 :2015 \&quot;cbsa\&quot;\n                                                                 :2016 \&quot;cbsa\&quot;\n                                                                 :2017 \&quot;cbsa\&quot;\n                                                                 :2010 \&quot;310\&quot;\n                                                                 :1990 \&quot;ma\&quot;}\n   :combined-statistical-area                                   {:2013 \&quot;csa\&quot;\n                                                                 :2014 \&quot;csa\&quot;\n                                                                 :2015 \&quot;csa\&quot;\n                                                                 :2016 \&quot;csa\&quot;\n                                                                 :2017 \&quot;csa\&quot;\n                                                                 :2010 \&quot;330\&quot;}\n   :new-england-city-and-town-area                              {:2013 \&quot;necta\&quot;\n                                                                 :2014 \&quot;necta\&quot;\n                                                                 :2015 \&quot;necta\&quot;\n                                                                 :2016 \&quot;necta\&quot;\n                                                                 :2017 \&quot;necta\&quot;\n                                                                 :2010 \&quot;350\&quot;}\n   :combined-new-england-city-and-town-area                     {:2016 \&quot;cnecta\&quot;\n                                                                 :2017 \&quot;cnecta\&quot;}\n   :urban-area                                                  {:2013 \&quot;ua\&quot;\n                                                                 :2014 \&quot;ua\&quot;\n                                                                 :2015 \&quot;ua\&quot;\n                                                                 :2016 \&quot;ua\&quot;\n                                                                 :2017 \&quot;ua\&quot;\n                                                                 :2012 \&quot;uac\&quot;\n                                                                 :1990 \&quot;ua\&quot;\n                                                                 :2000 \&quot;ua\&quot;}\n   :congressional-district                                      {:103  \&quot;cd\&quot;\n                                                                 :104  \&quot;cd\&quot;\n                                                                 :105  \&quot;cd\&quot;\n                                                                 :106  \&quot;cd\&quot;\n                                                                 :107  \&quot;cd\&quot;\n                                                                 :108  \&quot;cd\&quot;\n                                                                 :109  \&quot;cd\&quot;\n                                                                 :110  \&quot;cd\&quot;\n                                                                 :2013 \&quot;cd\&quot;\n                                                                 :2014 \&quot;cd\&quot;\n                                                                 :2015 \&quot;cd\&quot;\n                                                                 :2016 \&quot;cd\&quot;\n                                                                 :2017 \&quot;cd\&quot;\n                                                                 :2012 \&quot;cd\&quot;\n                                                                 :2010 \&quot;500\&quot;}\n   :school-district-'elementary'                                {:2016 \&quot;elsd\&quot;\n                                                                 :2017 \&quot;elsd\&quot;\n                                                                 :2000 \&quot;se\&quot;}\n   :school-district-'secondary'                                 {:2016 \&quot;scsd\&quot;\n                                                                 :2017 \&quot;scsd\&quot;\n                                                                 :2000 \&quot;ss\&quot;}\n   :school-district-'unified'                                   {:2016 \&quot;unsd\&quot;\n                                                                 :2017 \&quot;unsd\&quot;\n                                                                 :2010 \&quot;970\&quot;\n                                                                 :2000 \&quot;sn\&quot;}\n   :block-group                                                 {:2013 \&quot;bg\&quot;\n                                                                 :2014 \&quot;bg\&quot;\n                                                                 :2015 \&quot;bg\&quot;\n                                                                 :2016 \&quot;bg\&quot;\n                                                                 :2017 \&quot;bg\&quot;\n                                                                 :2010 \&quot;150\&quot;\n                                                                 :1990 \&quot;bg\&quot;\n                                                                 :2000 \&quot;bg\&quot;}\n   :public-use-microdata-area                                   {:2013 \&quot;puma\&quot;\n                                                                 :2014 \&quot;puma\&quot;\n                                                                 :2015 \&quot;puma\&quot;\n                                                                 :2016 \&quot;puma\&quot;\n                                                                 :2017 \&quot;puma\&quot;}\n   :zip-code-tabulation-area                                    {:2013 \&quot;zcta\&quot;\n                                                                 :2014 \&quot;zcta\&quot;\n                                                                 :2015 \&quot;zcta\&quot;\n                                                                 :2016 \&quot;zcta\&quot;\n                                                                 :2017 \&quot;zcta\&quot;\n                                                                 :2010 \&quot;860\&quot;\n                                                                 :2000 \&quot;zt\&quot;} ;; zipcodes are *not* the same\n   :state-legislative-district-'upper-chamber'                  {:2013 \&quot;sldu\&quot;\n                                                                 :2014 \&quot;sldu\&quot;\n                                                                 :2015 \&quot;sldu\&quot;\n                                                                 :2016 \&quot;sldu\&quot;\n                                                                 :2017 \&quot;sldu\&quot;\n                                                                 :2012 \&quot;sldu\&quot;\n                                                                 :2010 \&quot;610\&quot;\n                                                                 :2000 \&quot;su\&quot;}\n   :state-legislative-district-'lower-chamber'                  {:2013 \&quot;sldl\&quot;\n                                                                 :2014 \&quot;sldl\&quot;\n                                                                 :2015 \&quot;sldl\&quot;\n                                                                 :2016 \&quot;sldl\&quot;\n                                                                 :2017 \&quot;sldl\&quot;\n                                                                 :2012 \&quot;sldl\&quot;\n                                                                 :2010 \&quot;620\&quot;\n                                                                 :2000 \&quot;sl\&quot;}})&quot;, :offset 13549, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 532, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (&lt;! =json=))))&quot;, :offset 515, :ns &quot;geojson.core&quot;} {:command &quot;(defn pp-json-&gt;save\n  \&quot;An asynchronous function to use with `pipeline-async`, which requires it to take two arguments `[input-val out-chan]`. Uses `fs/writeFile` to write a file to the file system.\&quot;\n  [input-val =out-chan=]\n  (do (put! =out-chan= (fs/writeFile\n                         \&quot;./GeoJSON/500k/2013/01/county-subdivision6.json\&quot;\n                         input-val\n                         #(js/console.log \&quot;wrote\&quot;)))\n      (close! =out-chan=)))&quot;, :offset 451, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=))))))\n    (pipeline-async 1 =json= pp-json-&gt;save =term=)))&quot;, :offset 568, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=))))))\n    (pipeline-async 1 =term= pp-json-&gt;save =json=)))&quot;, :offset 568, :ns &quot;geojson.core&quot;} {:command &quot;(defn pp-json-&gt;save\n  \&quot;An asynchronous function to use with `pipeline-async`, which requires it to take two arguments `[input-val out-chan]`. Uses `fs/writeFile` to write a file to the file system.\&quot;\n  [input-val =out-chan=]\n  (go (&gt;! =out-chan= (fs/writeFile\n                      \&quot;./GeoJSON/500k/2013/01/county-subdivision6.json\&quot;\n                      input-val\n                      #(js/console.log \&quot;wrote\&quot;)))\n      (close! =out-chan=)))&quot;, :offset 440, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json)))))&quot;, :offset 553, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (js/console.log (&lt;! =json=)))))&quot;, :offset 554, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    (go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))))&quot;, :offset 453, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (&lt;! =json=))))&quot;, :offset 539, :ns &quot;geojson.core&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))))\n    (put! =json= (go (&lt;? (cpa/value-port (shpjs (&lt;! =file=))))))\n    (take! =json= #(js/console.log %))))&quot;, :offset 560, :ns &quot;geojson.core&quot;} {:command &quot;(ns geojson.core\n  (:require [cljs.core.async\n             :as async\n             :refer [chan put! take! &gt;! &lt;! pipe timeout close! alts! pipeline-async split]\n             :refer-macros [go go-loop alt!]]\n            [clojure.string :as s]\n            [clojure.set :refer [map-invert]]\n            [cljs.pprint :refer [pprint]]\n            [defun.core :refer-macros [defun]]\n            [cljs-promises.core :as cp]\n            [cljs-promises.async\n             :as cpa\n             :refer [pair-port]\n             :refer-macros [&lt;?]]\n            [\&quot;node-dir\&quot; :as dir]\n            [\&quot;fs\&quot; :as fs]\n            [\&quot;path\&quot; :as path]\n            [\&quot;shpjs\&quot; :as shpjs]\n            [\&quot;mkdirp\&quot; :as mkdirp]\n            [clojure.repl :refer [source doc]]))&quot;, :offset 738, :ns &quot;cljs.user&quot;} {:command &quot;(let [=file= (chan 1)\n      =json= (chan 1)\n      =term= (chan 1)]\n  (do\n    (fs/readFile \&quot;C:\\\\Users\\\\Surface\\\\Downloads\\\\www2.census.gov\\\\geo\\\\tiger\\\\GENZ2013\\\\cb_2013_01_cousub_500k.zip\&quot;\n                    (fn [err zip]\n                      (if (= (type err) (type js/Error))\n                        (throw err)\n                        (put! =file= zip #(pprint \&quot;put! =file=\&quot;)))))\n    ;(go (js/console.log (&lt;? (cpa/pair-port (shpjs (&lt;! =file=))))))))\n    (go (&gt;! =json= (&lt;? (cpa/value-port (shpjs (&lt;! =file=)))))\n        (pprint (&lt;! =json=)))))&quot;, :offset 548, :ns &quot;geojson.core&quot;} {:command &quot;(defn jsPrint [str data] (js/console.log (str str data)))&quot;, :offset 57, :ns &quot;geojson.core&quot;} {:command &quot;(shadow.cljs.devtools.api/node-repl)&quot;, :offset 36, :ns &quot;geojson.core&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration name="&lt;template&gt;" type="JUnit" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
    </configuration>
    <configuration name="&lt;template&gt;" type="TestNG" default="true" selected="false">
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Shadow REPL" type="ClojureREPL" factoryName="Remote">
      <module name="census-geojson" />
      <setting name="host" value="localhost" />
      <setting name="port" value="3333" />
      <setting name="replType" value="0" />
      <method v="2" />
    </configuration>
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="82ac4cda-63ef-47ec-b2ea-e93ad332046f" name="Default" comment="" />
      <created>1532985568925</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1532985568925</updated>
      <workItem from="1532985572100" duration="1880000" />
      <workItem from="1532987541062" duration="95000" />
      <workItem from="1532987719844" duration="2400000" />
      <workItem from="1532990391831" duration="692000" />
      <workItem from="1532991145601" duration="37320000" />
      <workItem from="1533223286311" duration="471000" />
      <workItem from="1533223860548" duration="61732000" />
      <workItem from="1533477791155" duration="93000" />
      <workItem from="1533477968393" duration="42000" />
      <workItem from="1533478159070" duration="86000" />
      <workItem from="1533478288842" duration="6152000" />
      <workItem from="1533558682794" duration="282000" />
      <workItem from="1533559006262" duration="69089000" />
      <workItem from="1533816892156" duration="21721000" />
      <workItem from="1533908701380" duration="2169000" />
      <workItem from="1533910910674" duration="122000" />
      <workItem from="1533911219766" duration="17000" />
      <workItem from="1533911277575" duration="19565000" />
      <workItem from="1534163482601" duration="126000" />
      <workItem from="1534163635923" duration="38936000" />
      <workItem from="1534332417256" duration="11106000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="274096000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="2729" y="221" width="1433" height="1567" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.21849963" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info id="Designer" order="2" />
      <window_info id="Favorites" order="3" side_tool="true" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Find" order="1" sideWeight="0.49960032" weight="0.32914925" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" weight="0.32914925" />
      <window_info anchor="bottom" id="Database Changes" order="8" show_stripe_button="false" />
      <window_info anchor="bottom" id="Version Control" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Quokka" order="10" />
      <window_info anchor="bottom" id="Terminal" order="11" sideWeight="0.3277378" weight="0.32977304" />
      <window_info anchor="bottom" id="Dependency Viewer" order="12" weight="0.32962447" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="right" id="GfmBrowser" order="3" weight="0.32980227" />
      <window_info anchor="right" id="Palette&#9;" order="4" />
      <window_info anchor="right" id="Leiningen" order="5" />
      <window_info anchor="right" id="Database" order="6" />
      <window_info anchor="right" id="Maven Projects" order="7" />
      <window_info anchor="right" x="4159" y="1178" width="1136" height="602" id="REPL" order="8" sideWeight="0.5003997" side_tool="true" type="WINDOWED" visible="true" weight="0.33734134" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="UnknownFeatures">
    <option featureType="com.intellij.fileTypeFactory" implementationName=".gitignore" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/../node_modules/shadow-cljs/package.json" />
    <entry file="file://$PROJECT_DIR$/../node_modules/shadow-cljs/cli/default-config.edn" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/core.async/0.4.474/core.async-0.4.474.jar!/cljs/core/async.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="60">
          <caret line="3" column="10" selection-start-line="3" selection-start-column="10" selection-end-line="3" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../geoRaw/test-#testing#/test-#.json" />
    <entry file="file://$PROJECT_DIR$/../geoRaw/testing-+folder/testing-+file.json" />
    <entry file="file://$PROJECT_DIR$/../geoRaw/testing!-'folder/counties-!test'.json" />
    <entry file="file://$PROJECT_DIR$/../shadow-idea-notes.md" />
    <entry file="file://$PROJECT_DIR$/../src/main/core.cljs" />
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojurescript/1.10.339/clojurescript-1.10.339.jar!/cljs/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="724">
          <caret line="2936" column="6" selection-start-line="2936" selection-start-column="6" selection-end-line="2936" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/testingslashes.json" />
    <entry file="file://$PROJECT_DIR$/../test/files.json" />
    <entry file="file://$PROJECT_DIR$/../test/files.txt" />
    <entry file="file://$PROJECT_DIR$/../test/filelist.json" />
    <entry file="file://$PROJECT_DIR$/../test/test2.json" />
    <entry file="file://$PROJECT_DIR$/../test/test3.json" />
    <entry file="file://$PROJECT_DIR$/../test/test4.json" />
    <entry file="file://$PROJECT_DIR$/../.env" />
    <entry file="file://$PROJECT_DIR$/../.gitignore" />
    <entry file="file://$PROJECT_DIR$/../test/test7.json" />
    <entry file="file://$PROJECT_DIR$/../test/test6.json" />
    <entry file="file://$PROJECT_DIR$/../test/test5.json" />
    <entry file="file://$PROJECT_DIR$/../test/test9.json" />
    <entry file="file://$PROJECT_DIR$/../test/test8.json" />
    <entry file="file://$PROJECT_DIR$/../test/counties.json" />
    <entry file="file://$PROJECT_DIR$/../test/test11.json" />
    <entry file="file://$PROJECT_DIR$/../test/test10.json" />
    <entry file="file://$USER_HOME$/AppData/Local/Temp/Temp1_mygeodata.zip/cb_2015_us_aiannh_500k.geojson" />
    <entry file="file://$PROJECT_DIR$/../test/test10-abv.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/state-legislative-district-'lower-chamber'.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/tract.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/place.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/block-group.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../pom.xml">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-sub.json" />
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-su.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-18" />
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision2.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="90">
          <caret line="5" column="137" selection-start-line="5" selection-start-column="137" selection-end-line="5" selection-end-column="137" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision5.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/cartoFileStructure.md">
      <provider selected="true" editor-type-id="split-provider[text-editor;markdown-preview-editor]">
        <state split_layout="FIRST">
          <first_editor />
          <second_editor />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../package.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-72">
          <caret line="14" column="13" selection-start-line="14" selection-start-column="13" selection-end-line="14" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../shadow-cljs.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret line="11" column="8" selection-start-line="11" selection-start-column="8" selection-end-line="11" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/merger/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="258">
          <caret line="246" column="45" selection-start-line="246" selection-start-column="45" selection-end-line="246" selection-end-column="45" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../test/js-json.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="777">
          <caret line="99650" column="23" selection-start-line="99650" selection-start-column="23" selection-end-line="99650" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision6.json">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision3.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="756">
          <caret column="5836" selection-start-column="5836" selection-end-column="5836" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision4.json">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../GeoJSON/500k/2013/01/county-subdivision.json">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="198">
          <caret column="1580" selection-start-column="1580" selection-end-column="1580" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/../src/geojson/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="755">
          <caret line="426" lean-forward="true" selection-start-line="426" selection-end-line="426" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>census-geojson</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Maven: args4j:args4j:2.33</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>