{"version":3,"file":"cljs_promises.core.js","sources":["cljs_promises/core.cljs"],"mappings":";;AAEA,mCAAA,nCAAOA,8EACJC;AADH,AAEE,GAAI,EAAI,AAACC,uBAAOD,WACR,EAAK,AAACE,4BAAYF;AACxBA;;AACA,OAACG,mDAAWH;;;AAIhB,6BAAA,7BAAMI,kEACHC;AADH,AAEE,YAAAC,QAAaD;;AAEf,6BAAA,7BAAME,kEACHC;AADH,AAEE,OAAUF,gBAAWE;;AAEvB,4BAAA,5BAAMC,gEACHD;AADH,AAEE,OAASF,eAAWE;;AAEtB,yBAAA,zBAAME,0DACHV;AADH,AAEE,OAAMM,YAAW,AAACP,iCAAcC;;AAElC,0BAAA,1BAAMW,4DACHX;AADH,AAEE,OAAOM,aAAW,AAACP,iCAAcC;;AAEnC,AAAA,0BAAA,kCAAAY,5DAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,sDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,wDAAA,xDAAMD,mEACFE,QAAQC;AADZ,AAEG,OAAOD,aAAQC;;;AAFlB,AAAA,wDAAA,xDAAMH,mEAGFE,QAAQC,aAAaC;AAHzB,AAIG,OAAOF,aAAQC,aAAaC;;;AAJ/B,AAAA,kDAAA,lDAAMJ;;AAAN,AAMA,4BAAA,5BAAMK,+DACHH,QAAQE;AADX,AAEE,OAAQF,cAAQE;;AAIlB,6BAAA,7BAAME,kEACHC;AADH,AAEE,OAACjB,2BAAQ,WAAKkB,QAAQC;AAAb,AACE,OAACC,WAAcF,QAAQD","names":["cljs-promises.core/cast-as-array","coll","cljs.core/array?","cljs.core/reduceable?","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs-promises.core/promise","resolver","js/Promise","cljs-promises.core/resolve","x","cljs-promises.core/reject","cljs-promises.core/all","cljs-promises.core/race","var_args","G__14957","cljs-promises.core/then","js/Error","promise","on-fulfilled","on-rejected","cljs-promises.core/catch","cljs-promises.core/timeout","ms","resolve","_","js/setTimeout"],"sourcesContent":["(ns cljs-promises.core)\n\n(defn- cast-as-array\n  [coll]\n  (if (or (array? coll)\n          (not (reduceable? coll)))\n    coll\n    (into-array coll)))\n\n;; the ES6 API:\n\n(defn promise\n  [resolver]\n  (js/Promise. resolver))\n\n(defn resolve\n  [x]\n  (.resolve js/Promise x))\n\n(defn reject\n  [x]\n  (.reject js/Promise x))\n\n(defn all\n  [coll]\n  (.all js/Promise (cast-as-array coll)))\n\n(defn race\n  [coll]\n  (.race js/Promise (cast-as-array coll)))\n\n(defn then\n  ([promise on-fulfilled]\n   (.then promise on-fulfilled))\n  ([promise on-fulfilled on-rejected]\n   (.then promise on-fulfilled on-rejected)))\n\n(defn catch\n  [promise on-rejected]\n  (.catch promise on-rejected))\n\n;; extras!\n\n(defn timeout\n  [ms]\n  (promise (fn [resolve _]\n             (js/setTimeout resolve ms))))\n"]}