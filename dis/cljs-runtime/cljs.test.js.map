{"version":3,"file":"cljs.test.js","sources":["cljs/test.cljs"],"mappings":";;;;AA2PA,AAAA;;;;;;;;sBAAA,8BAAAoB,pDAAM8E;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,oDAAA,pDAAMD;AAAN,AAOM,yDAAA,lDAAC8D;;;+DACHtG,/DARJ,AAAA,oDAAA,pDAAMwC;AASH,IAAAhB,WAAA,2CAAA,4EAAA,2CAAA,oDAAA,IAAA,qDAAA,IAAA,qDAAA,IAAA,uDAAA,YAAA,sEAAA,qBAAA,8EAAA,qBAAA,gFAAA,6DAImBxB,zuBAbtB,2pBAYuB0E;AAHpB,AAAA,GAKE,6CAAA,7CAACgE,uHAAW1I;gUACuBuI,hUADb,4DAAA/G,SAAA,6DAAA,+HAAA,1PAACmH;;AALzBnH;;;;AATH,AAAA,8CAAA,9CAAMgB;;AAAN,AAiBA,oCAAA,pCAAepB;AAEf,4BAAA,5BAAMvE;AAAN,AACE,IAAAmK,mBAAI5F;AAAJ,AAAA,oBAAA4F;AAAAA;;AAAkB,OAAC2C;;;AAErB,AAAA,qCAAA,6CAAAjM,lFAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,AAAA,AAAAE,0EAAA,WAA2BO,GAAGC,EAAIC;AAAlC,8IAC8DA,FAAFD,/BAArB,AAAC3B,lEAAlB,8CAAOqE,zFAA3B,2CAAqBC,8FAAkC5C,lIAAjD6C;;;AADR,AAAA,AAAApD,6DAAA;;AAAA;AAAA,AAAA,AAAAA,uDAAA,WAAAC;AAAA,AAAA,IAAAC,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAAJ,SAAAG,SAAAJ;;;AAAA,AAGA,0BAAA,1BAAMoJ,4DAAUC;AAAhB,AACE,OAAMlG,oCAAckG;;AAEtB,4BAAA,5BAAMP;AACJ,2CAAA,pCAAM3F,PADR;;AAGA,oCAAA,pCAAM3D;AAAN,AAAA;AAEE,IAAM0G,MAAI,AAACtH;AAAX,AACE,AAACkK;;AACD5C;;AAEJ;;;;;kEAIGzH,rCAJH,7BAAMwH;AAKJ,IAAAtC,aAAiClF,jBALnC;IAKEkF,iBAAA,EAAA,EAAA,EAAA,CAAAA,cAAA,QAAA,EAAA,EAAA,CAAA,AAAAA,iDAAA,WAAA,CAAAC,gCAAA,AAAAD,+BAAA,KAAA,OAAA,QAAA,AAAAE,8CAAAC,mBAAAH,YAAAA;WAAA,AAAA1E,4CAAA0E,eAAA,lEAAcI;WAAd,AAAA9E,4CAAA0E,eAAA,lEAAmBZ;aAAnB,AAAA9D,4CAAA0E,eAAA,pEAAwBX;AAAxB,AACE,oDACGvC,kBAAQ,4CAAA,9DAAT,kBAAUoH;kBAADgB;AAAA,AAAM,OAAA,mFAAQ9J,AAAD,eAAA8J;;qIADxB,uDAAA,sMAAA,7RACkDjK,AAAD,pGAAf,AAAA,qLAC3BmF,sDAAShB,kDAAK,0BAAA,mEAAA,3EAAMC,QAAO,CAAA,gDAASA;;AAE/C;;;;iCAAA,jCAAMlC;AAAN,uPAIwD,pLAA3C,kDAAA,IAAgBL,AAAD,lHAAzBoD,PAAD,uPAAuDjF,lMAAhDgL,cAAKC,wEAAuB,AAAA;;AAErC;;;;kFAGG3F,7CAHH,rCAAM1B;AAAN,AAIE,oBAAI,AAAA,0GAAkB,AAAC5D;AACrB,0CAAA,mFAAA,tHAACmB,kMAAsCmE,aAAM,2DAAA,3DAACY,6CAAK7C;;AADrD;;;AAGF,GAAA,QAAAlB,iCAAAC,sCAAAC;AAAA;AAAA,AAAA;;;;;;mBAAA,iBAAAC,6BAAA,AAAAC,6CAAA,9GAME3C;IANF4C,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,AAAAC;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,YAAA,UAMS;kBAAKlD;AAAL,AAAA,0FAAS,AAAA,2FAAW,AAACG,6BAAkB,AAAA,mFAAOH;;CANvD,4DAAA8C,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAQA,AAAA9C,6DAAA,4DAAA,WAA4BC;AAA5B,AAAA;;AAEA,AAAAD,6DAAA,mFAAA,6EAAA,6DAAA,WAAqCC;AACnC,0CAAA,nCAAC+D,PADH;;AAGA,6BAAA,7BAAOR,kEAAkBvD;AACvB,IAAM4F,eAAa,iBAAA0E,mBAAI,AAAA,6FAAY,AAACnK,pJADtC;AACqB,AAAA,oBAAAmK;AAAAA;;AAAmCtC;;;AAAtD,AACE,yGAAA,zGAACtC,qHAAoB,iBAAA4G,WAAc,AAAA,2FAAWtM;AAAzB,AAAA,gGAAAsM,mCAAAA,3HAAC1G,6CAAAA,uDAAAA;;;AACtB,gHAAA,zGAACF,qHAAoB,iBAAAC,WAAc,AAAA,sFAAS3F;AAAvB,AAAA,gGAAA2F,mCAAAA,3HAACC,6CAAAA,uDAAAA;;;AAE1B,AAAA7F,6DAAA,mFAAA,6EAAA,6DAAA,WAAqCC;AAArC,AACE,mCAAA,nCAAC+D;;AACD,yGAAA,zGAAC2B,qHAAoB,AAAC8B,2BAAiBxH;;AACvC,GAAM,AAAC8G,cAAI,AAAA,4GAAmB,AAAC3G;AAA/B,AACE,AAACuF,yGAAQ,AAACrD;;AADZ;;AAEA,IAAA6E,2BAAmB,AAAA,yFAAUlH;AAA7B,AAAA,oBAAAkH;AAAA,AAAA,oBAAAA,hBAAWiD;AAAX,AAAiC,AAACzE,yGAAQyE;;AAA1C;;AACA,OAAC5G,2BAAiBvD;;AAEpB,AAAAD,6DAAA,mFAAA,6EAAA,+DAAA,WAAsCC;AACpC,mCAAA,nCAAC+D,AADH;;AAEE,yGAAA,zGAAC2B,sHAAqB,AAAC8B,2BAAiBxH;;AACxC,GAAM,AAAC8G,cAAI,AAAA,4GAAmB,AAAC3G;AAC7B,AAACuF,yGAAQ,AAACrD,zGADZ;;AAAA;;AAEA,IAAA6E,2BAAmB,AAAA,yFAAUlH;AAA7B,AAAA,oBAAAkH;AAAA,AAAA,oBAAAA,hBAAWiD;AAAX,AAAiC,AAACzE,yGAAQyE;;AAA1C;;AACA,OAAC5G,2BAAiBvD;;AAEpB,AAAAD,6DAAA,mFAAA,6EAAA,kEAAA,WAAwCC;AAAxC,yNAEI,CAAA,CAAG,AAAA,mFAAOA,KAAG,AAAA,mFAAOA,MAAG,AAAA,qFAAQA,jeADjC,yGAAA,6FAAA,+RAAA,reAAC0F,iHAAgB,AAAA,kFAAO1F;;AAExB,sMAAA,oGAAA,nSAAC0F,yGAAQ,AAAA,mFAAO1F,eAAe,AAAA,qFAAQA;;AAEzC,AAAAD,6DAAA,mFAAA,6EAAA,gFAAA,WAA8CC;AAC5C,gHAAA,zGAAC0F,qHAAoB,AAACiE,eAAK,AAAA,8EAAK3J,zNADlC;;AAIA,AAAAD,6DAAA,mFAAA,6EAAA,2EAAA,WAA4CC;AAA5C,AAAA;;AACA,AAAAD,6DAAA,mFAAA,6EAAA,iFAAA,WAA+CC;AAA/C,AAAA;;AAEA,AAAAD,6DAAA,mFAAA,6EAAA,4EAAA,WAA6CC;AAA7C,AAAA;;AACA,AAAAD,6DAAA,mFAAA,6EAAA,8EAAA,WAA8CC;AAA9C,AAAA;;AACA,AAAAD,6DAAA,mFAAA,6EAAA,sFAAA,WAAkDC;AAAlD,AAAA;;AACA,AAAAD,6DAAA,mFAAA,6EAAA,gFAAA,WAA8CC;AAA9C,AAAA;;AAKA,+BAAA,/BAAMwI,sEAAoBpG;AAA1B,AAAA;AAKE,IAAMD,QAAM,oBAAA,pBAAQC;IACd4H,MAAM,AAACzC,gBAAMpF;AADnB,AAEE,GAAI,OAAA,NAAG6H;wKAEJ,wEAAA,xEAACF,SAAY,AAACC,4CAAI5H,MAAM,OAAA,NAAK6H,1IAD7B,wEAAA,xEAACF,SAAY,AAACC,4CAAI5H,MAAM,OAAA,NAAG6H,tJAD9B;;AAAA,0FAAA,IAAA;;;AAKJ,wBAAA,xBAAM5G,wDAAahB;AAAnB,AACE,IAAMsG,aAAW;IACXA,iBAAW,iBAAAgE,WAAQhE;GACN,EAAK,2CAAA,3CAACD,gCAAkBC,rCAD1B,AAAA;AAEE,oDAAAgE,UAAA;;AAFFA;;;OAMbjL,gBADA,AAAA,0DAAA,jFAFF,sCAAI,AAAQW,oBAAcsG,nCACxBwC,vBALJ;;AASF,mCAAA,nCAAM9G,8EAAwBC,SAASC,KAAKC;AAA5C,AACE,eAAA,XAAM4B,8FAAS9B,SAASC,KAAKC;AAC3B,IAAAtE,qBAAoB,AAAA,+FAAa,AAACE,xHADpC;AACE,AAAA,oBAAAF;AAAA,iBAAAA,bAASC;AAAT,AAEE,IAAAD,yBAAiB,0DAAA,1DAAC2I,+CAAO1I,8FAAYmE,SAAS,QAAA,PAAKC;AAAnD,AAAA,oBAAArE;AAAA,cAAAA,VAASuG;iEAMH,AAAC/E,gBACC,iBAAAxB,yBAAiB,AAACO,4CAAIgG,QAAQ,UAAA,TAAKjC,hLAP3C,qBAEI,AAAC6E,rBADH,OAACqD;AAMK,AAAA,oBAAAxM;AAAA,cAAAA,VAASkD;AACPA,AADF;;AAEE,OAAC2J,iBAAO,AAACrL,gBAAM+E;;MAPrB,mFAAA,yDAAA,oDAAA;;AASFL;;;AACFA;;;AAEN,0BAAA,1BAAMtB,4DAAeZ,UAAUxD;AAA/B,AAEE,IAAAR,qBAAuB,iBAAAsG,oBAAK,OAAS,AAAStC;AAAvB,AAAA,GAAAsC;AACK,IAAAhG,WAAQ,AAAS0D;IAAjB1D,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,2BAAAA,3BACQqM;kDACA,4CAAArM,5CAACC,yDAAIC,vGAFbF,eAAA,EAAA,CAAAA,gBAAA,OAAA;AAAA,AAAA,GAAA,CAAAA,gBAAA;AAAA;;AAAA,2BAAAA,pBAGQ2J;;;AAJb3D;;;AAAvB,AAAA,oBAAAtG;AAAA,oBAAAA,hBAASmC;AAAT,AAKE,IAAMwC,QAAM,AAACxB,sBAAYhB;IAAzB8F,aACoB,AAACM,6BAAmBpG;WADxC,AAAA+F,4CAAAD,WAAA,IAAA,lEACO5D;aADP,AAAA6D,4CAAAD,WAAA,IAAA,pEACY3D;IADZ6D,aAE0B,AAAChE,iCAAuBQ,MAAMN,KAAKC;gBAF7D,AAAA4D,4CAAAC,WAAA,IAAA,vEAEOxD;eAFP,AAAAuD,4CAAAC,WAAA,IAAA,tEAEa9D;iBAFb,AAAA6D,4CAAAC,WAAA,IAAA,xEAEkB7D;wGACTK,8DAAYN,kEAAaC,xOAHlC,AAAA,kDAAA,gEAAA,6DAAA;;wGAIO,AAAYN,xGATrB,kDAAA,yEAAA,oDAUS,AAAcA;;;AAEzB,sBAAA,tBAAMR,oDAAWzD;AACf,IAAMA,QAAE,iBAAA8H,WAAM,AAAA,mFAAO9H,3HADvB;IACU8H,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACQ,OAAC6E,uGAAM,sCAAA,tCAAC9H,wBAAc,KAAAkB,cAAe/F;;;KAD7C;AAES,OAAC2M,uGAAM,iHAAA,jHAAC9H,wBAAc,AAAA,sFAAS7E,QAAMA;;;;AAC5CA;;;;AAHV,AAIE,QAACD,iDAAAA,wDAAAA,TAAOC,oCAAAA;;AAKZ,AAAA;AAAA;;;;;uBAAA,vBAAaoG;;AAIb,AAJA;;;yBAIA,zBAAM1F,0DAEH8J;AAFH,AAGE,GAAA,EAAA,MAAA,LAAuBA;AAAvB,GAAA,EAAA,WAAA,CAAArF,gCAAA,AAAuBqF;AAAvB;;AAAA,GAAA,EAAA,AAAuBA;AAAvB,OAAAD,kCAAYnE,qBAAWoE;;AAAvB;;;;AAAA,OAAAD,kCAAYnE,qBAAWoE;;;AAEzB;;;;;;;;oDAOG3G,9BAPH,tBAAM/D;;AAQJ,IAAAoH,qBAAA,AAAAJ,cAAejD,vCARjB;AAQE,AAAA,GAAAqD;AAAA,AAAA,IAAA4E,mBAAA5E;AAAA,AAAA,QAAA,AAAAzF,gBAAAqK,pBAAahK;AACX,IAAMoC,MAAI,CAACpC,kCAAAA,oCAAAA,jFADb;AAEI,oBAAI,AAACpB,uBAAOwD,3CADd;oCAEiB,KAAAgI,gBAAA,1CAAR,iBAAMrM,hCAAX,IAAAuM;;eAA+B,fAAlB,eAAmBxI,fAAZ,IAAAuI,0BAAiBtI;QAAhB/D,oDAAAA,8DAAAA,1HAAD,AAAA,8GAAAqM,0CAAAA;;CAAP;AACN,AADF;;AAEI,GAAI,AAACtL,0BAAUhB,7BADjB;AAEI,gHAAA,zGAAC6F;;uBACA7F,vBAFH,OAAAe;;;;;QAFRsD,oCAAAA,8CAAAA,1FAAD,AAAA,8EAAAkI,0BAAAA;;AAKA,eAAO,iBAAAzI,WAAS,AAACC,eAAKC;AAAf,AAAA,oBACE,AAAA,uGAAU,AAACvD,eAAK4D;AAAM,0DAAAP,nDAACoI,+CAAO7H;;AADhCP;;;;;;;AARb;;;;;AAWF;;;;4CAGGE,1BAHH,lBAAM+H;AAIJ,IAAAvC,WAAQxF,fAJV;AAIE,AAAA,GAAA,CAAAwF,YAAA;AAAA;;AACQ,yDAAAA,yBAAA,yEAAA,pJAACkC,2DAAUC;;;0EAMlBnI,EAAEvC,5EADL,iCAAA,jCAAOkD;AAAP,AAAA,GAES,cAAWkJ,bAAI7J;AAFxB;AAAA,AAAA,MAAA,KAAA0C,MAAA;;;0FAGG,1FAHH;AAGG,AACE,wEAAA,mFAAA,3JAACR,yOAAoCC,iEAAKnC;;AAC1C,mCAAA,mFAAA,4EAAA,lMAAC/B,8PAA6CkC;;AAC9C,oBAAA,2CAAA,qDAAA,yEAAA,7LAACC,gPAAsCJ;;IAErC,QAACvC,kCAAAA,oCAAAA,lFADH,IAAA;gBAAA,QAAA+H,JAEkBpC;AAFlB,AAGI,IAAA6C,WAAM7C;IAAN6C,eAAA,EAAA,CAAAA,oBAAAvB,oBAAA,AAAAuB,aAAA;AAAA,AAAA,QAAAA;KAAA;AACmB,MAAA;;;;AACjB,2BAAA,2CAAA,qDAAA,uDAAA,2DAAA,wCAAA,6DAAA,KAAA,hVAAC7F,wYAISgD;;;IAClB;AACE,oBAAA,2CAAA,qDAAA,oEAAA,xLAAChD,2OAAoCJ,3OADvC;;AAEE,0CAAA,mFAAA,tHAAC/B,oMAAoCsC;;;AAE1C;;;;8DAGGP,nCAHH,3BAAMK;AAIJ,IAAAzD,qBAAW,AAAA,kFAAO,AAACK,eAAK+C,1HAJ1B;AAIE,AAAA,oBAAApD;AAAA,QAAAA,JAASa;AACP,OAACkD,+BAAgBX,EAAEvC,xCADrB;;AAAA;;;AAGF;;;;qBAAA,rBAAMwF,kDAGHjD;AAHH,AAIE,OAACvD,oBAAU,AAAC4D,yBAAeL;;AAE7B;;;;;gEAIGvB,pCAJH,5BAAO6G;AAKL,QAAC7G,kCAAAA,oCAAAA,9EALH;;AAOA;;;;;;6BAAA,7BAAM6C,kEAKHiD,GAAGC;AALN,AAME,kBAAKH;AAAL,AAAQ,IAAAC,WAAI;AAAA,AAAO,QAACE,mCAAAA,sCAAAA,LAAGH,kBAAAA;;AAAf,AAAA,4EAAAC,yBAAAA,7FAACC,mCAAAA,6CAAAA;;;AAEX;;;;;;4DAKGjH,lCALH,1BAAMsF;AAAN,AAME,OAACkD,+CAAOxE,2BAAiBgE,0BAAgBhI;;AAE3C;;;oEAEGuB,aAAa4G,nDAFhB,9BAAOmC;0OAKG,AAACjJ,kBAAQ,6CAAA,7CAACC,mGAAYC,/VAF9B,OAACiC,sDAAO,6CAAA,7CAAClC,uGAAaC,cACd4G,lLAJV;;AAOA,+BAAA,/BAAOT,sEAAoBC,KAAKC;AAAhC,AACE,oBAAA,uDAAwBvD;GAEZ,AAACD,uBAAOC,1BAFpB,AACU;AAAA;;GAEE,AAACyF,uBAAOC,qBAAK1F,/CAFf;AAAA;;GAGE,AAACyF,uBAAOK,oBAAI9F,9CAHd;AAAA;;AAAA;;;;;qBADV;AAQY,OAACkB,iDADD,+CAAA,iFAAA,hIAAC2D,yMADE,0DAAA,1DAACT,4CAAIa,iGAAe3B,KAAKC,nZANxC;;AASE,IAAAgB,aAAuB,AAACG,jBAT1B;WASE,AAAAvB,4CAAAoB,WAAA,IAAA,lEAAOC;YAAPD,RAAgBE;AAAhB,AACE,GAAQ,AAAC8C,yBAASC,qBAAK/C;AAAvB;AAAA,AAAA,MAAA,KAAA1D,MAAA,CAAA,kBAAA,qCAAA,KAAA;;;AAEA,GAAQ,CAAA,MAAK,AAACwB,gBAAMkC;AAApB;AAAA,AAAA,MAAA,KAAA1D,MAAA,CAAA,kBAAA,iEAAA,KAAA;;;AAEA,IAAA0F,WAAyBjC;IAAzBkC,WAAA;IAAAC,eAAA,2CAAA,mDAAA,uDAAA,kDAAA;AAAA,AAAA,QAAAA,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;AAEN,0BAAA,1BAAO1F,4DAAelE;AAAtB,AACE;AACE,IAAMoC,MAAI,CAACpC,kCAAAA,oCAAAA,jFADb;AACE,AACE,oBAAM,AAACpB,uBAAOwD;AACZ,MAAA,NADF;;AAAA;;AAEAA;;;AAEN;;;;gEAGGtE,pCAHH,5BAAMkE;AAAN,mDAKG,WAAAiF,9DADD,OAACK;AACA,AAAA,IAAAJ,aAAAD;SAAA,AAAAZ,4CAAAa,WAAA,IAAA,hEAAMC;eAAN,AAAAd,4CAAAa,WAAA,IAAA,tEAASpJ;AACP,AADF;;AACE,uBAEG,iBAAM6H,MAAI,AAACtH,9CADZ,OAACyL;IAEMP,gBAAc,mDAAA,mFAAA,tIAACzC,+CAAOnB,8JAAoBwB;IAC1CC,gBAAc,mDAAA,mFAAA,tIAACN,+CAAOnB,6JAAoBwB;AAFhD,AAGE,IAAAqC,WAAM,AAACjD,6BAAmBgD,cAAcnC;IAAxCoC,eAAA,EAAA,CAAAA,oBAAAvD,oBAAA,AAAAuD,aAAA;AAAA,AAAA,QAAAA;KAAA;+OAKqB5H,4OAHd9D,1aAEA,AAACmL,sDAAO,AAAC1K,6CAAK,AAAC2K,gDAAQC,4BAAkB/B,hOAEzC,OAAC+B,4BAAkBI,wRAHnB,AAACgB,+CAAO,6CAAA,7CAAChM,iGAAWC;;;KAH3B;AAQE,IAAMsG,kBAAgB,AAACX,wBAAciD;0FAClC,1FADH,AAAA;;AACG,eAEG,fADD,IAAA6D;;AAEG,IAAAlG,aAAA,AAAAC,cAAUlH,/BADZ;IACEmH,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,QAAA,AAAAD,kDAAAE,tDAAQ5D;AAAR,AAAA,AACE,IAAA6D,2BAAa,AAAA,kFAAO,AAAC5G,eAAK+C;AAA1B,AAAA,oBAAA6D;AAAA,AAAA,cAAAA,VAAWpG;AAET,IAAA4F,iBACC,rBAHH;;AAKK,OAAC5G,oBACA,AAACkE,+BAAgBX,EAAE,AAAC2C,wBAAclF,pFAHrC;;;AADD,AAAA,+FAAA4F,4CAAAA,1IAACE,gDAAAA,gEAAAA;;AAFH;;AADF;AAAA,eAAAC;eAAAE;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAC,qBAAA,AAAAJ,cAAAD;AAAA,AAAA,GAAAK;AAAA,AAAA,IAAAL,iBAAAK;AAAA,AAAA,GAAA,AAAAC,6BAAAN;AAAA,IAAAO,kBAAA,AAAAC,sBAAAR;AAAA,AAAA,eAAA,AAAAS,qBAAAT;eAAAO;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,QAAA,AAAA3F,gBAAAoF,pBAAQxD;AAAR,AAAA,AACE,IAAA6D,+BAAa,AAAA,kFAAO,AAAC5G,eAAK+C;AAA1B,AAAA,oBAAA6D;AAAA,AAAA,cAAAA,VAAWpG;AAET,IAAA6F,iBACC,rBAHH;;AAKK,OAAC7G,oBACA,AAACkE,+BAAgBX,EAAE,AAAC2C,wBAAclF,pFAHrC;;;AADD,AAAA,+FAAA6F,4CAAAA,1IAACC,gDAAAA,gEAAAA;;AAFH;;AADF;AAAA,eAAA,AAAAlF,eAAAmF;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;;IAFHmG,eAAC,AAAC/G,wBAAcoF;AAAhB,AAAA,QAAA2B,6CAAAA,2CAAAD,YAAAC,uBAAAD;;;;;;AAVP,MAAA,KAAAhH,MAAA,CAAA,mEAAAuF;;;;;;GAoBP,AAAClL,mBAAS,6CAAA,7CAACC,6FAASC,gBAAMV;;AAE7B;;;;;oDAIGA,9BAJH,tBAAMiL;6LAMgB,7LANtB,AAKE,OAAC/K,oBAAU,+EAAA,/EAACiM,+CAAO,AAACjI,0BAAgBlE;AAChB,AACE,IAAAiN,WAAA,2CAAA,qDAAA,wEAAA,sDAAoCjN;AAApC,AAAA,wGAAAiN,uCAAAA,vIAAC9M,iDAAAA,2DAAAA;;;AAKzB;;;;oEAGGkF,tCAHH,9BAAMgD;AAAN,AAIE,SAAK,qGAAA,pGAAO,AAAA,2FAAA,RAAOhD,2BACd,uGAAA,tGAAO,AAAA,6FAAA,RAAQA","names":["vars","d","cljs.test/run-block","cljs.test/report","m","temp__5455__auto__","source-map","cljs.test/get-current-env","cljs.core/group-by","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/meta","G__25002","cljs.core.get.cljs$core$IFn$_invoke$arity$2","depth","cljs.test/async?","fixtures","cljs.core/deref","cljs.core/realized?","t","cljs.test/get-and-clear-env!","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","cljs.test/update-current-env!","seq24968","G__24969","cljs.core/first","cljs.core/next","G__24970","self__4518__auto__","ks","f","args","cljs.core/reverse","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","map-fixtures","parts","stack-element","cljs.test/testing-contexts-str","js/cljs","js/cljs.test","js/cljs.test.report","method-table__4414__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4415__auto__","method-cache__4416__auto__","cached-hierarchy__4417__auto__","hierarchy__4418__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","mapping","cljs.test/js-filename","v","reporter","cljs.test/print-comparison","cljs.core/inc","cljs.test/do-report","cljs.test/test-var-block","G__25019","cljs.core/rest","fns","cljs.test/test-vars-block","cljs.test/inc-report-counter!","cljs.test/test-var-block*","exception","obj","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.test/mapped-line-and-column","filename","line","column","cljs.core/update-in","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.test/*current-env*","cljs.test/compose-fixtures","fname","cljs.test/file-and-line","G__24966","cljs.core/empty?","coll","summary","map__24975","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","file","cljs.test.update_current_env_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/conj","name","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","G__24986","formatter-fn","G__24965","cljs.test/empty-env","js/Error","cljs.test/disable-async","cljs.test/join-fixtures","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","default","cljs.test/IAsyncTest","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.test/test-var","and__3938__auto__","columns","e","G__25070","G__25076","each-fixture-fn","seq__25066","cljs.core/seq","chunk__25067","count__25068","i__25069","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.test/testing-vars-str","env","g","G__25043","f1","f2","G__25009","cljs.core/Keyword","cljs.core/pr-str","cljs.test/successful?","vec__25003","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__25006","cljs.test/execution-strategy","once","each","cljs.test/js-line-and-column","clojure.string/ends-with?","output-dir","cljs.test/default-fixture","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","e25028","block","p__25056","vec__25057","ns","each-fixtures","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$2","G__25027","G__25029","vec__25046","type","types","fixtures-types","cljs.core/name","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","js/parseInt","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cnt","fixtures-type","clojure.string/trim","message","p1__24974#","cljs.test/clear-env!","or__3949__auto__","cljs.core/native-satisfies?","x","cljs.core/every?","cljs.core/map?","cljs.test/set-env!","new-env","cljs.test/test-vars","cljs.core/fn?","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.test/wrap-map-fixtures","cljs.core/last","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","once-fixtures","G__25060","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__25050","G__25051","fexpr__25049","cljs.test/block","cljs.pprint/pprint","xs__6012__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/Delay","G__25017","G__25016","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","G__24985","cljs.core/not-any?","cljs.core/nil?","cljs.core/vec","G__25000","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","clojure.string/split-lines","G__25104","cljs.core/second","G__25064","fexpr__25063","cljs.test.empty_env.cljs$core$IFn$_invoke$arity$0","cljs.core/Var"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns\n^{:author \"Stuart Sierra, with contributions and suggestions by \n  Chas Emerick, Allen Rohner, Stuart Halloway, David Nolen, and\n  Leon Grapenthin\",\n     :doc \"A unit testing framework.\n\n   ASSERTIONS\n\n   The core of the library is the \\\"is\\\" macro, which lets you make\n   assertions of any arbitrary expression:\n\n   (is (= 4 (+ 2 2)))\n   (is (instance? Integer 256))\n   (is (.startsWith \\\"abcde\\\" \\\"ab\\\"))\n\n   You can type an \\\"is\\\" expression directly at the REPL, which will\n   print a message if it fails.\n\n       user> (is (= 5 (+ 2 2)))\n\n       FAIL in  (:1)\n       expected: (= 5 (+ 2 2))\n         actual: (not (= 5 4))\n       false\n\n   The \\\"expected:\\\" line shows you the original expression, and the\n   \\\"actual:\\\" shows you what actually happened.  In this case, it\n   shows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n   \\\"false\\\" on the last line is the value returned from the\n   expression.  The \\\"is\\\" macro always returns the result of the\n   inner expression.\n\n   There are two special assertions for testing exceptions.  The\n   \\\"(is (thrown? c ...))\\\" form tests if an exception of class c is\n   thrown:\n\n   (is (thrown? ArithmeticException (/ 1 0))) \n\n   \\\"(is (thrown-with-msg? c re ...))\\\" does the same thing and also\n   tests that the message on the exception matches the regular\n   expression re:\n\n   (is (thrown-with-msg? ArithmeticException #\\\"Divide by zero\\\"\n                         (/ 1 0)))\n\n   DOCUMENTING TESTS\n\n   \\\"is\\\" takes an optional second argument, a string describing the\n   assertion.  This message will be included in the error report.\n\n   (is (= 5 (+ 2 2)) \\\"Crazy arithmetic\\\")\n\n   In addition, you can document groups of assertions with the\n   \\\"testing\\\" macro, which takes a string followed by any number of\n   assertions.  The string will be included in failure reports.\n   Calls to \\\"testing\\\" may be nested, and all of the strings will be\n   joined together with spaces in the final report, in a style\n   similar to RSpec <http://rspec.info/>\n\n   (testing \\\"Arithmetic\\\"\n     (testing \\\"with positive integers\\\"\n       (is (= 4 (+ 2 2)))\n       (is (= 7 (+ 3 4))))\n     (testing \\\"with negative integers\\\"\n       (is (= -4 (+ -2 -2)))\n       (is (= -1 (+ 3 -4)))))\n\n   Note that, unlike RSpec, the \\\"testing\\\" macro may only be used\n   INSIDE a \\\"deftest\\\" form (see below).\n\n\n   DEFINING TESTS\n\n   (deftest addition\n     (is (= 4 (+ 2 2)))\n     (is (= 7 (+ 3 4))))\n\n   (deftest subtraction\n     (is (= 1 (- 4 3)))\n     (is (= 3 (- 7 4))))\n\n   This creates functions named \\\"addition\\\" and \\\"subtraction\\\", which\n   can be called like any other function.  Therefore, tests can be\n   grouped and composed, in a style similar to the test framework in\n   Peter Seibel's \\\"Practical Common Lisp\\\"\n   <http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html>\n\n   (deftest arithmetic\n     (addition)\n     (subtraction))\n\n   The names of the nested tests will be joined in a list, like\n   \\\"(arithmetic addition)\\\", in failure reports.  You can use nested\n   tests to set up a context shared by several tests.\n\n   DEFINING ASYNC TESTS\n\n   (deftest addition\n     (async done\n       (is (= 4 (+ 2 2)))\n       (is (= 7 (+ 3 4)))\n       (done)))\n\n   Async tests are constructed with the async macro. The first argument to\n   the macro is the test completion callback. The body of the async macro may\n   be any series of expressions. The completion callback must be invoked when\n   all assertions have run. There is no support for asynchronous coordination -\n   core.async is recommended for this. Note the body of the async test must be\n   truly asynchronous to avoid stack overflow.\n\n   RUNNING TESTS\n\n   Run tests with the function \\\"(run-tests namespaces...)\\\":\n\n   (run-tests 'your.namespace 'some.other.namespace)\n\n   If you don't specify any namespaces, the current namespace is\n   used.  To run all tests in all namespaces, use \\\"(run-all-tests)\\\".\n\n   By default, these functions will search for all tests defined in\n   a namespace and run them in an undefined order.  However, if you\n   are composing tests, as in the \\\"arithmetic\\\" example above, you\n   probably do not want the \\\"addition\\\" and \\\"subtraction\\\" tests run\n   separately.  In that case, you must define a special function\n   named \\\"test-ns-hook\\\" that runs your tests in the correct order:\n\n   (defn test-ns-hook []\n     (arithmetic))\n\n   \\\"run-tests\\\" also optionally takes a testing enviroment. A default\n   one is supplied for you by invoking \\\"empty-env\\\".  The test\n   environment contains everything needed to run tests including the\n   report results map. Fixtures must be present here if you want them\n   to run. Note that code that relies on \\\"test-ns\\\" will\n   automatically be supplied the appropriate defined fixtures.  For\n   example, this is done for you if you use \\\"run-tests\\\".\n\n   Note: test-ns-hook prevents execution of fixtures (see below).\n\n\n   OMITTING TESTS FROM PRODUCTION CODE\n\n   You can set the ClojureScript compiler build option\n   \\\":load-tests\\\" to false when loading or compiling code in\n   production.  This will prevent any tests from being created by\n   or \\\"deftest\\\".\n\n\n   FIXTURES\n\n   Fixtures allow you to run code before and after tests, to set up\n   the context in which tests should be run.\n\n   A fixture is a map of one or two functions that run code before and\n   after tests.  It looks like this:\n\n   {:before (fn []\n              Perform setup, establish bindings, whatever.\n              )\n    :after (fn []\n             Tear-down / clean-up code here.\n             )}\n\n   Both are optional and can be left out.\n\n   Fixtures are attached to namespaces in one of two ways.  \\\"each\\\"\n   fixtures are run repeatedly, once for each test function created\n   with \\\"deftest\\\".  \\\"each\\\" fixtures are useful for\n   establishing a consistent before/after state for each test, like\n   clearing out database tables.\n\n   \\\"each\\\" fixtures can be attached to the current namespace like this:\n   (use-fixtures :each fixture1 fixture2 ...)\n   The fixture1, fixture2 are just maps like the example above.\n   They can also be passed directly, like this:\n   (use-fixtures :each\n     {:before (fn [] setup...), :after (fn [] cleanup...)})\n\n   The other kind of fixture, a \\\"once\\\" fixture, is only run once,\n   around ALL the tests in the namespace.  \\\"once\\\" fixtures are useful\n   for tasks that only need to be performed once, like establishing\n   database connections, or for time-consuming tasks.\n\n   Attach \\\"once\\\" fixtures to the current namespace like this:\n   (use-fixtures :once fixture1 fixture2 ...)\n\n   Note: Fixtures and test-ns-hook are mutually incompatible.  If you\n   are using test-ns-hook, fixture functions will *never* be run.\n\n\n   WRAPPING FIXTURES\n\n   Instead of a map, a fixture can be specified like this:\n\n   (defn my-fixture [f]\n      Perform setup, establish bindings, whatever.\n     (f)  Then call the function we were passed.\n      Tear-down / clean-up code here.\n    )\n\n   This style is incompatible with async tests. If an async test is\n   encountered, testing will be aborted. It can't be mixed with\n   fixtures specified as maps.\n\n\n   EXTENDING TEST-IS (ADVANCED)\n\n   You can extend the behavior of the \\\"is\\\" macro by defining new\n   methods for the \\\"assert-expr\\\" multimethod.  These methods are\n   called during expansion of the \\\"is\\\" macro, so they should return\n   quoted forms to be evaluated.\n\n   You can plug in your own test-reporting framework by specifying a\n   :reporter key in the test environment. It is normally set to\n   :cljs.test/default. Set this to the desired key and supply custom\n   implementations of the \\\"report\\\" multimethod.\n\n   The 'event' argument is a map.  It will always have a :type key,\n   whose value will be a keyword signaling the type of event being\n   reported.  Standard events with :type value of :pass, :fail, and\n   :error are called when an assertion passes, fails, and throws an\n   exception, respectively.  In that case, the event will also have\n   the following keys:\n\n     :expected   The form that was expected to be true\n     :actual     A form representing what actually occurred\n     :message    The string message given as an argument to 'is'\n\n   The \\\"testing\\\" strings will be a list in the :testing-contexts\n   property of the test environment, and the vars being tested will be\n   a list in the :testing-vars property of the test environment.\n\n   For additional event types, see the examples in the code.\n\"}\n  cljs.test\n  (:require-macros [clojure.template :as temp]\n                   [cljs.test :as test])\n  (:require [clojure.string :as string]\n            [cljs.pprint :as pprint]))\n\n;; =============================================================================\n;; Default Reporting\n\n(defn empty-env\n  \"Generates a testing environment with a reporter.\n   (empty-env) - uses the :cljs.test/default reporter.\n   (empty-env :cljs.test/pprint) - pretty prints all data structures. \n   (empty-env reporter) - uses a reporter of your choosing.\n\n   To create your own reporter see cljs.test/report\"\n  ([] (empty-env ::default))\n  ([reporter]\n   (cond-> {:report-counters {:test 0 :pass 0 :fail 0 :error 0}\n            :testing-vars ()\n            :testing-contexts ()\n            :formatter pr-str\n            :reporter reporter}\n     (= ::pprint reporter) (assoc :reporter ::default\n                             :formatter pprint/pprint))))\n\n(def ^:dynamic *current-env* nil)\n\n(defn get-current-env []\n  (or *current-env* (empty-env)))\n\n(defn update-current-env! [ks f & args]\n  (set! *current-env* (apply update-in (get-current-env) ks f args)))\n\n(defn set-env! [new-env]\n  (set! *current-env* new-env))\n\n(defn clear-env! []\n  (set! *current-env* nil))\n\n(defn get-and-clear-env! []\n  \"Like get-current-env, but cleans env before returning.\"\n  (let [env (cljs.test/get-current-env)]\n    (clear-env!)\n    env))\n\n(defn testing-vars-str\n  \"Returns a string representation of the current test.  Renders names\n  in *testing-vars* as a list, then the source file and line of\n  current assertion.\"\n  [m]\n  (let [{:keys [file line column]} m]\n    (str\n      (reverse (map #(:name (meta %)) (:testing-vars (get-current-env))))\n      \" (\" file \":\" line (when column (str \":\" column)) \")\")))\n\n(defn testing-contexts-str\n  \"Returns a string representation of the current test context. Joins\n  strings in *testing-contexts* with spaces.\"\n  []\n  (apply str (interpose \" \" (reverse (:testing-contexts (get-current-env))))))\n\n(defn inc-report-counter!\n  \"Increments the named counter in *report-counters*, a ref to a map.\n  Does nothing if *report-counters* is nil.\"\n  [name]\n  (if (:report-counters (get-current-env))\n    (update-current-env! [:report-counters name] (fnil inc 0))))\n\n(defmulti\n  ^{:doc \"Generic reporting function, may be overridden to plug in\n   different report formats (e.g., TAP, JUnit).  Assertions such as\n   'is' call 'report' to indicate results.  The argument given to\n   'report' will be a map with a :type key.\"\n     :dynamic true}\n  report (fn [m] [(:reporter (get-current-env)) (:type m)]))\n\n(defmethod report :default [m])\n\n(defmethod report [::default :pass] [m]\n  (inc-report-counter! :pass))\n\n(defn- print-comparison [m]\n  (let [formatter-fn (or (:formatter (get-current-env)) pr-str)]\n    (println \"expected:\" (formatter-fn (:expected m)))\n    (println \"  actual:\" (formatter-fn (:actual m)))))\n\n(defmethod report [::default :fail] [m]\n  (inc-report-counter! :fail)\n  (println \"\\nFAIL in\" (testing-vars-str m))\n  (when (seq (:testing-contexts (get-current-env)))\n    (println (testing-contexts-str)))\n  (when-let [message (:message m)] (println message))\n  (print-comparison m))\n\n(defmethod report [::default :error] [m]\n  (inc-report-counter! :error)\n  (println \"\\nERROR in\" (testing-vars-str m))\n  (when (seq (:testing-contexts (get-current-env)))\n    (println (testing-contexts-str)))\n  (when-let [message (:message m)] (println message))\n  (print-comparison m))\n\n(defmethod report [::default :summary] [m]\n  (println \"\\nRan\" (:test m) \"tests containing\"\n    (+ (:pass m) (:fail m) (:error m)) \"assertions.\")\n  (println (:fail m) \"failures,\" (:error m) \"errors.\"))\n\n(defmethod report [::default :begin-test-ns] [m]\n  (println \"\\nTesting\" (name (:ns m))))\n\n;; Ignore these message types:\n(defmethod report [::default :end-test-ns] [m])\n(defmethod report [::default :begin-test-var] [m]\n  #_(println \":begin-test-var\" (testing-vars-str m)))\n(defmethod report [::default :end-test-var] [m])\n(defmethod report [::default :end-run-tests] [m])\n(defmethod report [::default :end-test-all-vars] [m])\n(defmethod report [::default :end-test-vars] [m])\n\n;; =============================================================================\n;; File, Line, and Column Helpers\n\n(defn js-line-and-column [stack-element]\n  \"Returns a 2-element vector containing the line and\n  column encoded at the end of a stack element string.\n  A line or column will be represented as NaN if not\n  parsesable.\"\n  (let [parts (.split stack-element \":\")\n        cnt   (count parts)]\n    (if (> cnt 1)\n      [(js/parseInt (nth parts (- cnt 2)) 10)\n       (js/parseInt (nth parts (dec cnt)) 10)]\n      [##NaN ##NaN])))\n\n(defn js-filename [stack-element]\n  (let [output-dir (cljs.test/cljs-output-dir)\n        output-dir (cond-> output-dir\n                     (not (string/ends-with? output-dir \"/\"))\n                     (str \"/\"))]\n    (-> (.split stack-element output-dir)\n      last\n      (.split \":\")\n      first)))\n\n(defn mapped-line-and-column [filename line column]\n  (let [default [filename line column]]\n    (if-let [source-map (:source-map (get-current-env))]\n      ;; source maps are 0 indexed for lines\n      (if-let [columns (get-in source-map [filename (dec line)])]\n        (vec\n          (map\n            ;; source maps are 0 indexed for columns\n            ;; multiple segments may exist at column\n            ;; just take first\n            (first\n              (if-let [mapping (get columns (dec column))]\n                mapping\n                (second (first columns))))\n            [:source :line :col]))\n        default)\n      default)))\n\n(defn file-and-line [exception depth]\n  ;; TODO: flesh out\n  (if-let [stack-element (and (string? (.-stack exception))\n                              (some-> (.-stack exception)\n                                      string/split-lines\n                                      (get depth)\n                                      string/trim))]\n    (let [fname (js-filename stack-element)\n          [line column] (js-line-and-column stack-element)\n          [fname line column] (mapped-line-and-column fname line column)]\n      {:file fname :line line :column column})\n    {:file (.-fileName exception)\n     :line (.-lineNumber exception)}))\n\n(defn do-report [m]\n  (let [m (case (:type m)\n            :fail (merge (file-and-line (js/Error.) 4) m)\n            :error (merge (file-and-line (:actual m) 0) m)\n            m)]\n    (report m)))\n\n;; =============================================================================\n;; Async\n\n(defprotocol IAsyncTest\n  \"Marker protocol denoting CPS function to begin asynchronous\n  testing.\")\n\n(defn async?\n  \"Returns whether x implements IAsyncTest.\"\n  [x]\n  (satisfies? IAsyncTest x))\n\n(defn run-block\n  \"Invoke all functions in fns with no arguments. A fn can optionally\n  return\n\n  an async test - is invoked with a continuation running left fns\n\n  a seq of fns tagged per block - are invoked immediately after fn\"\n  [fns]\n  (when-first [f fns]\n    (let [obj (f)]\n      (if (async? obj)\n        (obj (let [d (delay (run-block (rest fns)))]\n               (fn []\n                 (if (realized? d)\n                   (println \"WARNING: Async test called done more than one time.\")\n                   @d))))\n        (recur (cond->> (rest fns)\n                 (::block? (meta obj)) (concat obj)))))))\n\n(defn block\n  \"Tag a seq of fns to be picked up by run-block as injected\n  continuation.  See run-block.\"\n  [fns]\n  (some-> fns\n          (vary-meta assoc ::block? true)))\n\n;; =============================================================================\n;; Low-level functions\n\n(defn- test-var-block*\n  [v t]\n  {:pre [(instance? Var v)]}\n  [(fn []\n     (update-current-env! [:testing-vars] conj v)\n     (update-current-env! [:report-counters :test] inc)\n     (do-report {:type :begin-test-var :var v})\n     (try\n       (t)\n       (catch :default e\n         (case e\n           ::async-disabled (throw \"Async tests require fixtures to be specified as maps.  Testing aborted.\")\n           (do-report\n            {:type :error\n             :message \"Uncaught exception, not in assertion.\"\n             :expected nil\n             :actual e})))))\n   (fn []\n     (do-report {:type :end-test-var :var v})\n     (update-current-env! [:testing-vars] rest))])\n\n(defn test-var-block\n  \"Like test-var, but returns a block for further composition and\n  later execution.\"\n  [v]\n  (if-let [t (:test (meta v))]\n    (test-var-block* v t)))\n\n(defn test-var\n  \"If v has a function in its :test metadata, calls that function,\n  add v to :testing-vars property of env.\"\n  [v]\n  (run-block (test-var-block v)))\n\n(defn- default-fixture\n  \"The default, empty, fixture function.  Just calls its argument.\n\n  NOTE: Incompatible with map fixtures.\"\n  [f]\n  (f))\n\n(defn compose-fixtures\n  \"Composes two fixture functions, creating a new fixture function\n  that combines their behavior.\n\n  NOTE: Incompatible with map fixtures.\"\n  [f1 f2]\n  (fn [g] (f1 (fn [] (f2 g)))))\n\n(defn join-fixtures\n  \"Composes a collection of fixtures, in order.  Always returns a valid\n  fixture function, even if the collection is empty.\n\n  NOTE: Incompatible with map fixtures.\"\n  [fixtures]\n  (reduce compose-fixtures default-fixture fixtures))\n\n(defn- wrap-map-fixtures\n  \"Wraps block in map-fixtures.\"\n  [map-fixtures block]\n  (concat (keep :before map-fixtures)\n          block\n          (reverse (keep :after map-fixtures))))\n\n(defn- execution-strategy [once each]\n  (letfn [(fixtures-type [coll]\n            (cond\n              (empty? coll) :none\n              (every? map? coll) :map\n              (every? fn? coll) :fn))\n          (fixtures-types []\n            (->> (map fixtures-type [once each])\n              (remove #{:none})\n              (distinct)))]\n    (let [[type :as types] (fixtures-types)]\n      (assert (not-any? nil? types)\n        \"Fixtures may not be of mixed types\")\n      (assert (> 2 (count types))\n        \"fixtures specified in :once and :each must be of the same type\")\n      ({:map :async :fn :sync} type :async))))\n\n(defn- disable-async [f]\n  (fn []\n    (let [obj (f)]\n      (when (async? obj)\n        (throw ::async-disabled))\n      obj)))\n\n(defn test-vars-block\n  \"Like test-vars, but returns a block for further composition and\n  later execution.\"\n  [vars]\n  (map\n   (fn [[ns vars]]\n     (fn []\n       (block\n        (let [env (get-current-env)\n              once-fixtures (get-in env [:once-fixtures ns])\n              each-fixtures (get-in env [:each-fixtures ns])]\n          (case (execution-strategy once-fixtures each-fixtures)\n            :async\n            (->> vars\n                 (filter (comp :test meta))\n                 (mapcat (comp (partial wrap-map-fixtures each-fixtures)\n                               test-var-block))\n                 (wrap-map-fixtures once-fixtures))\n            :sync\n            (let [each-fixture-fn (join-fixtures each-fixtures)]\n              [(fn []\n                 ((join-fixtures once-fixtures)\n                  (fn []\n                    (doseq [v vars]\n                      (when-let [t (:test (meta v))]\n                        ;; (alter-meta! v update :test disable-async)\n                        (each-fixture-fn\n                         (fn []\n                           ;; (test-var v)\n                           (run-block\n                            (test-var-block* v (disable-async t))))))))))]))))))\n   (group-by (comp :ns meta) vars)))\n\n(defn test-vars\n  \"Groups vars by their namespace and runs test-vars on them with\n  appropriate fixtures assuming they are present in the current\n  testing environment.\"\n  [vars]\n  (run-block (concat (test-vars-block vars)\n                     [(fn []\n                        (report {:type :end-test-vars :vars vars}))])))\n\n;; =============================================================================\n;; Running Tests, high level functions\n\n(defn successful?\n  \"Returns true if the given test summary indicates all tests\n  were successful, false otherwise.\"\n  [summary]\n  (and (zero? (:fail summary 0))\n       (zero? (:error summary 0))))\n"]}