{"version":3,"file":"cljs_promises.async.js","sources":["cljs_promises/async.cljs"],"mappings":"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","names":["promise","js/cljs-promises","js/cljs-promises.async","js/cljs-promises.async.t_cljs_promises$async16632","cljs-promises.async/t_cljs_promises$async16632","_16634","meta16633","cljs.core/PROTOCOL_SENTINEL","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","cljs-promises.async/->t_cljs_promises$async16632","cljs-promises.async/pair-port","promise-constructor","cljs-promises.async/error-port","cljs.core.async.impl.dispatch/run","fexpr__16641","cljs.core.async.impl.protocols/commit","handler","cljs-promises.async/take-as-promise!","G__16691","fexpr__16690","val","_","cljs-promises.core/promise","resolve","value-transform","p__16611","vec__16612","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs-promises.async/consume-pair","err","error-transform","G__16602","fexpr__16601","cljs-promises.async/value-port","js/cljs-promises.async.t_cljs_promises$async16686","cljs-promises.async/t_cljs_promises$async16686","_16688","meta16687","cljs-promises.async/->t_cljs_promises$async16686","var_args","G__16609","cljs-promises.async/extend-promises-as-pair-channels!","js/Error","G__16600","fexpr__16599","cljs_promises.async.extend_promises_as_channels_BANG_.cljs$core$IFn$_invoke$arity$3","G__16593","cljs-promises.async/extend-promises-as-channels!","ch","js/cljs-promises.async.t_cljs_promises$async16675","cljs-promises.async/t_cljs_promises$async16675","_16677","meta16676","cljs-promises.async/->t_cljs_promises$async16675","G__16709","fexpr__16708","fexpr__16679","cljs_promises.async.extend_promises_as_channels_BANG_.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","cljs_promises.async.extend_promises_as_channels_BANG_.cljs$core$IFn$_invoke$arity$2","fexpr__16678","js/Promise","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","fexpr__16640","cljs_promises.async.extend_promises_as_pair_channels_BANG_.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns cljs-promises.async\n  (:require [cljs.core.async :as async]\n            [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs-promises.core]))\n\n(defn extend-promises-as-channels!\n  \"If you want, you can globally extend Promise to act as a one-way channel which\n  can only be taken from, and which starts producing a never-ending stream of constants\n  once the promise resolves. `value-transform` and `error-transform` are functions\n  which are applied to the value or error when the Promise resolves or rejects.\n  Both `value-transform` and `error-transform` default to identity. Takes an optional\n  `promise-constructor` to extend, defaulting to `js/Promise`.\"\n  ([]\n   (extend-promises-as-channels! identity))\n  ([value-transform]\n   (extend-promises-as-channels! value-transform identity))\n  ([value-transform error-transform]\n   (extend-promises-as-channels! value-transform error-transform js/Promise))\n  ([value-transform error-transform promise-constructor]\n   (extend-type promise-constructor\n     impl/ReadPort\n     (take! [promise handler]\n       (.then promise\n              ;; `cljs.core.async.impl.dispatch/run` runs the handler in the next\n              ;; run of the event loop, making it possible here for errors avoid\n              ;; promises' error capturing. Otherwise, errors from the promise can\n              ;; never escape `go` blocks.\n              (fn [val]\n               (dispatch/run #((impl/commit handler) (value-transform val))))\n              (fn [err]\n               (dispatch/run #((impl/commit handler) (error-transform err)))))\n       nil) ;; return nil to say \"we're waiting on the value\"\n     impl/Channel\n     (close! [_]))))\n\n(defn extend-promises-as-pair-channels!\n  \"Globally extends Promises with `extend-promises-as-channels!` such that the\n  values taken from them are vector pairs of [value nil] in the case of fulfillment,\n  or [nil error] in the case of rejection. Takes an optional `promise-constructor`\n  to extend, defaulting to `js/Promise`.\"\n  ([]\n   (extend-promises-as-pair-channels! js/Promise))\n  ([promise-constructor]\n   (extend-promises-as-channels! (fn [val] [val nil])\n                                 (fn [err] [nil err])\n                                 promise-constructor)))\n\n(defn consume-pair\n  \"When passed a [value nil] pair, returns value. When passed a [nil error] pair,\n  throws error. See also `cljs-promises.async/<?`.\"\n  [[val err]]\n  (if err\n    (throw err)\n    val))\n\n(defn value-port\n  \"Wraps a promise and returns a ReadPort (a read-only channel-like). When the\n  promise fulfills with a value, that value is sent constantly on the channel\n  (the value might be nil). When the promise rejects with an error, nil is sent\n  constantly.\"\n  [promise]\n  (reify\n    impl/ReadPort\n    (take! [_ handler]\n      (.then promise\n             (fn [val]\n               (dispatch/run #((impl/commit handler) val)))\n             (fn [_]\n               (dispatch/run #((impl/commit handler) nil))))\n      nil)))\n\n(defn error-port\n  \"The reverse of `value-port`, passing along errors when `promise` rejects and sending\n  nils when `promise` fulfills with a value.\"\n  [promise]\n  (reify\n    impl/ReadPort\n    (take! [_ handler]\n      (.then promise\n             (fn [_]\n               (dispatch/run #((impl/commit handler) nil)))\n             (fn [err]\n               (dispatch/run #((impl/commit handler) err))))\n      nil)))\n\n(defn pair-port\n  \"Returns a ReadPort which sends [value nil] when `promise` fulfills, and [nil error]\n  when `promise` rejects.\"\n  [promise]\n  (reify\n    impl/ReadPort\n    (take! [_ handler]\n      (.then promise\n             (fn [val]\n               (dispatch/run #((impl/commit handler) [val nil])))\n             (fn [err]\n               (dispatch/run #((impl/commit handler) [nil err]))))\n      nil)))\n\n\n(defn take-as-promise!\n  \"Waits for the next value from `ch` and returns a promise of that value.\"\n  [ch]\n  (cljs-promises.core/promise (fn [resolve _]\n                                (async/take! ch resolve))))\n"]}