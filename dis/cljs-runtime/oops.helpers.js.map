{"version":3,"file":"oops.helpers.js","sources":["oops/helpers.cljs"],"mappings":";;AAKA,mCAAA,nCAAMwC,8EAAe1B;AACnB,QAAY,AAAa,AAAeA,4BAAIA,pCAD9C;;AAGA,+BAAA,/BAAMsB,sEAAiBtB;AACrB,UAAA,FAAgBA,RADlB;;AAQA,gCAAA,hCAAMqB,wEAAYD;AAChB,IAAAT,oBAAK,AAACC,cAAcQ,tCADtB;AACE,AAAA,oBAAAT;AAAA,IAAAA,wBACK,AAACsB,cAAI,AAACP,iCAAcN;AADzB,AAAA,GAAAT;AAEK,UAAA,FAAgBS;;AAFrBT;;;AAAAA;;;AAIF,oCAAA,pCAAMT,gFAAgBC;AAAtB,AACE,IAAAQ,oBAAK,AAACC,cAAcT;AAApB,AAAA,oBAAAQ;AACK,OAACU,8BAAW,AAACC,6BAAgBnB;;AADlCQ;;;AAGF,+BAAA,/BAAMQ,sEAAiB/B;AAAvB,AACE,GAAI,AAAC0C,uBAAO1C;AACVA;;AACA,IAAMmB,MAAI;AACR,IAAOD,QAAM,AAACS,cAAI3B,1BADpB;;AACE,AACE,GAAI,EAAA,UAAA,TAAOkB;AACT,IAAMF,OAAK,AAACC,iBAAOC;AAAnB,AACE,AAAOC,SAAIH;;AACX,eAAO,AAACM,eAAKJ;;;;AACfC;;;;;;AAEV,+BAAA,/BAAMM,sEAAiBrB,MAAMC,IAAIE;AAAjC,AACE;AACA;AACA,AAAM,AAAWH,gBAAOC;;AACxB,IAAAe,SAAUhB;AAAV,AAAA,AAAA,AAAA,AAAAgB,qCAAAC;;AAAA,AAAA,AAAAD,uDAEE;kBAAa0B,KAAKtC,OAAOC;AAAzB,AAAA,eAAA,XAAaqC;AACX,AAACpB,iBAAOlB,OAAOH,xBADjB;;AAEE,GAAM,EAAA,SAAA,RAAOE;AAAb,AACE,wBAAA,xBAACmB,iBAAOlB;;AACR,OAACF,oBAAUC,KAAKC,OAAOC;;AAFzB;;;;;AAJJW;;AAQF,uCAAA,vCAAMV,sFAAyBX,IAAIY;AAAnC,AACE,IAAOC,IAAEb;;AACP,GAAM,EAAA,MAAA,LAAOa,NADf;AACE,AACE,IAAAgB,qBAAqB,AAA2BE,gCAAUlB,EAAED;AAA5D,AAAA,GAAA,CAAAiB,sBAAA;AAEE,eAAO,AAAiBE,sBAAUlB;;;;AAFpC,iBAAAgB,bAAUC;AAAV,AACEA;;;AAFJ;;;;;AAKJ,sDAAA,tDAAM3B,oHAAwCD;AAA9C,AAWE,oBAAI,mCAAA,nCAAiBA;AACnB,GAAI,AAAQ,AAAYA;AAAxB;;AAAA;;;AAEA,GAAI,4BAAA,3BAAM,AAAOA;AAAjB;;AAAA;;;;AAGJ,uCAAA,vCAAMH,sFAAmBC;AAAzB,AACE,OAAW+B,gBAAU/B;;AAEvB,uCAAA,vCAAMc,sFAAmBd;AAAzB,AACE,OAAW+B,gBAAU/B;;AAEvB,kDAAA,lDAAMyC,4GAAoCC,YAAMtC;AAAhD,AACE,IAAAyC,mBAAI,+BAAA,bAAMH,aACJ,iBAAAN,qBAAqB,aAAA,ZAA6BY;AAAlD,AAAA,GAAA,CAAAZ,sBAAA;AAAA;;AAAA,eAAAA,XAAYQ;AACV,IAAAR,yBAAoB,UAAA,TAA6BQ,9BADnD;AACE,AAAA,GAAA,CAAAR,0BAAA;AAAA;;AAAA,cAAAA,VAAYE;AACV,IAAAF,yBAAqB,SAAA,RAA6BE,9BADpD;AACE,AAAA,GAAA,CAAAF,0BAAA;AAAA;;AAAA,eAAAA,XAAYC;AAAZ,AACE,GAAM,AAACG,oBAAcH;AAArB,AACE,6FAAA,qCAAA,1HAACA,yCAAAA,yDAAAA,lBAASjC,qCAAAA;;AADZ;;;;;KAJR;AAAJ,AAAA,oBAAAyC;AAAAA;;AAMIzC","names":["oops.helpers/is-object-sealed?","obj","coll","property-descriptor","oops.helpers/determine-property-non-writable-reason","data","error","msg","cljs.core/pr-writer","info","writer","opts","oops.helpers/get-property-descriptor","property","o","oops.helpers/is-object-frozen?","oops.helpers/cljs-instance?","value","item","cljs.core/-first","items","arr","x21784","cljs.core/PROTOCOL_SENTINEL","cljs.core/next","and__3938__auto__","goog/isObject","oops.helpers/repurpose-error","cljs.core/-write","cljs.core/seq","temp__5459__auto__","descriptor","js/Object","oops.helpers/to-native-array","f","oops.helpers/cljs-type?","oops.helpers/get-constructor","temp__5461__auto__","envelope","toolbox","oops.helpers/is-prototype?","cljs.core/fn?","oops.helpers/wrap-data-in-enveloper-if-possible","wrap?","cljs.core/array?","devtools","or__3949__auto__","cljs.core/not","_obj","goog/global"],"sourcesContent":["(ns oops.helpers\n  \"Various helpers to be available to our code at runtime.\"\n  (:require-macros [oops.helpers :refer [unchecked-aget]]\n                   [oops.debug :refer [debug-assert]]))\n\n(defn is-prototype? [o]\n  (identical? (.-prototype (.-constructor o)) o))\n\n(defn get-constructor [o]\n  (unchecked-aget o \"constructor\"))\n\n; IRC #clojurescript @ freenode.net on 2015-01-27:\n; [13:40:09] darwin_: Hi, what is the best way to test if I'm handled ClojureScript data value or plain javascript object?\n; [14:04:34] dnolen: there is a very low level thing you can check\n; [14:04:36] dnolen: https://github.com/clojure/clojurescript/blob/c2550c4fdc94178a7957497e2bfde54e5600c457/src/clj/cljs/core.clj#L901\n; [14:05:00] dnolen: this property is unlikely to change - still it's probably not something anything anyone should use w/o a really good reason\n(defn cljs-type? [f]\n  (and (goog/isObject f)                                                                                                      ; see http://stackoverflow.com/a/22482737/84283\n       (not (is-prototype? f))\n       (unchecked-aget f \"cljs$lang$type\")))\n\n(defn cljs-instance? [value]\n  (and (goog/isObject value)                                                                                                  ; see http://stackoverflow.com/a/22482737/84283\n       (cljs-type? (get-constructor value))))\n\n(defn to-native-array [coll]\n  (if (array? coll)\n    coll\n    (let [arr (array)]\n      (loop [items (seq coll)]                                                                                                ; note: items is either a seq or nil\n        (if (some? items)\n          (let [item (-first items)]\n            (.push arr item)\n            (recur (next items)))\n          arr)))))\n\n(defn repurpose-error [error msg info]\n  (debug-assert (instance? js/Error error))\n  (debug-assert (string? msg))\n  (set! (.-message error) msg)\n  (specify! error\n    IPrintWithWriter                                                                                                          ; nice to have for cljs-devtools and debug printing\n    (-pr-writer [_obj writer opts]\n      (-write writer msg)\n      (when (some? info)\n        (-write writer \" \")\n        (pr-writer info writer opts)))))\n\n(defn get-property-descriptor [obj property]\n  (loop [o obj]\n    (when (some? o)\n      (if-some [descriptor (.getOwnPropertyDescriptor js/Object o property)]\n        descriptor\n        (recur (.getPrototypeOf js/Object o))))))\n\n(defn determine-property-non-writable-reason [property-descriptor]\n  ; this gets a bit more tricky...\n  ;\n  ; there are two kinds of property descriptors\n  ; 1) data property descriptors\n  ; 2) accessor property descriptors\n  ; only data descriptors have writable flag present\n  ; see https://abdulapopoola.com/2016/11/21/deep-dive-into-javascript-property-descriptors\n  ;\n  ; we first check for \"writable\" property presence and test it only if it exists\n  ; otherwise we assume accessor property is writable if it has some setter method\n  (if (.hasOwnProperty property-descriptor \"writable\")\n    (if (false? (.-writable property-descriptor))\n      \"data property descriptor has writable=false\")\n    (if (nil? (.-set property-descriptor))\n      \"accessor property descriptor has neither writable flag nor a setter function\")))\n\n(defn is-object-sealed? [obj]\n  (.isSealed js/Object obj))\n\n(defn is-object-frozen? [obj]\n  (.isFrozen js/Object obj))\n\n(defn wrap-data-in-enveloper-if-possible [wrap? data]\n  (or (when wrap?\n        (when-some [devtools (oops.helpers/unchecked-aget goog/global \"devtools\")]\n          (when-some [toolbox (oops.helpers/unchecked-aget devtools \"toolbox\")]\n            (when-some [envelope (oops.helpers/unchecked-aget toolbox \"envelope\")]\n              (when (cljs.core/fn? envelope)\n                (envelope data \"details\"))))))\n      data))\n"]}