{"version":3,"sources":["linked/set.cljc"],"sourcesContent":["(ns linked.set\n  (:require [linked.map :refer [empty-linked-map]]\n            [clojure.string :as string]\n    #?(:cljs [cljs.reader :as reader]))\n  #?(:clj\n     (:import (clojure.lang Counted\n                            IObj\n                            IFn\n                            IHashEq\n                            ILookup\n                            IPersistentCollection\n                            IPersistentSet\n                            IPersistentVector\n                            Reversible\n                            Seqable\n                            SeqIterator)\n              (java.util Set)\n              (java.lang Iterable))))\n\n(declare empty-linked-set)\n\n(deftype LinkedSet [linked-map]\n  #?@(:clj\n      [IPersistentSet\n       (disjoin [_ k]\n         (LinkedSet. (dissoc linked-map k)))\n       (contains [_ k]\n         (contains? linked-map k))\n       (get [this k]\n         (when (.contains this k) k))\n\n       Set\n       (size [this]\n         (.count this))\n\n       Iterable\n       (iterator [this]\n         (SeqIterator. (.seq this)))\n\n       Counted\n\n       IPersistentCollection\n       (count [_]\n         (count linked-map))\n       (cons [this o]\n         (if (contains? linked-map o)\n           this\n           (LinkedSet. (assoc linked-map o nil))))\n       (empty [_]\n         empty-linked-set)\n       (equiv [this other]\n         (or (identical? this other)\n             (and (instance? Set other)\n                  (let [^Set s other]\n                    (and (= (.size this) (.size s))\n                         (every? #(.contains s %) (.seq this)))))))\n       Seqable\n       (seq [_]\n         (when-let [s (seq linked-map)] (map key s)))\n\n       Reversible\n       (rseq [_]\n         (when-let [s (rseq linked-map)] (map key s)))\n\n       IFn\n       (invoke [this k]\n         (get this k))\n\n       IObj\n       (meta [this]\n         (.meta ^IObj linked-map))\n       (withMeta [this m]\n         (LinkedSet. (.withMeta ^IObj linked-map m)))\n\n       IHashEq\n       (hasheq [this] (.hasheq ^IHashEq (into #{} this)))\n\n       Object\n       (toString [this]\n         (str \"[\" (string/join \" \" (map str this)) \"]\"))\n       (hashCode [this]\n         (.hashCode ^Object (into #{} this)))\n       (equals [this other]\n         (.equiv this other))]\n      :cljs\n      [Object\n       (toString [this]\n                 (str \"[\" (string/join \" \" (map str this)) \"]\"))\n       (equiv [this other]\n              (-equiv this other))\n\n       ICloneable\n       (-clone [_] (LinkedSet. linked-map))\n\n       IWithMeta\n       (-with-meta [coll meta] (LinkedSet. (with-meta linked-map meta)))\n\n       IMeta\n       (-meta [coll] (meta linked-map))\n\n       ICollection\n       (-conj [coll o]\n              (LinkedSet. (assoc linked-map o nil)))\n\n       IEmptyableCollection\n       (-empty [coll] (with-meta empty-linked-set meta))\n\n       IEquiv\n       (-equiv [coll other]\n               (and\n                 (set? other)\n                 (== (count coll) (count other))\n                 (every? #(contains? coll %)\n                         other)))\n\n       IHash\n       (-hash [coll] (hash (into #{} coll)))\n\n       ISeqable\n       (-seq [coll] (when-let [s (seq linked-map)] (map key s)))\n\n       IReversible\n       (-rseq [coll] (when-let [s (rseq linked-map)] (map key s)))\n\n       ISequential\n\n       ICounted\n       (-count [coll] (-count linked-map))\n\n       ILookup\n       (-lookup [coll v]\n                (-lookup coll v nil))\n       (-lookup [coll v not-found]\n                (if (-contains-key? linked-map v)\n                  v\n                  not-found))\n\n       ISet\n       (-disjoin [coll v]\n                 (LinkedSet. (-dissoc linked-map v)))\n\n       IFn\n       (-invoke [coll k]\n                (-lookup coll k))\n       (-invoke [coll k not-found]\n                (-lookup coll k not-found))\n\n       ;; IEditableCollection\n\n       IPrintWithWriter\n       (-pr-writer [coll writer opts]\n                   (-write writer (str \"#linked/set \" (into [] coll))))]))\n\n#?(:clj\n   (defmethod print-method LinkedSet [o ^java.io.Writer w]\n     (.write w \"#linked/set \")\n     (print-method (into [] o) w)))\n\n(def ^{:tag LinkedSet} empty-linked-set\n  (LinkedSet. empty-linked-map))\n\n(def ->linked-set (partial into empty-linked-set))\n\n#?(:cljs (reader/register-tag-parser! 'linked/set ->linked-set))\n"],"mappings":"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","names":["self__","cljs.core/aclone","args12134","cljs.core/-write","writer__4291__auto__","linked.set/LinkedSet","linked.set/->LinkedSet","linked-map","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","this","other","cljs.core/with-meta","meta","cljs.core/meta","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","o","linked.set/empty-linked-set","cljs.core/set?","cljs.core/count","coll","cljs.core/every?","p1__12133#","cljs.core/contains?","cljs.core/hash","cljs.core.into.cljs$core$IFn$_invoke$arity$2","temp__5457__auto__","cljs.core/seq","cljs.core/key","s","cljs.core/rseq","cljs.core/-count","v","cljs.core/-contains-key?","not-found","cljs.core/-dissoc","k","writer","linked.map/empty-linked-map","linked.set/->linked-set","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/into","cljs.reader/register-tag-parser!"]}