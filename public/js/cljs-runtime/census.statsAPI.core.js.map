{"version":3,"sources":["census/statsAPI/core.cljs"],"sourcesContent":["(ns census.statsAPI.core\r\n  (:require\r\n    [cljs.core.async    :refer [>! <! chan promise-chan close! take! to-chan\r\n                                pipeline timeout put!]\r\n     :refer-macros [go alt!]]\r\n    [cuerdas.core       :refer [join numeric? parse-number]]\r\n    [net.cgrand.xforms  :as x]\r\n    ;[census.wmsAPI.core :refer [Icb<-wms-args<<=IO=]]\r\n    [census.utils.core  :refer [$GET$ =O?>-cb xf!<< educt<< xf<<\r\n                                transduct<<\r\n                                amap-type vec-type throw-err map-idcs-range\r\n                                keys->strs ->args strs->keys\r\n                                URL-WMS URL-STATS]]))\r\n\r\n(defn kv-pair->str [[k v] separator]\r\n  (join separator [(name k) (str v)]))\r\n\r\n(defn C-S-args->url\r\n  \"Composes a URL to call Census' statistics API\"\r\n  [{:keys [vintage sourcePath geoHierarchy values predicates statsKey]}]\r\n  (if (not-any? nil? [vintage sourcePath geoHierarchy values])\r\n    (str URL-STATS\r\n         (str vintage)\r\n         (join (map #(str \"/\" %) sourcePath))\r\n         \"?get=\"\r\n         (if (some? values)\r\n           (join \",\" values)\r\n           \"\")\r\n         (if (some? predicates)\r\n           (str \"&\" (str (join \"&\" (map #(kv-pair->str % \"=\") predicates))))\r\n           \"\")\r\n         (keys->strs\r\n           (if (= 1 (count geoHierarchy))\r\n             (str \"&for=\" (kv-pair->str (first geoHierarchy) \":\"))\r\n             (str \"&in=\"  (join \"%20\" (map #(kv-pair->str % \":\") (butlast geoHierarchy)))\r\n                  \"&for=\" (kv-pair->str (last geoHierarchy) \":\"))))\r\n         (if (not (nil? statsKey))\r\n           (str \"&key=\" statsKey)))\r\n    \"\"))\r\n\r\n\r\n(defn ->num?->#\r\n  \"\r\n  Conditionally translates a string into an integer or float if so coercible.\r\n  If not, returns the original string.\r\n  \"\r\n  [s]\r\n  (if (numeric? s)\r\n    (parse-number s)\r\n    s))\r\n\r\n(defn xf!-CSV->CLJ\r\n  \"\r\n  Stateful transducer, which stores the first item as a list of a keys to apply\r\n  (via `zipmap`) to the rest of the items in a collection. Serves to turn the\r\n  Census API response into a more conventional JSON format.\r\n  If provided `:keywords` as an argument, will return a map with Clojure keys.\r\n  Otherwise, will return map keys as strings.\r\n  \"\r\n  [{:keys [values predicates]}]\r\n  (let [parse-range [0 (+ (count values) (count predicates))]]\r\n    (xf!<<\r\n      (fn [state rf acc this]\r\n        (let [prev @state]\r\n          (if (nil? prev)\r\n            (do (vreset! state (mapv strs->keys this))\r\n                nil)\r\n            (rf acc\r\n                (zipmap (mapv keyword @state)\r\n                        (map-idcs-range ->num?->#\r\n                                        parse-range\r\n                                        this)))))))))\r\n\r\n(defn xf-stats->js\r\n  [args]\r\n  (comp\r\n    (xf!-CSV->CLJ args)\r\n    (map #(clj->js % :keywordize-keys true))))\r\n\r\n\r\n(def $GET$-C-stats ($GET$ :json \"Unsuccessful Census stats request... \"))\r\n\r\n;(defn IOE-C->stats\r\n;  \"\r\n;  Internal function for calling the Census API using a Clojure Map. Returns stats\r\n;  from Census API unaltered.\r\n;  \"\r\n;  [=I= =O= =E=]\r\n;  (go (let [args  (<! =I=)\r\n;            url   (C-S-args->url args)]\r\n;        ($GET$-C-stats (to-chan [url]) =O= =E=))))\r\n\r\n(defn IOE-C-S->JSON\r\n  \"\r\n  Internal function for calling the Census API using a Clojure Map. Returns stats\r\n  from Census API unaltered.\r\n  \"\r\n  [=I= =O= =E=]\r\n  (take! =I=\r\n    (fn [args]\r\n      (let [url    (C-S-args->url args)\r\n            =JSON= (chan 1)]\r\n        ($GET$-C-stats (to-chan [url]) =JSON= =E=)\r\n        (pipeline 1 =O= (comp (educt<< (xf-stats->js args))\r\n                              (map to-array)\r\n                              (map js/JSON.stringify)) =JSON=)))))\r\n\r\n(defn censusStatsJSON\r\n  \"\r\n  Solo function to just get Census stats back as conventional JSON instead of\r\n  csv-like output of 'raw' Census API. Not to be coordinated with other functions.\r\n  Note on channels: (cb-<O?=) closes =O= and =E= on completing the callback\r\n  \"\r\n  [I cb]\r\n  (let [args (->args I)\r\n        =O= (chan 1 (comp (educt<< (xf-stats->js args))\r\n                          (map to-array)\r\n                          (map js/JSON.stringify)))\r\n        =E= (chan 1 (map throw-err))]\r\n    (=O?>-cb IOE-C-S->JSON cb (to-chan [args]) =O= =E=)))\r\n\r\n\r\n;      e            888                       d8\r\n;     d8b      e88~\\888   /~~~8e  888-~88e  _d88__  e88~~8e  888-~\\  d88~\\\r\n;    /Y88b    d888  888       88b 888  888b  888   d888  88b 888    C888\r\n;   /  Y88b   8888  888  e88~-888 888  8888  888   8888__888 888     Y88b\r\n;  /____Y88b  Y888  888 C888  888 888  888P  888   Y888    , 888      888D\r\n; /      Y88b  \"88_/888  \"88_-888 888-_88\"   '88_/  \"88___/  888    \\_88P\r\n;                                 888\r\n\r\n\r\n(defn xf-'key'<w-stat\r\n  \"\r\n  Takes an integer argument denoting the number of stat vars the user requested.\r\n  Returns a function of one item (from the Census API response\r\n  collection) to a new map with a hierarchy that will enable deep-merging of\r\n  the stats with a GeoJSON `feature`s `:properties` map.\r\n  \"\r\n  [vars#]\r\n  (xf<< (fn [rf acc this]\r\n          (rf acc {(apply str (vals (take-last (- (count this) vars#) this)))\r\n                   {:properties this}}))))\r\n\r\n;; Examples ==============================\r\n\r\n(defn xf-mergeable<-stats\r\n  [args vars#]\r\n  (comp\r\n    (xf!-CSV->CLJ args)\r\n    (xf-'key'<w-stat vars#)))\r\n\r\n\r\n(defn =cfg=C-Stats\r\n  \"\r\n  Internal function for calling Github cartography 'API' for GeoJSON\r\n  \"\r\n  [=args= =cfg=]\r\n  (take! =args=\r\n    (fn [args]\r\n      (let [vars# (+ (count (get args :values))\r\n                     (count (get args :predicates)))\r\n            url   (C-S-args->url args)\r\n            xform (educt<< (xf-mergeable<-stats args vars#))\r\n            s-key (keyword (first (get args :values)))]\r\n        (if (= \"\" url)\r\n            (put! =cfg= \"Invalid Census Statistics request. Please check arguments against requirements.\")\r\n            (put! =cfg= {:url       url\r\n                         :xform     xform\r\n                         :getter    $GET$-C-stats\r\n                         :filter-id s-key}))))))\r\n\r\n\r\n(def cfg>cfg=C-Stats [=cfg=C-Stats false])"],"mappings":"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","names":["p__31614","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__31615","census.statsAPI.core/kv-pair->str","cuerdas.core.join.cljs$core$IFn$_invoke$arity$2","separator","cljs.core/name","k","v","p__31627","map__31628","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","census.statsAPI.core/C-S-args->url","cljs.core/not-any?","cljs.core/nil?","vintage","sourcePath","geoHierarchy","values","census.utils.core/URL-STATS","cuerdas.core.join.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__31624#","predicates","p1__31625#","census.utils.core/keys->strs","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/first","p1__31626#","cljs.core/butlast","cljs.core/last","statsKey","census.statsAPI.core/->num?->#","cuerdas.core/numeric?","s","cuerdas.core/parse-number","p__31646","map__31651","census.statsAPI.core/xf!-CSV->CLJ","census.utils.core/xf!<<","cljs.core/deref","state","prev","cljs.core/vreset!","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","census.utils.core/strs->keys","this","G__31676","G__31677","rf","acc","cljs.core/zipmap","cljs.core/keyword","census.utils.core/map-idcs-range","parse-range","census.statsAPI.core/xf-stats->js","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","args","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__31678#","cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$variadic","census.statsAPI.core/$GET$-C-stats","census.utils.core/$GET$","census.statsAPI.core/IOE-C-S->JSON","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","=I=","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","G__31699","G__31700","G__31701","cljs.core.async/to-chan","url","=JSON=","=E=","cljs.core.async.pipeline.cljs$core$IFn$_invoke$arity$4","=O=","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","census.utils.core/educt<<","cljs.core/to-array","js/JSON.stringify","census.statsAPI.core/censusStatsJSON","census.utils.core/->args","I","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2","census.utils.core/throw-err","census.utils.core/=O?>-cb","cb","census.statsAPI.core/xf-'key'<w-stat","census.utils.core/xf<<","G__31740","G__31741","cljs.core/str","cljs.core/vals","cljs.core/take-last","vars#","census.statsAPI.core/xf-mergeable<-stats","census.statsAPI.core/=cfg=C-Stats","=args=","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","=cfg=","xform","s-key","census.statsAPI.core/cfg>cfg=C-Stats"]}