{"version":3,"sources":["net/cgrand/xforms/rfs.cljc"],"sourcesContent":["(ns net.cgrand.xforms.rfs\n  {:author \"Christophe Grand\"}\n  (:refer-clojure :exclude [str last min max some])\n  #?(:cljs (:require-macros\n             [net.cgrand.macrovich :as macros]\n             [net.cgrand.xforms.rfs :refer [or-instance?]])\n      :clj (:require [net.cgrand.macrovich :as macros]))\n  (:require [#?(:clj clojure.core :cljs cljs.core) :as core])\n  #?(:cljs (:import [goog.string StringBuffer])))\n\n(macros/deftime\n  (defmacro ^:private or-instance? [class x y]\n    (let [xsym (gensym 'x_)]\n      `(let [~xsym ~x]\n         (if (instance? ~class ~xsym) ~(with-meta xsym {:tag class}) ~y)))))\n\n(declare str!)\n\n(macros/usetime\n\n#? (:cljs\n     (defn ^:private cmp [f a b]\n       (let [r (f a b)]\n         (cond\n           (number? r) r\n           r -1\n           (f b a) 1\n           :else 0))))\n  \n(defn minimum\n ([comparator]\n   (fn\n     ([] nil)\n     ([x] x)\n     ([a b] (cond\n              (nil? a) b\n              (nil? b) a\n              (pos? (#?(:clj .compare :cljs cmp) comparator a b)) b\n              :else a))))\n ([#?(:clj ^java.util.Comparator comparator :cljs comparator) absolute-maximum]\n   (fn\n     ([] ::+\u221e)\n     ([x] (if (#?(:clj identical? :cljs keyword-identical?) ::+\u221e x)\n            absolute-maximum\n            x))\n     ([a b] (if (or (#?(:clj identical? :cljs keyword-identical?) ::+\u221e a) (pos? (#?(:clj .compare :cljs cmp) comparator a b))) b a)))))\n\n(defn maximum\n  ([comparator]\n    (fn\n     ([] nil)\n     ([x] x)\n     ([a b] (cond\n              (nil? a) b\n              (nil? b) a\n              (neg? (#?(:clj .compare :cljs cmp) comparator a b)) b\n              :else a))))\n  ([#?(:clj ^java.util.Comparator comparator :cljs comparator) absolute-minimum]\n    (fn\n      ([] ::-\u221e)\n      ([x] (if (#?(:clj identical? :cljs keyword-identical?) ::-\u221e x)\n             absolute-minimum\n             x))\n      ([a b] (if (or (#?(:clj identical? :cljs keyword-identical?) ::-\u221e a) (neg? (#?(:clj .compare :cljs cmp) comparator a b))) b a)))))\n\n(def min (minimum compare))\n\n(def max (maximum compare))\n\n(defn avg\n  \"Reducing fn to compute the arithmetic mean.\"\n  ([] nil)\n  ([^doubles acc] (when acc (/ (aget acc 1) (aget acc 0))))\n  ([acc x] (avg acc x 1))\n  ([^doubles acc x w] ; weighted mean\n    (let [acc (or acc #?(:clj (double-array 3) :cljs #js [0.0 0.0]))]\n      (doto acc\n        (aset 0 (+ (aget acc 0) w))\n        (aset 1 (+ (aget acc 1) (* w x)))))))\n\n(defn sd\n  \"Reducing fn to compute the standard deviation. Returns 0 if no or only one item.\"\n  ([] #?(:clj (double-array 3) :cljs #js [0.0 0.0 0.0]))\n  ([^doubles a]\n    (let [s (aget a 0) n (aget a 2)]\n      (if (< 1 n)\n        (Math/sqrt (/ s (dec n)))\n        0.0)))\n  ([^doubles a x]\n    (let [s (aget a 0) m (aget a 1) n (aget a 2)\n          d (- x m)\n          n (inc n)\n          m' (+ m (/ d n))]\n      (doto a\n        (aset 0 (+ s (* d (- x m'))))\n        (aset 1 m')\n        (aset 2 n)))))\n\n(defn last\n  \"Reducing function that returns the last value.\"\n  ([] nil)\n  ([x] x)\n  ([_ x] x))\n\n(defn some\n  \"Reducing function that returns the first logical true value.\"\n  ([] nil)\n  ([x] x)\n  ([_ x] (when x (reduced x))))\n\n(defn str!\n  \"Like xforms/str but returns a StringBuilder.\"\n  ([] (#?(:clj StringBuilder. :cljs StringBuffer.)))\n  ([sb] (or-instance? #?(:clj StringBuilder :cljs StringBuffer) sb (#?(:clj StringBuilder. :cljs StringBuffer.) (core/str sb)))) ; the instance? checks are for compatibility with str in case of seeded reduce/transduce.\n  ([sb x] (.append (or-instance? #?(:clj StringBuilder :cljs StringBuffer) sb (#?(:clj StringBuilder. :cljs StringBuffer.) (core/str sb))) x)))\n\n(def str\n  \"Reducing function to build strings in linear time. Acts as replacement for clojure.core/str in a reduce/transduce call.\"\n  (completing str! core/str))\n\n#_(defn juxt\n   \"Returns a reducing fn which compute all rfns at once and whose final return\n   value is a vector of the final return values of each rfns.\"\n   [& rfns]\n   (let [rfns (mapv ensure-kvrf rfns)]\n     (kvrf\n       ([] (mapv #(vector % (volatile! (%))) rfns))\n       ([acc] (mapv (fn [[rf vacc]] (rf (unreduced @vacc))) acc))\n       ([acc x]\n         (let [some-unreduced (core/reduce (fn [some-unreduced [rf vacc]] \n                                            (when-not (reduced? @vacc) (vswap! vacc rf x) true))\n                                false acc)]\n           (if some-unreduced acc (reduced acc))))\n       ([acc k v]\n         (let [some-unreduced (core/reduce (fn [some-unreduced [rf vacc]] \n                                            (when-not (reduced? @vacc) (vswap! vacc rf k v) true))\n                                false acc)]\n           (if some-unreduced acc (reduced acc)))))))\n\n#_(defn juxt-map\n   [& key-rfns]\n   (let [f (apply juxt (take-nth 2 (next key-rfns)))\n         keys (vec (take-nth 2 key-rfns))]\n     (let [f (ensure-kvrf f)]\n       (kvrf\n         ([] (f))\n         ([acc] (zipmap keys (f acc)))\n         ([acc x] (f acc x))\n         ([acc k v] (f acc k v))))))\n)\n"],"mappings":"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","names":["net.cgrand.xforms.rfs/cmp","f","a","b","r","G__30833","net.cgrand.xforms.rfs/minimum","js/Error","x","comparator","cljs.core/keyword-identical?","absolute-maximum","G__30835","net.cgrand.xforms.rfs/maximum","absolute-minimum","net.cgrand.xforms.rfs/min","net.cgrand.xforms.rfs.minimum.cljs$core$IFn$_invoke$arity$1","cljs.core/compare","net.cgrand.xforms.rfs/max","net.cgrand.xforms.rfs.maximum.cljs$core$IFn$_invoke$arity$1","G__30837","net.cgrand.xforms.rfs/avg","acc","net.cgrand.xforms.rfs.avg.cljs$core$IFn$_invoke$arity$3","or__4047__auto__","G__30838","w","G__30840","net.cgrand.xforms.rfs/sd","n","G__30841","Math/sqrt","s","m","d","G__30842","m'","G__30844","net.cgrand.xforms.rfs/last","G__30846","net.cgrand.xforms.rfs/some","cljs.core/reduced","G__30848","net.cgrand.xforms.rfs/str!","goog.string/StringBuffer","x_30849","sb","x_30850","net.cgrand.xforms.rfs/str","cljs.core.completing.cljs$core$IFn$_invoke$arity$2","cljs.core/str"]}