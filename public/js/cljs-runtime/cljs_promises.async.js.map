{"version":3,"sources":["cljs_promises/async.cljs"],"sourcesContent":["(ns cljs-promises.async\n  (:require [cljs.core.async :as async]\n            [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs-promises.core]))\n\n(defn extend-promises-as-channels!\n  \"If you want, you can globally extend Promise to act as a one-way channel which\n  can only be taken from, and which starts producing a never-ending stream of constants\n  once the promise resolves. `value-transform` and `error-transform` are functions\n  which are applied to the value or error when the Promise resolves or rejects.\n  Both `value-transform` and `error-transform` default to identity. Takes an optional\n  `promise-constructor` to extend, defaulting to `js/Promise`.\"\n  ([]\n   (extend-promises-as-channels! identity))\n  ([value-transform]\n   (extend-promises-as-channels! value-transform identity))\n  ([value-transform error-transform]\n   (extend-promises-as-channels! value-transform error-transform js/Promise))\n  ([value-transform error-transform promise-constructor]\n   (extend-type promise-constructor\n     impl/ReadPort\n     (take! [promise handler]\n       (.then promise\n              ;; `cljs.core.async.impl.dispatch/run` runs the handler in the next\n              ;; run of the event loop, making it possible here for errors avoid\n              ;; promises' error capturing. Otherwise, errors from the promise can\n              ;; never escape `go` blocks.\n              (fn [val]\n               (dispatch/run #((impl/commit handler) (value-transform val))))\n              (fn [err]\n               (dispatch/run #((impl/commit handler) (error-transform err)))))\n       nil) ;; return nil to say \"we're waiting on the value\"\n     impl/Channel\n     (close! [_]))))\n\n(defn extend-promises-as-pair-channels!\n  \"Globally extends Promises with `extend-promises-as-channels!` such that the\n  values taken from them are vector pairs of [value nil] in the case of fulfillment,\n  or [nil error] in the case of rejection. Takes an optional `promise-constructor`\n  to extend, defaulting to `js/Promise`.\"\n  ([]\n   (extend-promises-as-pair-channels! js/Promise))\n  ([promise-constructor]\n   (extend-promises-as-channels! (fn [val] [val nil])\n                                 (fn [err] [nil err])\n                                 promise-constructor)))\n\n(defn consume-pair\n  \"When passed a [value nil] pair, returns value. When passed a [nil error] pair,\n  throws error. See also `cljs-promises.async/<?`.\"\n  [[val err]]\n  (if err\n    (throw err)\n    val))\n\n(defn value-port\n  \"Wraps a promise and returns a ReadPort (a read-only channel-like). When the\n  promise fulfills with a value, that value is sent constantly on the channel\n  (the value might be nil). When the promise rejects with an error, nil is sent\n  constantly.\"\n  [promise]\n  (reify\n    impl/ReadPort\n    (take! [_ handler]\n      (.then promise\n             (fn [val]\n               (dispatch/run #((impl/commit handler) val)))\n             (fn [_]\n               (dispatch/run #((impl/commit handler) nil))))\n      nil)))\n\n(defn error-port\n  \"The reverse of `value-port`, passing along errors when `promise` rejects and sending\n  nils when `promise` fulfills with a value.\"\n  [promise]\n  (reify\n    impl/ReadPort\n    (take! [_ handler]\n      (.then promise\n             (fn [_]\n               (dispatch/run #((impl/commit handler) nil)))\n             (fn [err]\n               (dispatch/run #((impl/commit handler) err))))\n      nil)))\n\n(defn pair-port\n  \"Returns a ReadPort which sends [value nil] when `promise` fulfills, and [nil error]\n  when `promise` rejects.\"\n  [promise]\n  (reify\n    impl/ReadPort\n    (take! [_ handler]\n      (.then promise\n             (fn [val]\n               (dispatch/run #((impl/commit handler) [val nil])))\n             (fn [err]\n               (dispatch/run #((impl/commit handler) [nil err]))))\n      nil)))\n\n\n(defn take-as-promise!\n  \"Waits for the next value from `ch` and returns a promise of that value.\"\n  [ch]\n  (cljs-promises.core/promise (fn [resolve _]\n                                (async/take! ch resolve))))\n"],"mappings":"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","names":["G__23033","cljs-promises.async/extend-promises-as-channels!","js/Error","cljs_promises.async.extend_promises_as_channels_BANG_.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","cljs_promises.async.extend_promises_as_channels_BANG_.cljs$core$IFn$_invoke$arity$2","value-transform","cljs_promises.async.extend_promises_as_channels_BANG_.cljs$core$IFn$_invoke$arity$3","error-transform","js/Promise","cljs.core/PROTOCOL_SENTINEL","promise-constructor","promise","cljs.core.async.impl.dispatch/run","fexpr__23074","G__23075","cljs.core.async.impl.protocols/commit","handler","val","fexpr__23078","G__23079","err","G__23053","cljs-promises.async/extend-promises-as-pair-channels!","cljs_promises.async.extend_promises_as_pair_channels_BANG_.cljs$core$IFn$_invoke$arity$1","p__23054","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__23055","cljs-promises.async/consume-pair","cljs-promises.async/value-port","js/cljs-promises","js/cljs-promises.async","js/cljs-promises.async.t_cljs_promises$async23058","cljs-promises.async/t_cljs_promises$async23058","meta23059","cljs.core/-write","writer__4291__auto__","cljs-promises.async/->t_cljs_promises$async23058","fexpr__23083","fexpr__23086","cljs-promises.async/error-port","js/cljs-promises.async.t_cljs_promises$async23061","cljs-promises.async/t_cljs_promises$async23061","meta23062","cljs-promises.async/->t_cljs_promises$async23061","fexpr__23088","fexpr__23090","cljs-promises.async/pair-port","js/cljs-promises.async.t_cljs_promises$async23066","cljs-promises.async/t_cljs_promises$async23066","meta23067","cljs-promises.async/->t_cljs_promises$async23066","fexpr__23093","G__23094","fexpr__23095","G__23096","cljs-promises.async/take-as-promise!","cljs-promises.core/promise","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","ch","resolve"]}