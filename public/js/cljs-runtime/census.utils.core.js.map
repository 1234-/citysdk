{"version":3,"sources":["census/utils/core.cljs"],"sourcesContent":["(ns census.utils.core\r\n  (:require\r\n    [cljs.core.async     :refer [chan >! <! take! put! close! promise-chan\r\n                                 onto-chan to-chan]\r\n                         :refer-macros [go go-loop alt!]]\r\n    [ajax.core           :refer [GET POST]]\r\n    [cljs-promises.async :refer [pair-port value-port]]\r\n    [cuerdas.core        :as s]\r\n    [oops.core           :refer [oget oset!]]\r\n    [cljs.reader         :refer [read-string]]\r\n    [linked.core         :as -=-]\r\n    [com.rpl.specter     :refer [MAP-VALS MAP-KEYS INDEXED-VALS FIRST LAST\r\n                                 if-path continue-then-stay selected?]\r\n                         :refer-macros [select transform traverse setval recursive-path]]))\r\n\r\n(def $geoKeyMap$ (atom {}))\r\n\r\n(def URL-STATS \"https://api.census.gov/data/\")\r\n(def URL-WMS \"https://tigerweb.geo.census.gov/arcgis/rest/services/\")\r\n(def URL-GEOJSON \"https://raw.githubusercontent.com/loganpowell/census-geojson/master/GeoJSON\")\r\n(def URL-GEOKEYMAP \"https://raw.githubusercontent.com/loganpowell/census-geojson/master/src/configs/geojson/index.edn\")\r\n\r\n;FIXME === !!! ===\r\n(def base-url-database \"TODO?\")\r\n\r\n(def vec-type cljs.core/PersistentVector)\r\n\r\n(def amap-type cljs.core/PersistentArrayMap)\r\n\r\n(def err-type js/Error)\r\n\r\n(defn error [e] (js/Error. e))\r\n\r\n(def MAP-NODES\r\n  \"From [specter's help page](https://github.com/nathanmarz/specter/wiki/Using-Specter-Recursively#recursively-navigate-to-every-map-in-a-map-of-maps)\"\r\n  (recursive-path [] p (if-path map? (continue-then-stay MAP-VALS p))))\r\n\r\n(defn deep-reverse-MAP-NODES\r\n  \"Recursively reverses the order of the key/value _pairs_ inside a map\"\r\n  [m]\r\n  (transform MAP-NODES #(into {} (reverse %)) m))\r\n\r\n(defn deep-linked-map\r\n  \"\r\n  Recursively converts any map into a `linked` map (preserves insertion order)\r\n  TODO - Testing:\r\n  [core.async](https://github.com/clojure/core.async/blob/master/src/test/cljs/cljs/core/async/tests.cljs)\r\n  \"\r\n  [m]\r\n  (transform MAP-NODES #(into (-=-/map) (vec %)) m))\r\n\r\n(defn map-rename-keys\r\n  \"\r\n  Applies a function over the keys in a provided map\r\n  \"\r\n  [f m]\r\n  (transform MAP-KEYS f m))\r\n\r\n(defn map-over-keys\r\n  \"\r\n  Applies a function to all values of a provided map\r\n  \"\r\n  [f m]\r\n  (transform MAP-VALS f m))\r\n\r\n(defn keys->strs\r\n  \"\r\n  Translates Clojure (edn) key-forms of geographic identifyers into strings,\r\n  which are valid as parameters of a Census Data API URL construction.\r\n  \"\r\n  [s]\r\n  (s/replace s #\"-_|_|!|-\"\r\n             {\"-_\" \" (\" \"_\" \")\" \"!\" \"/\" \"-\" \" \"}))\r\n\r\n(defn strs->keys\r\n  \"\r\n  Translates strings valid as parameters of a Census Data API URL construction\r\n  to Clojure (edn) key-forms of geographic identifyers. Also valid URL components\r\n  of the raw.github directory structure.\r\n  \"\r\n  [s]\r\n  (s/replace s #\" \\(|\\)|/| \"\r\n             {\" (\" \"-_\" \")\" \"_\" \"/\" \"!\" \" \" \"-\"}))\r\n\r\n; Examples =======================================\r\n\r\n;(defn =IO<-js-<3-fn\r\n;  [<3-fn]\r\n;  (fn [=I= =O=]\r\n;    (go (let [[val err] (<! (cpa/pair-port (<3-fn (<! =I=))))]\r\n;                (if (= val nil)\r\n;                    (>! =O= err)\r\n;                    (>! =O= (js->clj val)))))))\r\n\r\n\r\n#_(defn test-promise\r\n    [?happy?]\r\n    (js/Promise. (fn [resolve reject]\r\n                   (let [answer \"This promise was \"])\r\n                   (if (= ?happy? \"happy\")\r\n                       (resolve (str answer \"resolved!\"))\r\n                       (reject  (js/Error. (str answer \"rejected :(\")))))))\r\n\r\n\r\n#_(-> (test-promise \"happy\")\r\n      (.then (fn [fulfilled] (prn fulfilled))))\r\n\r\n#_(-> (test-promise \"poop\")\r\n      (.then (fn [fulfilled] (prn fulfilled)))\r\n      (.catch (fn [error]    (prn error))))\r\n\r\n\r\n\r\n#_(let [=O= (chan 1 (map throw-err))]\r\n    (go ((js-I=O<<=IO= (=IO<-js-<3-fn test-promise)) \"happy\" =O=)\r\n        (prn (<! =O=))\r\n        (close! =O=)))\r\n\r\n; ==================================================\r\n\r\n\r\n(defn throw-err\r\n  \"\r\n  Throws an error... meant to be used in transducer `comp`osed with another\r\n  transducer or as `(map u/throw-error)`.\r\n  \"\r\n  [x]\r\n  (if (instance? err-type x)\r\n    (throw x)\r\n    x))\r\n\r\n; TODO: read up:\r\n; http://clojure-doc.org/articles/language/concurrency_and_parallelism.html\r\n;  http://java.ociweb.com/mark/stm/article.html\r\n\r\n\r\n(defn $GET$\r\n  \"\r\n  Takes two initial inputs: the response format desired and an error message,\r\n  which is logged in console for debugging. Takes three channel inputs\r\n  1: takes a =url= channel\r\n  2: takes a =response= channel.\r\n  3: takes an =err= channel (for propogation/coordination)\r\n  Once first created (with format and err-log-msg) the following channel fns\r\n  are wrapped with some local state that stores the last url sent in, the last\r\n  response put out and any prior errors.\r\n  If url passed in === the last url (cached in an `atom`), the\r\n  function pumps a cached response (`atom`) instead of - in the case the\r\n  url argument =/= last url - calling a cljs-ajax `GET` request.\r\n  Any new payloads received by `GET` will replace the last response `atom` via\r\n  `reset!` *and* be put into the out-bound =response= chan.\r\n  \"\r\n  [format err-log-msg]\r\n  (let [$url$ (volatile! \"\")\r\n        $res$ (volatile! [])\r\n        $err$ (volatile! {})]\r\n    (fn\r\n      ([=url= =res= =err=] (($GET$ format err-log-msg) =url= =res= =err= nil))\r\n      ([=url= =res= =err= silent?] ; TODO: Silence logging for config\r\n       (take!\r\n         =url=\r\n         (fn [url]\r\n           (cond\r\n             (and (= url @$url$) (not (empty? @$err$)))\r\n             (do (prn err-log-msg)\r\n                 (put! =err= @$err$)\r\n                 (vreset! $err$ {})) ; <- if internets have failed, allow retry\r\n             (and (= url @$url$) (empty? @$err$))\r\n             (do (when (nil? silent?) (do (prn \"Getting data from cache:\")\r\n                                          (prn url)))\r\n                 (put! =res= @$res$))\r\n             :else\r\n             (do (when (nil? silent?) (do (prn \"Getting data from source:\")\r\n                                          (prn url)))\r\n                 (let [cfg {:error-handler\r\n                            (fn [{:keys [status status-text]}]\r\n                              (do (prn err-log-msg)\r\n                                  (vreset! $url$ url)\r\n                                  (put! =res= {})\r\n                                  (->> (vreset! $err$\r\n                                                (str \"ERROR status: \" status\r\n                                                     \" \" status-text\r\n                                                     \" for URL \" url))\r\n                                       (put! =err=))))}]\r\n                   (case format\r\n                     :json\r\n                     (let [json\r\n                           (merge cfg {:response-format :json\r\n                                       :keywords?       true\r\n                                       :handler\r\n                                       (fn [res]\r\n                                         (do (vreset! $err$ {})\r\n                                             (vreset! $url$ url)\r\n                                             (->> (vreset! $res$ res)\r\n                                                  (put! =res=))))})]\r\n                       (GET url json))\r\n                     :edn\r\n                     (let [edn\r\n                           (merge cfg {:handler\r\n                                       (fn [res]\r\n                                         (do (vreset! $err$ {})\r\n                                             (vreset! $url$ url)\r\n                                             (->> (vreset! $res$ (read-string res))\r\n                                                  (put! =res=))))})]\r\n                       (GET url edn))\r\n                     :raw\r\n                     (let [raw\r\n                           (merge cfg {:handler\r\n                                       (fn [res]\r\n                                         (do (vreset! $err$ {})\r\n                                             (vreset! $url$ url)\r\n                                             (->> (vreset! $res$ res)\r\n                                                  (put! =res=))))})]\r\n                       (GET url raw))))))))))))\r\n\r\n\r\n\r\n\r\n(def $GET$-json ($GET$ :json \"Invalid JSON request...\"))\r\n\r\n(def $GET$-edn  ($GET$ :edn  \"Invalid EDN request...\"))\r\n\r\n(defn =O?>-cb\r\n  \"\r\n  Can only be used as the last wrapper as the callback. Function can't be\r\n  be coordinated with any other channel (go blocks don't interpret nested\r\n  anonymous functions (the callback)).\r\n\r\n  Takes a function (f =O=) that pumps output into a channel and converts it to a\r\n  fn with a callback API (f cb). If buffer provided, passes that to the internal\r\n  `chan`. If buffer and transducer provided, passes those in accordingly.\r\n\r\n  Closes =O= and =E= chans on completion\r\n  \"\r\n  [f cb =I= =O= =E=]\r\n  (go (f =I= =O= =E=)\r\n      (alt! =O= ([O] (cb nil O))\r\n            =E= ([E] (cb E nil)))))\r\n\r\n(defn ->args\r\n  [args]\r\n  (if (= (type args) amap-type)\r\n    (let [{:keys [vintage]} args]\r\n      (setval :vintage (str vintage) args))\r\n    (let [geoCljs (js->clj (oget args \"geoHierarchy\"))\r\n          vintage (oget args \"vintage\")\r\n          geoKeys (map-rename-keys strs->keys geoCljs)]\r\n      (do (oset! args \"vintage\"      (clj->js (str vintage)))\r\n          (oset! args \"geoHierarchy\" (clj->js geoKeys))\r\n          (js->clj args :keywordize-keys true)))))\r\n\r\n;; Examples ==============================\r\n(comment\r\n  (->args ts/test-js-args-1)\r\n  (->args ts/test-js-args-2)\r\n  (->args ts/test-args-6))\r\n\r\n#_(->args test.core/test-js-args-2)\r\n;; =>\r\n;;{:vintage \"2016\",\r\n;; :sourcePath [\"acs\" \"acs5\"],\r\n;; :geoHierarchy {:state \"12\", :state-legislative-district-_upper-chamber_ \"*\"},\r\n;; :values [\"B01001_001E\" \"NAME\"],\r\n;; :predicates {:B00001_001E \"0:30000\"},\r\n;; :statsKey \"6980d91653a1f78acd456d9187ed28e23ea5d4e3\"}\r\n;; =======================================\r\n\r\n\r\n(defn args->js\r\n  [{:keys [geoHierarchy] :as args}]\r\n  (let [geoKeys (map-rename-keys #(keys->strs (name %)) geoHierarchy)]\r\n    (prn (clj->js geoKeys))\r\n    (clj->js (setval :geoHierarchy geoKeys args))))\r\n\r\n\r\n\r\n(defn xf<<\r\n  \"\r\n  Transducifier wrapper, which takes the seed of a transducer (essential\r\n  operation) with a standardized `xf acc this` contract and wraps it in the\r\n  necessary boilerplate to correctly function as a stateless transducer.\r\n\r\n  Example of tranducer seed with contract required for this wrapper:\r\n\r\n  (defn xf-seed-form\r\n    [rf acc this]\r\n  \"\r\n  [f]\r\n  (fn [rf]\r\n    (fn\r\n      ([] (rf))\r\n      ([acc] (rf acc))\r\n      ([acc this] (f rf acc this)))))\r\n\r\n(defn xf!<<\r\n  \"\r\n  Stateful transducifier wrapper, which takes the seed of a transducer (essential\r\n  operation) with a standardized `xf acc this` contract and wraps it in the\r\n  necessary boilerplate to correctly function as a _stateful_ transducer.\r\n\r\n  Only avails a single state container: `state`\r\n\r\n  Example of tranducer seed with contract required for this wrapper:\r\n\r\n  (defn xf!-seed-form\r\n    [state xf acc this]\r\n      (let [prev @state]\r\n        (if (nil? prev)\r\n            (do (vreset! state (vec (map keyword item)))\r\n              nil)\r\n            (xf acc (zipmap prev (vec item))))))\r\n  \"\r\n  [f]\r\n  (fn [rf]\r\n    (let [state (volatile! nil)]\r\n      (fn\r\n        ([] (rf))\r\n        ([acc] (rf acc))\r\n        ([acc this] (f state rf acc this))))))\r\n\r\n;; Tested 1: working\r\n\r\n\r\n(defn educt<<\r\n  \"\r\n  Transducer, which wraps a transducer to provide the right level of contract\r\n  for a core.async chan through which data is not an item, but a collection.\r\n  I.e., treating the collection as a single transducible item.\r\n\r\n  Uses eduction.\r\n  \"\r\n  [xfn]\r\n  (fn [rf]\r\n    (fn\r\n      ([] (rf))\r\n      ([acc] (rf acc))\r\n      ([acc coll]\r\n       (rf acc (eduction xfn coll))))))\r\n\r\n\r\n\r\n(defn transduct<<\r\n  \"\r\n  Transducer, which wraps a transducer to provide the right level of contract\r\n  for a core.async chan through which data is not an item, but a collection.\r\n  I.e., treating the collection as a single transducible item.\r\n\r\n  Uses eduction.\r\n  \"\r\n  [xfn]\r\n  (fn [rf]\r\n    (fn\r\n      ([] (rf))\r\n      ([acc] (rf acc))\r\n      ([acc coll]\r\n       (rf acc (transduce xfn conj coll))))))\r\n\r\n\r\n(defn map-target\r\n  \"\r\n  Maps a provided function to a specific index + 1 of a provided collection.\r\n  \"\r\n  [f target coll]\r\n  (map-indexed\r\n    #(if (zero? (mod (inc %1) target)) (f %2) %2)\r\n    coll))\r\n\r\n; Example ===============================\r\n\r\n;(map-target inc 2 [1 2 3 4 5])\r\n; => (1 3 3 5 5)\r\n; =======================================\r\n\r\n(defn map-target-idcs\r\n  \"\r\n  Maps a provided function over a given vector of indeces of a provided\r\n  collection.\r\n  \"\r\n  [f targets coll]\r\n  (transform [INDEXED-VALS (selected? FIRST (set targets)) LAST] f coll))\r\n\r\n; Example ===============================\r\n\r\n#_(map-target-idcs inc [0 1 2] [1 2 3 4 5])\r\n; => [2 3 4 4 5]\r\n\r\n; Also works:\r\n;(transform (multi-path 1 3 5) inc [0 1 2 3 4 5 6])\r\n; => [0 2 2 4 4 6 6]\r\n; =======================================\r\n\r\n(defn map-idcs-range\r\n  \"\r\n  Maps a provided function over a given range of indeces (vector of beginning\r\n  to end) of a provided collection.\r\n  \"\r\n  [f [r-start r-end] coll]\r\n  (transform [INDEXED-VALS (selected? FIRST (set (range r-start r-end))) LAST] f coll))\r\n\r\n; Example ===============================\r\n\r\n;; also works: (transform (multi-path 1 3 5) inc [0 1 2 3 4 5 6])\r\n;=> [0 2 2 4 4 6 6]\r\n\r\n\r\n;(map-idcs-range inc [0 2] [1 2 3 4 5])\r\n;=> [2 3 3 4 5]\r\n; =======================================\r\n\r\n"],"mappings":"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","names":["census.utils.core/$geoKeyMap$","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","census.utils.core/URL-STATS","census.utils.core/URL-WMS","census.utils.core/URL-GEOJSON","census.utils.core/URL-GEOKEYMAP","census.utils.core/base-url-database","census.utils.core/vec-type","cljs.core/PersistentVector","census.utils.core/amap-type","cljs.core/PersistentArrayMap","census.utils.core/err-type","js/Error","census.utils.core/error","e","census.utils.core/MAP-NODES","com.rpl.specter.impl/local-declarepath","com.rpl.specter.impl/providepath*","census.utils.core/pathcache29874","info__28398__auto__","com.rpl.specter.impl/magic-precompilation","com.rpl.specter.impl/->FnInvocation","com.rpl.specter.impl/->VarUse","com.rpl.specter/if-path","cljs.core/map?","com.rpl.specter/continue-then-stay","com.rpl.specter/MAP-VALS","com.rpl.specter.impl/->LocalSym","info29875","com.rpl.specter.impl/cached-path-info-precompiled","com.rpl.specter.impl/cached-path-info-dynamic?","dynamic?__28399__auto__","precompiled29876","G__29880","p","census.utils.core/deep-reverse-MAP-NODES","com.rpl.specter.impl/compiled-transform*","census.utils.core/pathcache29882","info29883","precompiled29884","G__29887","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__29881#","cljs.core/reverse","m","census.utils.core/deep-linked-map","census.utils.core/pathcache29890","info29891","precompiled29892","G__29893","linked.core.map.cljs$core$IFn$_invoke$arity$0","p1__29889#","cljs.core/vec","census.utils.core/map-rename-keys","census.utils.core/pathcache29894","com.rpl.specter/MAP-KEYS","info29895","precompiled29896","G__29897","f","census.utils.core/map-over-keys","census.utils.core/pathcache29898","info29899","precompiled29900","G__29901","census.utils.core/keys->strs","cuerdas.core/replace","s","census.utils.core/strs->keys","census.utils.core/throw-err","x","census.utils.core/$GET$","cljs.core/volatile!","fexpr__29902","format","err-log-msg","=url=","=res=","=err=","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","url","$url$","cljs.core/empty?","$err$","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/vreset!","silent?","$res$","p__29903","map__29904","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","status","status-text","G__29906","cljs.core/Keyword","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cfg","res","ajax.core.GET.cljs$core$IFn$_invoke$arity$variadic","json","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","edn","raw","census.utils.core/$GET$-json","census.utils.core/$GET$-edn","census.utils.core/=O?>-cb","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","state_29948","state_val_29949","inst_29921","inst_29938","statearr-29950","statearr-29951","inst_29915","inst_29916","statearr-29952","inst_29907","cljs.core.async/ioc-alts!","inst_29917","inst_29930","statearr-29953","statearr-29954","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","inst_29919","inst_29935","statearr-29955","inst_29936","inst_29927","statearr-29956","inst_29928","statearr-29957","inst_29920","inst_29922","statearr-29958","statearr-29959","statearr-29960","inst_29942","statearr-29961","cljs.core.async.impl.ioc-helpers/return-chan","inst_29946","statearr-29962","statearr-29963","inst_29944","statearr-29964","state-machine__16489__auto__","switch__16488__auto__","cljs.core/keyword-identical?","result__16491__auto__","e29965","js/Object","statearr-29966","ex__16492__auto__","cljs.core.async.impl.ioc-helpers/process-exception","ret-value__16490__auto__","f__16664__auto__","statearr-29967","cljs.core.async.impl.ioc-helpers/USER-START-IDX","c__16663__auto__","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state__16665__auto__","=I=","=O=","=E=","cb","census.utils.core/->args","cljs.core/type","args","map__29968","com.rpl.specter.impl/compiled-setval*","census.utils.core/pathcache29970","info29971","precompiled29972","G__29973","vintage","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","oops.state/*runtime-state*","oops.state/prepare-state","target-obj-29974","*runtime-state*-temp-val__29977","oops.core/validate-object-access-dynamically","next-obj-29975","*runtime-state*-orig-val__29976","target-obj-29978","*runtime-state*-temp-val__29981","next-obj-29979","*runtime-state*-orig-val__29980","geoCljs","target-obj-29982","*runtime-state*-temp-val__29985","parent-obj-29983","*runtime-state*-orig-val__29984","cljs.core/clj->js","target-obj-29986","*runtime-state*-temp-val__29989","parent-obj-29987","*runtime-state*-orig-val__29988","geoKeys","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","p__29991","map__29992","census.utils.core/args->js","p1__29990#","cljs.core/name","geoHierarchy","census.utils.core/pathcache29994","info29995","precompiled29996","G__29997","census.utils.core/xf<<","rf","acc","this","census.utils.core/xf!<<","state","census.utils.core/educt<<","G__29998","G__29999","cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic","xfn","coll","census.utils.core/transduct<<","G__30000","G__30001","cljs.core.transduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","census.utils.core/map-target","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","p2__30003#","cljs.core/mod","p1__30002#","target","census.utils.core/map-target-idcs","census.utils.core/pathcache30004","com.rpl.specter/INDEXED-VALS","com.rpl.specter/selected?","com.rpl.specter/FIRST","cljs.core/set","com.rpl.specter/LAST","info30005","G__30008","G__30009","precompiled30006","G__30007","targets","p__30010","vec__30011","census.utils.core/map-idcs-range","census.utils.core/pathcache30014","cljs.core/range","info30015","G__30019","G__30020","precompiled30016","G__30018","cljs.core.range.cljs$core$IFn$_invoke$arity$2","r-start","r-end"]}