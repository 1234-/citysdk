{"version":3,"sources":["census/merger/core.cljs"],"sourcesContent":["(ns census.merger.core\r\n  (:require\r\n    [cljs.core.async       :refer [>! <! chan promise-chan close! pipeline put!\r\n                                   to-chan take!]\r\n                           :refer-macros [go alt! go-loop]]\r\n    [cuerdas.core          :refer-macros [istr]\r\n                           :as s]\r\n    [net.cgrand.xforms     :as x]\r\n    [census.utils.core     :refer [URL-GEOKEYMAP xf<< educt<<\r\n                                   throw-err err-type ->args map-over-keys\r\n                                   amap-type $GET$]]))\r\n\r\n(comment\r\n  ;; NOTE: If you need to increase memory of Node in Shadow... Eval in REPL:\r\n  (shadow.cljs.devtools.api/node-repl {:node-args [\"--max-old-space-size=4096\"]}))\r\n  ;; or in Node: node --max-old-space-size=4096\r\n\r\n;(defn deep-merge-with-seq\r\n;  [& maps]\r\n;  (apply merge-with\r\n;         (fn [& args]\r\n;           (if (every? map? args)\r\n;             (apply deep-merge-with-seq args)\r\n;             (last args)))\r\n;         maps))\r\n\r\n; Examples ================================================\r\n\r\n;(def xf-deep-merge-seq (x/for [[_ maps] %] (apply deep-merge-with-seq maps)))\r\n;\r\n;(defn xf-remove-unmerged\r\n;  \"\r\n;  Transducer, which takes 2->3 keys that serve to filter a merged list of two\r\n;  maps to return a function, which returns a list of only those maps which have\r\n;  a key from both maps. The presence of both keys within the map signifies that\r\n;  the maps have merged. This ensures the returned list contains only the overlap\r\n;  between the two, i.e., excluding non-merged maps.\r\n;  \"\r\n;  [IDS]\r\n;  (xf<<\r\n;    (fn [rf acc this]\r\n;      (let [[[_ v]] (x/into [] this)]\r\n;        (if (not-any? nil? (map #(get-in v [:properties %]) IDS))\r\n;          (rf acc v)\r\n;          (rf acc))))))\r\n\r\n\r\n;; From MFikes\r\n;\r\n;(deftype Transfer [^:mutable v]\r\n;  IDeref\r\n;  (-deref [o]\r\n;    (let [r v]\r\n;      (set! v nil)\r\n;      r)))\r\n;\r\n;(defn map'\r\n;  [f transfer]\r\n;  (lazy-seq\r\n;    (when-let [s (seq @transfer)]\r\n;      (cons (f (first s))\r\n;            (map' f (Transfer.\r\n;                      (rest s)))))))\r\n\r\n\r\n\r\n;      e    e                             /\r\n;     d8b  d8b      e88~~8e  888-~\\ e88~88e  e88~~8e  888-~\\\r\n;    d888bdY88b    d888  88b 888    888 888 d888  88b 888\r\n;   / Y88Y Y888b   8888__888 888    \"88_88\" 8888__888 888\r\n;  /   YY   Y888b  Y888    , 888     /      Y888    , 888\r\n; /          Y888b  \"88___/  888    Cb       \"88___/  888\r\n;                                    Y8\"\"8D\r\n\r\n\r\n;\r\n;(defn group-by-keys\r\n;  \"\r\n;  Implementation of `group-by` (produces a map) via @cgrand's `xforms`\r\n;  See 'Usage': https://github.com/cgrand/xforms#usage\r\n;  \"\r\n;  [coll]\r\n;  (into {} (x/by-key keys (x/into [])) coll))\r\n;\r\n;\r\n;(defn xf-merge->filter\r\n;  [IDS]\r\n;  (comp xf-deep-merge-seq\r\n;        (xf-remove-unmerged IDS)))\r\n        ;(map clj->js)\r\n        ;(map js/JSON.stringify)))\r\n\r\n\r\n;  888~~  888 Y88b    /      e    e      888~~\r\n;  888___ 888  Y88b  /      d8b  d8b     888___\r\n;  888    888   Y88b/      d888bdY88b    888\r\n;  888    888   /Y88b     / Y88Y Y888b   888\r\n;  888    888  /  Y88b   /   YY   Y888b  888\r\n;  888    888 /    Y88b /          Y888b 888___\r\n\r\n\r\n;; from @CGrand\r\n\r\n\r\n;(defn deep-merge-with-c\r\n;  \"\r\n;  From @cgrand: Recursively merges two maps together along matching key paths.\r\n;  \"\r\n;  [a b]\r\n;  (if (map? a)\r\n;    (into a (x/for [[k v] b] [k (deep-merge-with-2 (a k) v)]))\r\n;    b))\r\n\r\n(defn deep-merge-a-coll\r\n  [maps]\r\n  (apply merge-with\r\n         (fn [& args]\r\n           (if (every? map? args)\r\n             (deep-merge-a-coll args)\r\n             (last args)))\r\n         maps))\r\n\r\n;(defn group-and-merge\r\n;  \"\r\n;  From @cgrand\r\n;  \"\r\n;  [coll1 coll2]\r\n;  (let [coll1-by-key (into {} (for [x coll1] [(keys x) x]))\r\n;        coll2-by-key (into {} (for [x coll2] [(keys x) x]))]\r\n;    (vals (deep-merge-with coll1-by-key coll2-by-key))))\r\n\r\n\r\n(defn remove-unmerged\r\n  \"\r\n  Transducer, which takes 2->3 keys that serve to filter a merged list of two\r\n  maps to return a function, which returns a list of only those maps which have\r\n  a key from both maps. The presence of both keys within the map signifies that\r\n  the maps have merged. This ensures the returned list contains only the overlap\r\n  between the two, i.e., excluding non-merged maps.\r\n  \"\r\n  [IDS]\r\n  (fn [m]\r\n    (let [[[_ v]] (x/into [] m)]\r\n      (if (not-any? nil? (map (get v :properties) IDS))\r\n        v))))\r\n\r\n\r\n(defn xf<-Grands->JS\r\n  [IDS]\r\n  (comp (x/into [])\r\n        (map deep-merge-a-coll)\r\n        (map (remove-unmerged IDS))\r\n        (map clj->js)))\r\n\r\n\r\n(defn xf-Grands-M->JSON\r\n  \"\r\n  Implementation of `group-by` (produces a map) via @cgrand's `xforms`\r\n  See 'Usage': https://github.com/cgrand/xforms#usage\r\n  \"\r\n  [IDS]\r\n  (comp (x/by-key keys (xf<-Grands->JS IDS))\r\n        (remove   (fn [[_ v]] (nil? v)))\r\n        (map      #(get % 1))\r\n        (map      js/JSON.stringify)))\r\n\r\n(defn I=OE-M-spooler\r\n  [$g$ =arg= cfgs]\r\n  (fn [=O= =E=]\r\n    (let [=args= (promise-chan)]\r\n      (go (>! =args= (<! =arg=))\r\n          (let [=cfg= (chan 1)\r\n                $ids$ (atom [])]\r\n            (loop [todo cfgs\r\n                   [cfg ?=$g$] (first cfgs)\r\n                   acc (transient [])]\r\n              (if (nil? (first todo))\r\n                (do (prn \"Working on it ...\")\r\n                    (>! =O=\r\n                        (as-> (persistent! acc) coll\r\n                              (reduce concat coll)\r\n                              (eduction (xf-Grands-M->JSON @$ids$) coll)\r\n                              (s/join \",\" coll)\r\n                              (istr \"{\\\"type\\\":\\\"FeatureCollection\\\",\\\"features\\\":[~{coll}]}\")))\r\n                    (close! =cfg=)\r\n                    (close! =args=))\r\n                (do (if ?=$g$\r\n                        ((cfg $g$) =args= =cfg=)\r\n                        (cfg =args= =cfg=))\r\n                    (let [{:keys [getter url xform filter-id]} (<! =cfg=)]\r\n                      (if getter\r\n                        (let [=xform= (chan 1 xform)\r\n                              =err=   (chan 1 (map throw-err))]\r\n                          (swap! $ids$ conj filter-id)\r\n                          (getter (to-chan [url]) =xform= =err=)\r\n                          (alt! =xform= ([data] (do (close! =xform=)\r\n                                                    (close! =err=)\r\n                                                    (recur (rest todo)\r\n                                                           (second todo)\r\n                                                           (conj! acc data))))\r\n                                =err=    ([err] (do (close! =xform=)\r\n                                                    (close! =err=)\r\n                                                    (>! =E= err))))))\r\n                      (do (>! =E= cfg)\r\n                          (close! =cfg=)\r\n                          (close! =O=)\r\n                          (close! =args=) ; Close up shop...\r\n                          (close! =E=)))))))))))\r\n\r\n\r\n\r\n"],"mappings":"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","names":["census.merger.core/deep-merge-a-coll","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/merge-with","cljs.core/every?","cljs.core/map?","args","cljs.core/last","maps","census.merger.core/remove-unmerged","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__35022","vec__35025","net.cgrand.xforms.into.cljs$core$IFn$_invoke$arity$2","m","cljs.core/not-any?","cljs.core/nil?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.get.cljs$core$IFn$_invoke$arity$2","v","IDS","census.merger.core/xf<-Grands->JS","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","net.cgrand.xforms.into.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/clj->js","census.merger.core/xf-Grands-M->JSON","net.cgrand.xforms.by_key.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","p__35029","vec__35030","p1__35028#","js/JSON.stringify","census.merger.core/I=OE-M-spooler","cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","state_35192","state_val_35193","inst_35069","statearr-35194","statearr-35195","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","inst_35095","statearr-35196","inst_35113","inst_35142","inst_35122","inst_35124","inst_35061","inst_35063","inst_35150","inst_35153","inst_35154","inst_35155","statearr-35197","inst_35151","inst_35062","inst_35152","statearr-35198","cljs.core.async.impl.ioc-helpers/take!","statearr-35199","inst_35070","statearr-35200","inst_35068","inst_35071","statearr-35201","statearr-35202","statearr-35203","statearr-35204","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","inst_35144","inst_35169","statearr-35205","statearr-35206","statearr-35207","inst_35175","statearr-35208","inst_35167","cljs.core/not","inst_35097","statearr-35209","inst_35098","statearr-35210","statearr-35211","inst_35116","statearr-35212","inst_35120","inst_35119","inst_35118","inst_35117","statearr-35213","statearr-35214","statearr-35215","inst_35173","statearr-35216","inst_35177","inst_35074","cljs.core/deref","inst_35048","inst_35076","inst_35077","inst_35075","inst_35078","inst_35079","statearr-35217","inst_35073","cljs.core.async.impl.ioc-helpers/put!","inst_35080","inst_35158","statearr-35218","statearr-35219","statearr-35220","inst_35180","statearr-35221","inst_35143","statearr-35222","inst_35043","statearr-35223","inst_35092","inst_35046","cljs.core/PersistentVector","inst_35047","inst_35056","inst_35059","inst_35060","statearr-35224","inst_35057","inst_35058","inst_35045","statearr-35225","inst_35123","inst_35126","inst_35127","inst_35128","inst_35129","inst_35138","inst_35139","statearr-35226","inst_35130","inst_35125","cljs.core.async/ioc-alts!","inst_35140","statearr-35227","statearr-35228","inst_35108","statearr-35229","inst_35090","statearr-35230","inst_35083","inst_35082","statearr-35231","inst_35084","cljs.core.async.impl.ioc-helpers/return-chan","inst_35190","inst_35100","cljs.core/PROTOCOL_SENTINEL","inst_35102","inst_35101","inst_35103","inst_35104","statearr-35232","statearr-35233","statearr-35234","inst_35145","statearr-35235","statearr-35236","inst_35111","statearr-35237","statearr-35238","statearr-35239","inst_35164","inst_35165","inst_35163","inst_35087","statearr-35240","inst_35088","statearr-35241","statearr-35242","inst_35185","inst_35182","inst_35183","inst_35184","statearr-35243","inst_35186","statearr-35244","inst_35188","statearr-35245","state-machine__16489__auto__","switch__16488__auto__","cljs.core/keyword-identical?","result__16491__auto__","e35246","js/Object","statearr-35247","ex__16492__auto__","cljs.core.async.impl.ioc-helpers/process-exception","ret-value__16490__auto__","f__16664__auto__","statearr-35248","cljs.core.async.impl.ioc-helpers/USER-START-IDX","c__16663__auto__","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","state__16665__auto__","=args=","=arg=","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cfgs","cljs.core/first","cljs.core/transient","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","=O=","cljs.core/persistent!","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic","cuerdas.core.join.cljs$core$IFn$_invoke$arity$2","cljs.core.async/close!","$g$","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2","census.utils.core/throw-err","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core.async/to-chan","cljs.core/rest","cljs.core/second","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","=E="]}