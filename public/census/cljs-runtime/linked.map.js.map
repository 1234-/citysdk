{"version":3,"sources":["linked/map.cljc"],"sourcesContent":["(ns linked.map\n  (:require [clojure.string :as string]\n    #?(:cljs [cljs.reader :as reader]))\n  #?(:clj\n     (:import (clojure.lang Associative\n                            Counted\n                            IObj\n                            IFn\n                            IHashEq\n                            ILookup\n                            IPersistentCollection\n                            IPersistentVector\n                            IPersistentMap\n                            MapEntry\n                            MapEquivalence\n                            Reversible\n                            Seqable\n                            SeqIterator)\n              (java.util Map\n                         Map$Entry)\n              (java.lang Iterable))))\n\n(declare empty-linked-map)\n\n(defrecord Node [value left right])\n\n(declare assoc*)\n(declare dissoc*)\n(declare seq*)\n(declare rseq*)\n\n(deftype LinkedMap [head delegate-map]\n  #?@(:clj\n      [IPersistentMap\n       (assoc [this k v]\n         (assoc* this k v))\n       (assocEx [this k v]\n         (if (.containsKey this k)\n           (throw (RuntimeException. \"Key already present\"))\n           (assoc this k v)))\n       (without [this k]\n         (dissoc* this k))\n\n       MapEquivalence\n\n       Map\n       (get [this k]\n         (.valAt this k))\n       (containsValue [this v]\n         (boolean (seq (filter #(= % v) (.values this)))))\n       (values [this]\n         (map val (.seq this)))\n       (size [_]\n         (count delegate-map))\n\n       Counted\n\n       IPersistentCollection\n       (count [this]\n         (.size this))\n       (cons [this o]\n         (condp instance? o\n           Map$Entry (let [^Map$Entry e o]\n                       (.assoc this (.getKey e) (.getValue e)))\n           IPersistentVector (if (= 2 (count o))\n                               (.assoc this (nth o 0) (nth o 1))\n                               (throw (IllegalArgumentException. \"Vector arg to map conj must be a pair\")))\n           ;; TODO support for transient to speed up multiple assoc?\n           (reduce (fn [^IPersistentMap m ^Map$Entry e]\n                     (.assoc m (.getKey e) (.getValue e)))\n                   this\n                   o)))\n       (empty [_]\n         (with-meta empty-linked-map (meta delegate-map)))\n       (equiv [this o]\n         (and (instance? Map o)\n              (= (.count this) (count o))\n              (every? (fn [[k v :as kv]]\n                        (= kv (find o k)))\n                      (.seq this))))\n\n       Seqable\n       (seq [this]\n         (seq* this))\n\n       Reversible\n       (rseq [this]\n         (rseq* this))\n\n       Iterable\n       (iterator [this]\n         (SeqIterator. (.seq this)))\n\n       Associative\n       (containsKey [_ k]\n         (contains? delegate-map k))\n       (entryAt [this k]\n         (when (.containsKey this k)\n           (MapEntry. k (.valAt this k))))\n\n       ILookup\n       (valAt [this k]\n         (.valAt this k nil))\n       (valAt [_ k not-found]\n         (if-let [entry (find delegate-map k)]\n           (-> entry val :value)\n           not-found))\n\n       IFn\n       (invoke [this k]\n         (.valAt this k))\n       (invoke [this k not-found]\n         (.valAt this k not-found))\n\n       IObj\n       (meta [this]\n         (.meta ^IObj delegate-map))\n       (withMeta [this m]\n         (LinkedMap. head (.withMeta ^IObj delegate-map m)))\n\n       ;; IEditableCollection\n\n       IHashEq\n       (hasheq [this] (.hasheq ^IHashEq (into {} this)))\n\n       Object\n       (toString [this]\n         (str \"{\" (string/join \", \" (for [[k v] this] (str k \" \" v))) \"}\"))\n       (equals [this other]\n         (.equiv this other))\n       (hashCode [this]\n         (.hashCode ^Object (into {} this)))]\n      :cljs\n      [Object\n       (toString [coll]\n                 (str \"{\" (string/join \", \" (for [[k v] coll] (str k \" \" v))) \"}\"))\n       (equiv [this other]\n              (-equiv this other))\n\n       ICloneable\n       (-clone [_]\n               (LinkedMap. head delegate-map))\n\n       IWithMeta\n       (-with-meta [coll meta]\n                   (LinkedMap. head (with-meta delegate-map meta)))\n\n       IMeta\n       (-meta [coll] (meta delegate-map))\n\n       ICollection\n       (-conj [coll entry]\n              (if (vector? entry)\n                (-assoc coll (-nth entry 0) (-nth entry 1))\n                (loop [ret coll es (seq entry)]\n                      (if (nil? es)\n                        ret\n                        (let [e (first es)]\n                             (if (vector? e)\n                               (recur (-assoc ret (-nth e 0) (-nth e 1))\n                                      (next es))\n                               (throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n       IEmptyableCollection\n       (-empty [coll] (-with-meta empty-linked-map (meta delegate-map)))\n\n       IEquiv\n       (-equiv [coll other] (equiv-map coll other))\n\n       IHash\n       (-hash [coll] (hash (into {} coll)))\n\n       ISequential\n\n       ISeqable\n       (-seq [coll] (seq* coll))\n\n       IReversible\n       (-rseq [coll] (rseq* coll))\n\n       ICounted\n       (-count [coll]\n               (count delegate-map))\n\n       ILookup\n       (-lookup [coll k]\n                (-lookup coll k nil))\n\n       (-lookup [coll k not-found]\n                (if-let [entry (find delegate-map k)]\n                        (-> entry val :value)\n                        not-found))\n\n       IAssociative\n       (-assoc [coll k v]\n               (assoc* coll k v))\n\n       (-contains-key? [coll k]\n                       (contains? delegate-map k))\n\n       IMap\n       (-dissoc [coll k]\n                (dissoc* coll k))\n\n       IKVReduce\n       (-kv-reduce [coll f init]\n                   (reduce #(apply (partial f %1) %2) init (seq coll)))\n\n       IFn\n       (-invoke [coll k]\n                (-lookup coll k))\n\n       (-invoke [coll k not-found]\n                (-lookup coll k not-found))\n\n       ;; IEditableCollection\n\n       IPrintWithWriter\n       (-pr-writer [coll writer opts] (-write writer (str \"#linked/map \" (into [] coll))))]))\n\n#?(:clj\n   (defmethod print-method LinkedMap [o ^java.io.Writer w]\n     (.write w \"#linked/map \")\n     (.write w (pr-str (into [] o)))))\n\n(defn- assoc* [^LinkedMap this k v]\n  (let [head (.-head this)\n        delegate-map (.-delegate-map this)]\n    (if-let [entry (find delegate-map k)]\n      (LinkedMap. head (assoc-in delegate-map [k :value] v))\n      (if (empty? delegate-map)\n        (LinkedMap. k (assoc delegate-map k (Node. v k k)))\n        (let [tail (get-in delegate-map [head :left])]\n          (LinkedMap. head (-> delegate-map\n                               (assoc k (Node. v tail head))\n                               (assoc-in [head :left] k)\n                               (assoc-in [tail :right] k))))))))\n\n(defn- dissoc* [^LinkedMap this k]\n  (let [head (.-head this)\n        delegate-map (.-delegate-map this)]\n    (if-let [entry (find delegate-map k)]\n      (if (= 1 (count delegate-map))\n        (empty this)\n        (let [rk (-> entry val :right)\n              lk (-> entry val :left)\n              head (if (= k head) rk head)]\n          (LinkedMap. head (-> delegate-map\n                               (dissoc k)\n                               (assoc-in [rk :left] lk)\n                               (assoc-in [lk :right] rk)))))\n      this)))\n\n\n;;;; seq and rseq impl\n\n(defn- map-entry [k v]\n  #?(:clj  (MapEntry. k v)\n     :cljs (MapEntry. k v nil)))\n\n(defn- visit-node [delegate-map current last direction]\n  (let [[k node] (find delegate-map current)\n        entry (map-entry k (:value node))\n        next (direction node)]\n    (if (= current last)\n      (list entry)\n      (cons entry (lazy-seq (visit-node delegate-map next last direction))))))\n\n(defn- seq* [^LinkedMap this]\n  (let [delegate-map (.-delegate-map this)\n        head (.-head this)\n        tail (get-in delegate-map [head :left])]\n    (when (seq delegate-map)\n      (visit-node delegate-map head tail :right))))\n\n(defn- rseq* [^LinkedMap this]\n  (let [delegate-map (.-delegate-map this)\n        head (.-head this)\n        tail (get-in delegate-map [head :left])]\n    (when (seq delegate-map)\n      (visit-node delegate-map tail head :left))))\n\n(def ^{:tag LinkedMap} empty-linked-map\n  (LinkedMap. nil (hash-map)))\n\n(def ->linked-map (partial into empty-linked-map))\n\n#?(:cljs (reader/register-tag-parser! 'linked/map ->linked-map))\n"],"mappings":"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","names":["this__4301__auto__","k__4302__auto__","k11751","G__11755","cljs.core/Keyword","value","left","right","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__11756","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__11758","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__11750","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__11761","this__4297__auto__","other11753","this11752","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__11763","pred__11762","G__11765","G__11766","G__11767","G__11768","G__11769","G__11770","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","linked.map/Node","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__11754","cljs.core/record?","G__11771","extmap__4340__auto__","linked.map/->Node","linked.map/map->Node","self__","cljs.core/aclone","args11775","writer__4291__auto__","linked.map/LinkedMap","linked.map/->LinkedMap","head","delegate-map","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/LazySeq","s__11777","temp__5457__auto__","cljs.core/chunked-seq?","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__11778","vec__11780","cljs.core/chunk-append","b__11779","cljs.core/chunk-cons","cljs.core/chunk","iter__11776","cljs.core/chunk-rest","cljs.core/first","vec__11783","cljs.core/cons","cljs.core/rest","iter__4434__auto__","coll","k","v","this","other","cljs.core/with-meta","meta","cljs.core/meta","entry","es","ret","e","cljs.core/next","js/Error","linked.map/empty-linked-map","cljs.core/equiv-map","cljs.core/hash","linked.map/seq*","linked.map/rseq*","temp__5455__auto__","cljs.core/find","cljs.core/val","not-found","linked.map/assoc*","linked.map/dissoc*","p2__11774#","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","p1__11773#","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","f","init","writer","cljs.core/assoc-in","cljs.core/empty?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","tail","cljs.core/empty","rk","lk","linked.map/map-entry","linked.map/visit-node","vec__11827","current","node","direction","last","next","cljs.core/PersistentHashMap","linked.map/->linked-map","cljs.core/into","cljs.reader/register-tag-parser!","cljs.core/chunk-first"]}