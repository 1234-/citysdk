{"version":3,"sources":["census/core.cljs"],"sourcesContent":["(ns census.core\r\n  (:require\r\n    [cljs.core.async      :refer [chan close! to-chan take!\r\n                                  put! promise-chan]]\r\n    [defun.core           :refer-macros [defun]]\r\n    [census.utils.core    :refer [throw-err err-type =O?>-cb ->args\r\n                                  $GET$ URL-GEOKEYMAP amap-type]]\r\n    [census.wmsAPI.core   :refer [=>args=GIS=args=> I-<wms=I=]]\r\n    [census.geoAPI.core   :refer [IOE-C-GeoJSON cfg>cfg=C-GeoCLJ]]\r\n    [census.statsAPI.core :refer [IOE-C-S->JSON cfg>cfg=C-Stats]]\r\n                                  ;IOE-C->stats ]]\r\n    [census.merger.core   :refer [I=OE-M-spooler]]))\r\n\r\n\r\n(def err-no-vals \"When using `predicates`, you must also supply at least one value to `values`\")\r\n\r\n(defun core-pattern\r\n  \"\r\n  takes a pattern of args and deploys one of the various underlying functions\r\n  of this library.\r\n  \"\r\n  ([{:vintage _ :geoHierarchy _ :predicates _ :values _ :sourcePath _ :geoResolution _}] :stats+geos)\r\n  ([{:vintage _ :geoHierarchy _               :values _ :sourcePath _ :geoResolution _}] :stats+geos)\r\n  ([{:vintage _ :geoHierarchy _ :predicates _ :values _ :sourcePath _                 }] :stats-only)\r\n  ([{:vintage _ :geoHierarchy _               :values _ :sourcePath _                 }] :stats-only)\r\n  ([{:vintage _ :geoHierarchy _ :predicates _           :sourcePath _ :geoResolution _}] :no-values)\r\n  ([{:vintage _ :geoHierarchy _ :predicates _           :sourcePath _                 }] :no-values)\r\n  ([{:vintage _ :geoHierarchy _                                       :geoResolution _}] :geos-only)\r\n  ([{:vintage _ :geoHierarchy _                                                       }] :geocodes)\r\n  ([& anything-else] nil))\r\n\r\n#_(core-pattern\r\n    ts/args-ok-wms-only)\r\n    ;ts/args-ok-geo-only\r\n    ;ts/args-ok-s+g-v+ps\r\n    ;ts/args-ok-s+g-vals\r\n    ;ts/args-ok-sts-pred\r\n    ;ts/args-ok-sts-v+ps\r\n    ;ts/args-ok-sts-vals\r\n    ;ts/args-na-geo-only)\r\n\r\n#_(prn ts/args-ok-wms-only)\r\n\r\n\r\n(defn IOE-Census\r\n  [$g$]\r\n  (fn [=I= =O= =E=]\r\n    (take! =I=\r\n      (fn [args]\r\n        (let [deploy (core-pattern args)]\r\n          (prn deploy)\r\n          (case deploy\r\n            :stats+geos ((I=OE-M-spooler $g$ (to-chan [args]) [cfg>cfg=C-Stats cfg>cfg=C-GeoCLJ]) =O= =E=)\r\n            :stats-only (IOE-C-S->JSON       (to-chan [args]) =O= =E=)\r\n            :geos-only  ((IOE-C-GeoJSON $g$) (to-chan [args]) =O= =E=)\r\n            :geocodes   ((=>args=GIS=args=> $g$) (to-chan [args]) =O= =E=)\r\n            :no-values  (put! =E= err-no-vals)\r\n            (prn \"No matching clause for the arguments provided. Please check arguments against requirements\")))))))\r\n\r\n\r\n(def $GET$-GeoKeyMap ($GET$ :edn \"Unsuccessful fetch for configuration.\"))\r\n\r\n(def =GKM= (promise-chan))\r\n\r\n($GET$-GeoKeyMap (to-chan [URL-GEOKEYMAP]) =GKM= (chan 1 (map throw-err)) :silent)\r\n\r\n(defn census\r\n  [I cb]\r\n  (let [=args=> (chan 1)\r\n        =O=     (chan 1)\r\n        =E=     (chan 1)]\r\n    (take! =GKM=\r\n      (fn [$g$]\r\n        ((I-<wms=I= $g$) I =args=>)\r\n        (take! =args=>\r\n          (fn [?args]\r\n            (if (= (type ?args) amap-type)\r\n                (do ((IOE-Census $g$) (to-chan [?args]) =O= =E=)\r\n                    (take! =O= (fn [r] (cb nil r)))\r\n                    (take! =E= (fn [e] (cb e nil))))\r\n                (cb ?args nil))))))))\r\n\r\n\r\n"],"mappings":"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","names":["census.core/err-no-vals","cljs.core/vec","args__21996__auto__","cljs.core/vector?","ocr-35292","cljs.core/count","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","ocr-35292_0__35328","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ILookup","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","ocr-35292_0__35328_geoResolution__35336","ocr-35292_0__35328_sourcePath__35337","ocr-35292_0__35328_geoHierarchy__35338","ocr-35292_0__35328_values__35339","ocr-35292_0__35328_predicates__35340","ocr-35292_0__35328_vintage__35341","cljs.core.match/backtrack","e35371","js/Error","e__21043__auto__","e35369","e35370","e35368","e35367","e35366","e35349","e35365","e35363","e35364","e35357","e35362","e35361","e35358","e35360","e35359","e35356","e35350","e35355","e35354","e35351","e35353","e35352","e35347","e35344","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","ocr-35292_left__35342","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","e35346","e35345","census.core/core-pattern","census.core/IOE-Census","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","=I=","census.core.core_pattern.cljs$core$IFn$_invoke$arity$variadic","args","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","deploy","G__35372","cljs.core/Keyword","fexpr__35373","census.merger.core/I=OE-M-spooler","$g$","cljs.core.async/to-chan","census.statsAPI.core/cfg>cfg=C-Stats","census.geoAPI.core/cfg>cfg=C-GeoCLJ","=O=","=E=","census.statsAPI.core/IOE-C-S->JSON","fexpr__35374","G__35375","G__35376","G__35377","census.geoAPI.core/IOE-C-GeoJSON","fexpr__35378","G__35379","G__35380","G__35381","census.wmsAPI.core/=>args=GIS=args=>","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","census.core/$GET$-GeoKeyMap","census.utils.core/$GET$","census.core/=GKM=","cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0","G__35382","G__35383","G__35384","G__35385","census.utils.core/URL-GEOKEYMAP","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","census.utils.core/throw-err","census.core/census","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","fexpr__35386","census.wmsAPI.core/I-<wms=I=","I","=args=>","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","?args","census.utils.core/amap-type","fexpr__35387","G__35388","G__35389","G__35390","cb","r","e"]}