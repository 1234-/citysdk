{"version":3,"sources":["census/geoAPI/core.cljs"],"sourcesContent":["(ns census.geoAPI.core\r\n  (:require\r\n    [cljs.core.async    :refer [chan close! to-chan onto-chan take! put!\r\n                                promise-chan]]\r\n    [cuerdas.core       :refer [join]]\r\n    [defun.core         :refer-macros [defun]]\r\n    [census.utils.core  :refer [$geoKeyMap$ URL-GEOKEYMAP URL-GEOJSON\r\n                                xf<< educt<< transduct<< =O?>-cb $GET$\r\n                                map-over-keys keys->strs error throw-err\r\n                                err-type amap-type ->args]]))\r\n\r\n(defn G-err\r\n  [$g$ res vin lev]\r\n  (let [e-gen\r\n        [(str \"No GeoJSON found for: '\" (keys->strs (name lev)) \"'\")\r\n         (str \"at this scope in vintage: \" vin)\r\n         (str \"at resolution: \" res)]]\r\n    (if-let [vins (get-in $g$ [lev])]\r\n      (let [e-try\r\n            [(str \"For '\" (keys->strs (name lev)) \"' try of of the following:\")\r\n             (str \"=== :us = nation-level '\" (name lev) \"' geoResolutions ===\")\r\n             (str \"=== :st = state-levels '\" (name lev) \"' geoResolutions ===\")]]\r\n        (do (doseq [e e-gen] (prn e))\r\n            (doseq [t e-try] (prn t))\r\n            (doseq [s (vec (map-over-keys #(get-in % [:scopes]) vins))] (prn s))\r\n            \"\"))\r\n      (let [e-NA \"=== available geoHierarchy levels ===\"]\r\n        (do (doseq [e e-gen] (prn e))\r\n            (prn e-NA)\r\n            (doseq [s (vec (map #(keys->strs (name (key %))) $g$))] (prn s))\r\n            \"\")))))\r\n\r\n\r\n(defn G-pattern->url\r\n  \"Composes a URL to call raw GeoJSON files hosted on Github\"\r\n  ([res vin lev] (G-pattern->url res vin lev nil))\r\n  ([res vin lev st]\r\n   (if (nil? st)\r\n     (str (join \"/\" [URL-GEOJSON res vin (name lev)]) \".json\")\r\n     (str (join \"/\" [URL-GEOJSON res vin st (name lev)]) \".json\"))))\r\n\r\n(defn scope\r\n  ([$g$ res vin lev USr]     (scope $g$ res vin lev USr nil))\r\n  ([$g$ res vin lev USr STr] (scope $g$ res vin lev USr STr nil))\r\n  ([$g$ res vin lev USr STr st]\r\n   (let [STr? (not (nil? (some #(= res %) STr)))\r\n         USr? (not (nil? (some #(= res %) USr)))\r\n         st?  (not (nil? st))\r\n         us?  (nil? st)]\r\n     (cond\r\n       (and st? STr?) (G-pattern->url res vin lev st) ;asks for state, state available\r\n       (and us? USr?) (G-pattern->url res vin lev)    ;asks for us, us available\r\n       (and (and st? USr?) (not STr?)) (G-pattern->url res vin lev)    ;asks for state, state unavailable, us available\r\n       :else (G-err $g$ res vin lev)))))\r\n\r\n; FIXME: Can we do without this?\r\n(defn big-G\r\n  ([$g$ res vin lev USr]     (big-G $g$ res vin lev USr nil))\r\n  ([$g$ res vin lev USr STr] (big-G $g$ res vin lev USr STr nil))\r\n  ([$g$ res vin lev USr STr st]\r\n   (let [strs\r\n         [\"Warning, you are about to make a large GeoJSON request.\"\r\n          \"This may take some time -> consider local data caching.\"\r\n          \"The response may also cause VM heap capacity overflow.\"\r\n          \"Node heap may be increased via `--max-old-space-size=`\"\r\n          \"For all ZCTAs: Use `--max-old-space-size=4096\"]]\r\n     (do (doseq [s strs] (prn s))\r\n         (scope $g$ res vin lev USr STr st)))))\r\n\r\n(defun G-patterner\r\n  \"\r\n  Takes a pattern of maps and triggers the URL builder accordingly\r\n  \"\r\n  ([$g$ [\"500k\"         vin _   [:zip-code-tabulation-area _] {:us USr :st nil }]] (big-G $g$ \"500k\" vin :zip-code-tabulation-area USr))\r\n  ([$g$ [(res :guard #(not (= \"500k\" %))) vin _ [:zip-code-tabulation-area _] _ ]] (G-err $g$ res vin :zip-code-tabulation-area))\r\n  ;([$g$ [res            vin _   [:county _]                   {:us USr :st nil }]] (big-G $g$ res vin :county USr))\r\n  ([$g$ [res            vin _   [lev _  ]                     nil               ]] (G-err $g$ res vin lev))\r\n  ([$g$ [res            vin nil [lev _  ]                     {:us nil :st _   }]] (G-err $g$ res vin lev))\r\n  ([$g$ [res            vin \"*\" [lev _  ]                     {:us nil :st _   }]] (G-err $g$ res vin lev))\r\n  ([$g$ [res            vin nil [lev _  ]                     {:us USr :st _   }]] (scope $g$ res vin lev USr))\r\n  ([$g$ [res            vin \"*\" [lev _  ]                     {:us USr :st _   }]] (scope $g$ res vin lev USr))\r\n  ([$g$ [res            vin _   [lev _  ]                     {:us USr :st nil }]] (scope $g$ res vin lev USr))\r\n  ([$g$ [res            vin st  [lev _  ]                     {:us USr :st STr }]] (scope $g$ res vin lev USr STr st))\r\n  ([$g$ & anthing-else ]                                                           \"\"))\r\n\r\n\r\n(defn G-pattern-cfg\r\n  [$g$ {:keys [vintage geoResolution] {:keys [state] :as geoHierarchy} :geoHierarchy}]\r\n  (let [level     (last geoHierarchy)\r\n        geoScopes (get-in $g$ [(key level) (keyword vintage) :scopes])\r\n        pattern   [geoResolution vintage state level geoScopes]]\r\n    pattern))\r\n\r\n(defn C-G-pattern->url\r\n  [$g$ args]\r\n  (->> (G-pattern-cfg $g$ args)\r\n       (G-patterner $g$)))\r\n\r\n(def $GET$-C-GeoJSON\r\n  ($GET$ :raw \"Unsuccessful Census GeoJSON request\"))\r\n\r\n(defn IOE-C-GeoJSON\r\n  \"\r\n  Internal function for calling Github cartography 'API' for GeoJSON\r\n  \"\r\n  [$g$]\r\n  (fn [=I= =O= =E=]\r\n    (take! =I=\r\n      (fn [args]\r\n        (let [url (C-G-pattern->url $g$ args)]\r\n          (if (= \"\" url)\r\n            (put! =E= \"Invalid GeoJSON request. Please check arguments against requirements.\")\r\n            ($GET$-C-GeoJSON (to-chan [url]) =O= =E=)))))))\r\n\r\n\r\n\r\n\r\n(def $GET$-GeoKeyMap ($GET$ :edn \"Unsuccessful fetch for configuration.\"))\r\n\r\n(defn getCensusGeoJSON\r\n  \"\r\n    Library function, which takes a JSON object as input, constructs a call to get\r\n    Github raw file and returns GeoJSON.\r\n    \"\r\n  [I cb]\r\n  (let [args (->args I)\r\n        =O= (chan 1 (comp (map clj->js)\r\n                          (map js/JSON.stringify)))\r\n        =E= (chan 1 (map throw-err))\r\n        =GKM= (promise-chan)]\r\n    ($GET$-GeoKeyMap (to-chan [URL-GEOKEYMAP]) =GKM= (chan 1 (map throw-err)) :silent)\r\n    (take! =GKM=\r\n      (fn [$g$]\r\n        (=O?>-cb (IOE-C-GeoJSON $g$) cb (to-chan [args]) =O= =E=)))))\r\n\r\n\r\n\r\n;; Examples  ========================================\r\n\r\n#_(getCensusGeoJSON\r\n    ;ts/census.test-js-args-1\r\n    ts/test-js-args-2\r\n    ;ts/census.test-args-2\r\n    #_#(configs.utils.fixtures/FileSaver\r\n         {:directory \"./src/json/\"\r\n          :filepath \"./src/json/legislative-only.json\"\r\n          :json %})\r\n    ;#(prn %))\r\n    #(js/console.log %))\r\n;true)\r\n;; ===================================================\r\n\r\n\r\n;      e            888                       d8\r\n;     d8b      e88~\\888   /~~~8e  888-~88e  _d88__  e88~~8e  888-~\\  d88~\\\r\n;    /Y88b    d888  888       88b 888  888b  888   d888  88b 888    C888\r\n;   /  Y88b   8888  888  e88~-888 888  8888  888   8888__888 888     Y88b\r\n;  /____Y88b  Y888  888 C888  888 888  888P  888   Y888    , 888      888D\r\n; /      Y88b  \"88_/888  \"88_-888 888-_88\"   '88_/  \"88___/  888    \\_88P\r\n;                                 888\r\n;\r\n\r\n\r\n\r\n(defn GEOIDS<-$g$+args\r\n  \"\r\n  Takes the request argument and pulls out a vector of the component identifiers\r\n  from the geoKeyMap, which is used to construct the UID for the GeoJSON. Used\r\n  in deep-merging with statistics.\r\n  \"\r\n  [$g$ {:keys [geoHierarchy vintage]}]\r\n  (let [[& GEOIDS] (get-in $g$ [(key (last geoHierarchy)) (keyword vintage) :id<-json])]\r\n    GEOIDS)) ;; <- Note: These args are returned as a '() list...\r\n\r\n(defn xf-mergeable-features\r\n  \"\r\n  Takes the component GEOIDS from with the GeoJSON and a single feature to\r\n  generate a :GEOID if not available within the GeoJSON.\r\n  \"\r\n  [$g$ args]\r\n  (let [GEOIDS (GEOIDS<-$g$+args $g$ args)]\r\n    (xf<< (fn [rf acc this]\r\n            (rf acc {(apply str (map (:properties this) GEOIDS))\r\n                     this})))))\r\n\r\n\r\n(defn xf-mergeable<-GeoCLJS\r\n  \"\r\n  Transducer, which reshapes a GeoJSON 'FeatureCollection' into a shape that's\r\n  mergable with other data. Shape = [{'GEOID' {:properties & kvs {& kvs }}}}]\r\n  \"\r\n  [$g$ args]\r\n  (comp\r\n    (map #(get % :features)) ; turns a single map into a collection\r\n    (educt<< (xf-mergeable-features $g$ args))))\r\n\r\n\r\n(def $GET$-C-GeoCLJ\r\n  ($GET$ :json \"Unsuccessful Census GeoJSON (for merge) request\"))\r\n\r\n\r\n(defn =cfg=C-GeoCLJ\r\n  \"\r\n  Internal function for calling Github cartography 'API' for GeoJSON\r\n  \"\r\n  [$g$]\r\n  (fn [=args= =cfg=]\r\n    (take! =args=\r\n      (fn [args]\r\n        (let [url   (C-G-pattern->url $g$ args)\r\n              xform (xf-mergeable<-GeoCLJS $g$ args)\r\n              g-key (first (GEOIDS<-$g$+args $g$ args))]\r\n          (if (= \"\" url)\r\n              (put! =cfg= \"Invalid GeoJSON request. Please check arguments against requirements.\")\r\n              (put! =cfg= {:url       url\r\n                           :xform     xform\r\n                           :getter    $GET$-C-GeoCLJ\r\n                           :filter-id g-key})))))))\r\n\r\n(def cfg>cfg=C-GeoCLJ [=cfg=C-GeoCLJ true])\r\n"],"mappings":"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","names":["census.geoAPI.core/G-err","census.utils.core/keys->strs","cljs.core/name","lev","vin","res","temp__5455__auto__","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","$g$","cljs.core/seq","i__34745","count__34744","chunk__34743","seq__34742","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","e-gen","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","e","i__34749","count__34748","chunk__34747","seq__34746","e-try","t","i__34753","count__34752","chunk__34751","seq__34750","cljs.core/vec","census.utils.core/map-over-keys","p1__34740#","vins","s","i__34757","count__34756","chunk__34755","seq__34754","e-NA","i__34761","count__34760","chunk__34759","seq__34758","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__34741#","cljs.core/key","G__34763","census.geoAPI.core/G-pattern->url","js/Error","census.geoAPI.core.G_pattern__GT_url.cljs$core$IFn$_invoke$arity$4","st","cuerdas.core.join.cljs$core$IFn$_invoke$arity$2","census.utils.core/URL-GEOJSON","G__34767","census.geoAPI.core/scope","census.geoAPI.core.scope.cljs$core$IFn$_invoke$arity$6","USr","census.geoAPI.core.scope.cljs$core$IFn$_invoke$arity$7","STr","cljs.core/some","p1__34764#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__34765#","st?","STr?","us?","USr?","census.geoAPI.core.G_pattern__GT_url.cljs$core$IFn$_invoke$arity$3","G__34769","census.geoAPI.core/big-G","census.geoAPI.core.big_G.cljs$core$IFn$_invoke$arity$6","census.geoAPI.core.big_G.cljs$core$IFn$_invoke$arity$7","i__34773","count__34772","chunk__34771","seq__34770","strs","args__21996__auto__","cljs.core/vector?","ocr-34775","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","ocr-34775_1__34796","ocr-34775_1__34796_3__34800","cljs.core/keyword-identical?","ocr-34775_1__34796_3__34800_0__34802","ocr-34775_1__34796_0__34797","ocr-34775_1__34796_4__34801","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/ILookup","cljs.core.get.cljs$core$IFn$_invoke$arity$3","ocr-34775_1__34796_4__34801_st__34808","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","ocr-34775_1__34796_4__34801_us__34807","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.match/backtrack","e34848","e__21043__auto__","e34847","e34845","e34842","p1__34774#","fexpr__34844","e34843","e34822","e34823","ocr-34775_1__34796_2__34799","ocr-34775_1__34796_4__34801_us__34812","ocr-34775_1__34796_4__34801_st__34813","e34841","e34840","e34826","e34839","e34838","e34827","e34837","e34836","e34828","e34835","e34834","e34829","e34833","e34830","e34832","e34831","e34824","e34821","e34820","e34817","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","ocr-34775_left__34814","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","e34819","e34818","census.geoAPI.core/G-patterner","census.geoAPI.core.big_G.cljs$core$IFn$_invoke$arity$5","census.geoAPI.core.scope.cljs$core$IFn$_invoke$arity$5","p__34849","map__34850","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","map__34851","census.geoAPI.core/G-pattern-cfg","cljs.core/last","geoHierarchy","level","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","vintage","geoResolution","state","geoScopes","pattern","census.geoAPI.core/C-G-pattern->url","args","census.geoAPI.core.G_patterner.cljs$core$IFn$_invoke$arity$variadic","census.geoAPI.core/$GET$-C-GeoJSON","census.utils.core/$GET$","census.geoAPI.core/IOE-C-GeoJSON","cljs.core.async.take_BANG_.cljs$core$IFn$_invoke$arity$2","=I=","url","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","=E=","G__34854","G__34855","G__34856","cljs.core.async/to-chan","=O=","census.geoAPI.core/$GET$-GeoKeyMap","census.geoAPI.core/getCensusGeoJSON","census.utils.core/->args","I","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/clj->js","js/JSON.stringify","census.utils.core/throw-err","cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0","G__34857","G__34858","G__34859","G__34860","census.utils.core/URL-GEOKEYMAP","=GKM=","census.utils.core/=O?>-cb","cb","p__34863","map__34864","census.geoAPI.core/GEOIDS<-$g$+args","vec__34866","seq__34867","GEOIDS","census.geoAPI.core/xf-mergeable-features","census.utils.core/xf<<","G__34869","G__34870","rf","acc","cljs.core/str","this","census.geoAPI.core/xf-mergeable<-GeoCLJS","p1__34871#","census.utils.core/educt<<","census.geoAPI.core/$GET$-C-GeoCLJ","census.geoAPI.core/=cfg=C-GeoCLJ","=args=","=cfg=","xform","g-key","census.geoAPI.core/cfg>cfg=C-GeoCLJ"]}