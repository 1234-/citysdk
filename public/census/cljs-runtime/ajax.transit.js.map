{"version":3,"sources":["ajax/transit.cljc"],"sourcesContent":["(ns ajax.transit\n    (:require [cognitect.transit :as t]\n              [ajax.interceptors :as i]\n              [ajax.protocols :as pr]\n              [ajax.util :as u]\n              #? (:clj  [poppea :as p]))\n    #? (:cljs (:require-macros [poppea :as p])))\n\n(defn transit-type [{:keys [type]}]\n  (or type #? (:cljs :json :clj :msgpack)))\n\n#? (:cljs (defn transit-write-fn\n            [type opts]\n            (let [writer (or (:writer opts)\n                             (t/writer type opts))]\n              (fn transit-write-params [params]\n                (t/write writer params))))\n    :clj (p/defn-curried transit-write-fn\n           [type opts stream params]\n           (let [writer (t/writer stream type opts)]\n             (t/write writer params))))\n\n(defn transit-request-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :writer Explicit Transit writer. If not supplied one will be created using the other options.\n           The default type is :json for ClojureScript and :msgpack for Clojure.\n   :type Override the default transit type with value :json, :json-verbose or :msgpack\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-request-format {}))\n  ([opts]\n     (let [type (transit-type opts)\n           mime-type (if (or (= type :json)\n                             (= type :json-verbose)) \"json\" \"msgpack\")]\n       {:write (transit-write-fn type opts)\n        :content-type (str \"application/transit+\" mime-type)})))\n\n#? (:cljs (defn transit-read-fn [opts]\n            (let [reader (or (:reader opts)\n                             (t/reader :json opts))]\n              (fn transit-read-response [response]\n                (t/read reader (pr/-body response)))))\n    :clj (p/defn-curried transit-read-fn [request response]\n           (let [content-type (u/get-content-type response)\n                 type (if (.contains content-type \"msgpack\")\n                        :msgpack :json)\n                 stream (pr/-body response)\n                 reader (t/reader stream type request)]\n             (t/read reader))))\n\n(defn transit-response-format\n  \"Returns a Transit request format.\n\n   Options include:\n   :reader (CLJS only) Explicit Transit reader. If not supplied one will be created using the other options.\n   :handlers Custom Transit handlers (refer to Transit documentation)\"\n  ([] (transit-response-format {}))\n  ([opts]\n     (transit-response-format (transit-type opts) opts))\n  ([type opts]\n     (i/map->ResponseFormat\n      {:read (transit-read-fn opts)\n       :description \"Transit\"\n       :content-type\n       #? (:cljs [\"application/transit+json\"]\n           :clj [\"application/transit+msgpack\"\n                 \"application/transit+json\"])})))\n"],"mappings":";;;;;;AAQA,AAAA,AAAA,AAAMM;AAAN,AAAA,AAAA,AAAAN;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA4B;AAA5B,AACE,AAAA,AAAIO;AAAJ,AAAA,AAAAD;AAAAA;;AAAA;;;AAEQ,AAAA,AAAME,AACH,AAAK;AADR,AAEE,AAAM,AAAO,AAAA,AAAI,AAAA,AAASC;AAAb,AAAA,AAAAH;AAAAA;;AACI,AAACI,AAASH,AAAKE;;;AADhC,AAEE;AAA0B;AAA1B,AACE,AAACE,AAAQC,AAAOC;;;;AAMhC,AAAA;;;;;;;;;AAAA,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAQM,AAAA,AAACE;;;AARP,AAAA,AAAA,AAAMF,AASF;AATJ,AAUK,AAAM,AAAK,AAACV,AAAaI;AACnB,AAAU,AAAA,AAAA,AAAI,AAAI,AAAA,AAACS,AAAEX,AACH,AAAA,AAACW,AAAEX;AAF3B,AAAA,AAAA,AAAA,AAGU,AAACC,AAAiBD,AAAKE,AAChB,AAAA,AAA4BU;;;AAdlD,AAAA,AAAA,AAAMJ;;AAAN,AAgBU,AAAA,AAAMK,AAAiB;AAAvB,AACE,AAAM,AAAO,AAAA,AAAI,AAAA,AAASX;AAAb,AAAA,AAAAH;AAAAA;;AACI,AAAA,AAACe,AAAeZ;;;AADjC,AAEE;AAA2B;AAA3B,AACE,AAACa,AAAOC,AAAO,AAACC,AAASC;;;;AASzC,AAAA;;;;;;;AAAA,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAX,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMW;AAAN,AAMM,AAAA,AAACC;;;AANP,AAAA,AAAA,AAAMD,AAOF;AAPJ,AAQK,AAACE,AAAwB,AAACxB,AAAaI,AAAMA;;;AARlD,AAAA,AAAA,AAAMkB,AASF,AAAK;AATT,AAUK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AACO,AAACV,AAAgBX;;;AAX9B,AAAA,AAAA,AAAMkB;;AAAN","names":["p__8892","map__8893","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","ajax.transit/transit-type","or__4047__auto__","type","ajax.transit/transit-write-fn","opts","cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2","cognitect.transit/write","writer","params","G__8897","ajax.transit/transit-request-format","js/Error","ajax.transit.transit_request_format.cljs$core$IFn$_invoke$arity$1","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","mime-type","ajax.transit/transit-read-fn","cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2","cognitect.transit/read","reader","ajax.protocols/-body","response","G__8899","ajax.transit/transit-response-format","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$1","ajax.transit.transit_response_format.cljs$core$IFn$_invoke$arity$2","ajax.interceptors/map->ResponseFormat"]}