{"version":3,"file":"oops.state.js","sources":["oops/state.cljs"],"mappings":";;;;AAOA,AAQA,AAFA,AADA,AAOA,iCAAA,jCAAMI,AARN,AAGA,AAJA;AAUE,AADF;;AAGA,2BAAA,3BAAMY,8DAAeC,cAAcV,gBAAgBK;6DAK1C,AAACR,vCAHDG,tBAFT,8FAMS,xDAHAK,tCAFP,uDAAA,/CAAOK;;AAOT,+BAAA,/BAAMO;AACJ,AADF;AAEE,IAAMT,wBAAsB,CAAgBD,qCAAgB;AAA5D,AACEC;;AAEJ,kCAAA,lCAAMM;AACJ,AADF;AAEE,IAAMT,mBAAiB,CAAgBE,qCAAgB;AACrD,AADF;AAEEF;;AAEJ,iCAAA,jCAAMF;AAAN,AACE;AACA,IAAMH,kBAAgB,CAAgBO,qCAAgB;AAAtD,AACE;AACAP;;AAEJ,2CAAA,3CAAMY,8FAA0BC;AAC9B,AADF;AAEE;AACA,IAAMnB,mBAAiB,CAAgBa,qCAAgB;AAAvD,AACE;AACA,AAAOb,sBAAiBmB;;AACxBnB;;AAEJ,0BAAA,1BAAMO;AAAN,AACE;AACA,IAAMP,mBAAiB,CAAgBa,qCAAgB;AACrD,AADF;AAEEb;;AAEJ,8BAAA,9BAAMiB;AACJ,AADF;AAEE,sCAAA,/BAAO,AAACV;;AAEV,sCAAA,tCAAMR;AAAN,AACE;AACA,QAAgBc,qCAAgB;;AAElC,4CAAA,5CAAMT,gGAA2BC;AAC/B,AADF;AAEE,QAAMQ,qCAAgB,OAAqCR;;AAE7D,uCAAA,vCAAemB;AACb,AADF;AAEE,IAAMZ,wBAAgB,CAAgBC,qCAAgB;AAAtD,AACE;AACAD;;AAEJ,uCAAA,vCAAMU;AAAN,AACE;AACA,oDAAA,5CAAMT,qCAAgB;;AAExB,0CAAA,1CAAMQ,4FAA8BnB,IAAIQ;AAAxC,AACE,GAAI,AAACe;AACH,OAACjB,6BAAgB,AAACC,iCAAqBP,IAAIQ;;AAC3C,YAAAT,MAAWC","names":["oops.state/get-last-access-modifier","current-key-path","js/Error","msg","oops.state/make-empty-key-path","oops.state/set-last-access-modifier!","mode","call-site-error","oops.state/get-key-path","oops.helpers/repurpose-error","oops.state/get-call-site-error","data","console-reporter","error-reported?","oops.state/*runtime-state*","current-target-object","oops.state/prepare-state","target-object","oops.state/get-key-path-str","oops.state/add-key-to-current-path!","key","oops.state/get-console-reporter","oops.state/prepare-error-from-call-site","oops.state/mark-error-reported!","oops.state/get-target-object","oops.state/was-error-reported?","oops.config/throw-errors-from-macro-call-sites?"],"sourcesContent":["(ns oops.state\n  \"Here we gather runtime state. For performance/code-gen reasons we keep everything under one JS array.\"\n  (:require-macros [oops.debug :refer [debug-assert]]\n                   [oops.constants :as constants])\n  (:require [oops.helpers :refer [repurpose-error unchecked-aget]]\n            [oops.config :as config]))\n\n(def ^:dynamic *runtime-state*)\n\n; state is a javascript array with following slots:\n(debug-assert (= (constants/target-object-idx) 0))\n(debug-assert (= (constants/call-site-error-idx) 1))\n(debug-assert (= (constants/console-reporter-idx) 2))\n(debug-assert (= (constants/error-reported-idx) 3))\n(debug-assert (= (constants/key-path-idx) 4))\n(debug-assert (= (constants/last-access-modifier-idx) 5))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn make-empty-key-path []\n  (array))\n\n(defn prepare-state [target-object call-site-error console-reporter]\n  (array target-object\n         call-site-error\n         console-reporter\n         false\n         (make-empty-key-path)\n         (constants/get-dot-access)))\n\n(defn get-target-object []\n  (debug-assert *runtime-state*)\n  (let [current-target-object (unchecked-aget *runtime-state* (constants/target-object-idx))]\n    current-target-object))\n\n(defn get-console-reporter []\n  (debug-assert *runtime-state*)\n  (let [console-reporter (unchecked-aget *runtime-state* (constants/console-reporter-idx))]\n    (debug-assert (fn? console-reporter))\n    console-reporter))\n\n(defn get-call-site-error []\n  (debug-assert *runtime-state*)\n  (let [call-site-error (unchecked-aget *runtime-state* (constants/call-site-error-idx))]\n    (debug-assert (instance? js/Error call-site-error))\n    call-site-error))\n\n(defn add-key-to-current-path! [key]\n  (debug-assert (string? key))\n  (debug-assert *runtime-state*)\n  (let [current-key-path (unchecked-aget *runtime-state* (constants/key-path-idx))]\n    (debug-assert (array? current-key-path))\n    (.push current-key-path key)\n    current-key-path))\n\n(defn get-key-path []\n  (debug-assert *runtime-state*)\n  (let [current-key-path (unchecked-aget *runtime-state* (constants/key-path-idx))]\n    (debug-assert (array? current-key-path))\n    current-key-path))\n\n(defn get-key-path-str []\n  (debug-assert *runtime-state*)\n  (.join (get-key-path) \".\"))\n\n(defn get-last-access-modifier []\n  (debug-assert *runtime-state*)\n  (unchecked-aget *runtime-state* (constants/last-access-modifier-idx)))\n\n(defn set-last-access-modifier! [mode]\n  (debug-assert *runtime-state*)\n  (aset *runtime-state* (constants/last-access-modifier-idx) mode))\n\n(defn ^boolean was-error-reported? []\n  (debug-assert *runtime-state*)\n  (let [error-reported? (unchecked-aget *runtime-state* (constants/error-reported-idx))]\n    (debug-assert (boolean? error-reported?))\n    error-reported?))\n\n(defn mark-error-reported! []\n  (debug-assert *runtime-state*)\n  (aset *runtime-state* (constants/error-reported-idx) true))\n\n(defn prepare-error-from-call-site [msg data]\n  (if (config/throw-errors-from-macro-call-sites?)\n    (repurpose-error (get-call-site-error) msg data)\n    (js/Error. msg)))                                                                                                         ; this is a fail-safe option for people with repurpose-error-related troubles, we don't attach data in this case\n"]}