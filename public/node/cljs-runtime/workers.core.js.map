{"version":3,"file":"workers.core.js","sources":["workers/core.cljs"],"mappings":"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","names":["workers.core/w-pool","target-obj-25846","*runtime-state*25850","oops.state/*runtime-state*","oops.state/prepare-state","js/Error","call-info-25848","next-obj-25849","oops.core/validate-object-access-dynamically","fn-25847","oops.core/validate-fn-call-dynamically","oops.state/get-last-access-modifier","js/shadow.js.shim.module$workerpool","workers.core/w-exec","js-fn","args","target-obj-25851","*runtime-state*25855","call-info-25853","next-obj-25854","fn-25852","workers.core/terminate","target-obj-25856","*runtime-state*25860","call-info-25858","next-obj-25859","fn-25857","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","workers.core/add","seq25861","self__4519__auto__","cljs.core/seq","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/+","workers.core/exec","target-obj-25865","*runtime-state*25869","call-info-25867","next-obj-25868","fn-25866"],"sourcesContent":["(ns workers.core\r\n  (:require\r\n    [cljs.core.async :as <|]\r\n    [cljs.core.async.impl.protocols :as impl]\r\n    [cljs.core.async.impl.dispatch :as dispatch]\r\n    [cljs-promises.core]\r\n    [cljs-promises.async :as <3]\r\n    [test.core :as ts]\r\n    [utils.core :as ut]\r\n    [\"workerpool\" :as ||>]\r\n    [oops.core :as ob]))\r\n    ;[oops.helpers :as obj]))\r\n\r\n;TODO: working with `oops` js classes w/methods: https://github.com/binaryage/cljs-oops/issues/10\r\n\r\n#_(js/console.log ||>)\r\n\r\n; =>\r\n;  { pool: [Function: pool],\r\n;  worker: [Function: worker],\r\n;  Promise:\r\n;  { [Function: Promise]\r\n;  all: [Function],\r\n;  defer: [Function],\r\n;  CancellationError: [Function: CancellationError],\r\n;  TimeoutError: [Function: TimeoutError] },\r\n;  platform: 'node',\r\n;  isMainThread: true,\r\n;  cpus: 4}\r\n\r\n(def w-pool (ob/ocall ||> [\"pool\"])) ;\"prototype\"]))) ; See: https://youtu.be/XfzXFWTT-z0?t=945\r\n\r\n(defn w-exec [js-fn args] (ob/ocall w-pool [\"exec\"] js-fn args))\r\n\r\n(def terminate (ob/ocall w-pool [\"terminate\"]))\r\n\r\n#_(js/console.log w-pool)\r\n#_(js/console.log w-exec)\r\n#_(js/console.log terminate)\r\n\r\n(defn add [& args] (apply + args))\r\n\r\n#_(-> (w-exec workers.core.add #js[1 2])\r\n      (.then (fn [fulfilled] (js/console.log fulfilled)))\r\n      (.catch (fn [error]    (js/console.log error)))\r\n      (.then (fn []          (terminate))))\r\n\r\n\r\n\r\n(defn exec [js-fn args] (ob/ocall w-pool \"exec\" js-fn args))\r\n\r\n#_(defn pool-port\r\n    \"Returns a ReadPort which sends [value nil] when `promise` fulfills, and [nil error]\r\n  when `promise` rejects.\"\r\n    [promise]\r\n    (reify\r\n      impl/ReadPort\r\n      (take! [_ handler]\r\n             (-> (.then promise\r\n                       (fn [val]\r\n                           (dispatch/run #((impl/commit handler) [val nil])))\r\n                       (fn [err]\r\n                           (dispatch/run #((impl/commit handler) [nil err]))))\r\n                 (.then terminate))\r\n        nil)))\r\n\r\n#_(defn =IO<-js-<3-fn\r\n    [<3-fn]\r\n    (fn [=I= =O=]\r\n      (<|/go (let [[val err] (<|/<! (pool-port (<3-fn (<|/<! =I=))))]\r\n               (if (= val nil)\r\n                   (<|/>! =O= err)\r\n                   (<|/>! =O= (js->clj val)))))))\r\n\r\n\r\n#_(let [args #js[3 5]\r\n        =I= (<|/chan 1 (map clj->js))\r\n        =O= (<|/chan 1 (map ut/throw-err))]\r\n       (<|/go (<|/>! =I= [add args])\r\n              ((ut/=IO<-js-<3-fn exec) =I= =O=)\r\n              (prn (<|/<! =O=))\r\n              (<|/close! =I=)\r\n              (<|/close! =O=)))\r\n\r\n#_(defn js-I=O<<=IO=\r\n    \"\r\n  Adapter, which wraps asynchronous I/O ports input to provide a synchronous\r\n  input, which converts values from =I= channel to js arguments. Created\r\n  initially for async js library (e.g., `workerpool`) interop.\r\n  \"\r\n    [f]                            ; takes an async I/O function\r\n    (fn [I =O= ?state]             ; returns a function with a sync input / `chan` output\r\n      (let [=I= (<|/chan 1)\r\n            js-args (clj->js I)]       ; create internal `chan`\r\n           (<|/go (<|/>! =I= js-args)       ; put sync `I` into `=I=`\r\n                  (f =I= =O= ?state)  ; call the wrapped function with the newly created `=I=`\r\n                  (<|/close! =I=))))) ; close the port to flush out values\r\n\r\n#_(defn test-promise\r\n    [?happy?]\r\n    (js/Promise. (fn [resolve reject]\r\n                   (let [answer \"This promise was \"]\r\n                        (if (= ?happy? \"happy\")\r\n                            (resolve (str answer \"resolved!\"))\r\n                            (reject  (js/Error. (str answer \"rejected :(\"))))))))\r\n\r\n\r\n#_(-> (test-promise \"happy\")\r\n      (.then (fn [fulfilled] (prn fulfilled))))\r\n\r\n#_(-> (test-promise \"poop\")\r\n      (.then (fn [fulfilled] (js/console.log fulfilled)))\r\n      (.catch (fn [error]    (js/console.log error))))\r\n\r\n\r\n\r\n#_(let [=O= (<|/chan 1 (map throw-err))]\r\n    (<|/go ((js-I=O<<=IO= (=IO<-js-<3-fn test-promise)) \"happy\" =O=)\r\n           (prn (<|/<! =O=))\r\n           (<|/close! =O=)))\r\n"]}